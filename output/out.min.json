{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "10": {
      "name": "slot11",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "11": {
      "name": "slot12",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "12": {
      "name": "slot13",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "13": {
      "name": "slot14",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "14": {
      "name": "slot15",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "15": {
      "name": "slot16",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "16": {
      "name": "slot17",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "17": {
      "name": "slot18",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "18": {
      "name": "slot19",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "19": {
      "name": "slot20",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "20": {
      "name": "slot21",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "core=nil;antigrav=nil;warpDrive=nil;radarUnit=nil;flightModeDb=nil;manualSwitches={}forceFields={}laser=nil;screen=nil;settingsActive=false;emitter=nil;telemeter=nil;function getElements()for a,b in pairs(_G)do if type(b)==\"table\"and b[\"getClass\"]then local c=b[\"getClass\"]()if c==\"CoreUnitDynamic\"or c==\"CoreUnitStatic\"or c==\"CoreUnitSpace\"then core=b end;if c==\"AtmoFuelContainer\"or c==\"SpaceFuelContainer\"then b.showWidget()end;if c==\"WarpDriveUnit\"then warpDrive=b;b.showWidget()end;if c==\"RadarPvPAtmospheric\"or c==\"RadarPvPSpace\"then radarUnit=b;b.showWidget()end;if c==\"DataBankUnit\"then flightModeDb=b end;if c==\"AntiGravityGeneratorUnit\"then antigrav=b end;if c==\"ManualSwitchUnit\"then table.insert(manualSwitches,b)end;if c==\"ForceFieldUnit\"then table.insert(forceFields,b)end;if c==\"ScreenUnit\"then screen=b end;if c==\"LaserEmitterUnit\"then laser=b end;if c==\"EmitterUnit\"then emitter=b end;if c==\"TelemeterUnit\"then telemeter=b end end end end;getElements()shipName=\"\"updateSettings=false;altHoldPreset1=132000.845;altHoldPreset2=1005;altHoldPreset3=50;altHoldPreset4=2;deviationThreshold=0.5;inertialDampening=true;followGravity=true;minRotationSpeed=0.01;maxRotationSpeed=5;rotationStep=0.03;verticalSpeedLimitAtmo=1100;verticalSpeedLimitSpace=4000;approachSpeed=200;autoShutdown=true;breadCrumbDist=1000;ContainerOptimization=5;FuelTankOptimization=5;fuelTankHandlingAtmo=5;fuelTankHandlingSpace=5;primaryColor=\"b80000\"secondaryColor=\"e30000\"textShadow=\"e81313\"ARCrosshair=\"ebbb0c\"fuelFontSize=1.8;showDockingWidget=true;dockingMode=1;setBaseOnStart=false;useGEAS=false;GEAS_Alt=10;activateFFonStart=false;setactivateFFonStart=false;pocket=false;setpocket=false;mouseSensitivity=1;enableARReticle=false;lockVerticalToBase=false;bool_to_number={[true]=1,[false]=0}number_to_bool={[1]=true,[0]=false}if flightModeDb.hasKey(\"activateFFonStart\")==0 or updateSettings then flightModeDb.setIntValue(\"activateFFonStart\",bool_to_number[setactivateFFonStart])activateFFonStart=setactivateFFonStart else activateFFonStart=number_to_bool[flightModeDb.getIntValue(\"activateFFonStart\")]end;if flightModeDb.hasKey(\"lockVerticalToBase\")==0 or updateSettings then flightModeDb.setIntValue(\"lockVerticalToBase\",bool_to_number[lockVerticalToBase])else lockVerticalToBase=number_to_bool[flightModeDb.getIntValue(\"lockVerticalToBase\")]end;if flightModeDb.hasKey(\"pocket\")==0 or updateSettings then flightModeDb.setIntValue(\"pocket\",bool_to_number[setpocket])pocket=setpocket else pocket=number_to_bool[flightModeDb.getIntValue(\"pocket\")]end;function PlanetRef()local function d(e)return type(e)=='number'end;local function f(e)return type(tonumber(e))=='number'end;local function g(t)return type(t)=='table'end;local function h(i)return type(i)=='string'end;local function j(k)return g(k)and d(k.x and k.y and k.z)end;local function l(m)return g(m)and d(m.latitude and m.longitude and m.altitude and m.bodyId and m.systemId)end;local n=math.pi/180;local o=180/math.pi;local p=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local r='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local clamp=utils.clamp;local function s(a,b)if a==0 then return math.abs(b)<1e-09 end;if b==0 then return math.abs(a)<1e-09 end;return math.abs(a-b)<math.max(math.abs(a),math.abs(b))*p end;local function u(e)local v=string.gsub(string.reverse(string.format('%.4f',e)),'^0*%.?','')return v==''and'0'or string.reverse(v)end;local function w(x)if j(x)then return string.format('{x=%.3f,y=%.3f,z=%.3f}',x.x,x.y,x.z)end;if g(x)and not getmetatable(x)then local y={}local z=next(x)if type(z)=='nil'or z==1 then for A,a in ipairs(x)do y[A]=w(a)end else for B,k in pairs(x)do local C=w(k)if type(B)=='number'then table.insert(y,string.format('[%s]=%s',B,C))else table.insert(y,string.format('%s=%s',B,C))end end end;return string.format('{%s}',table.concat(y,','))end;if h(x)then return string.format(\"[[%s]]\",x)end;return tostring(x)end;local D={}D.__index=D;D.__tostring=function(x,E)local F={}for B in pairs(x)do table.insert(F,B)end;table.sort(F)local y={}for G,B in ipairs(F)do local C=w(x[B])if type(B)=='number'then table.insert(y,string.format('[%s]=%s',B,C))else table.insert(y,string.format('%s=%s',B,C))end end;if E then return string.format('%s%s',E,table.concat(y,',\\n'..E))end;return string.format('{%s}',table.concat(y,','))end;D.__eq=function(H,I)return H.planetarySystemId==I.planetarySystemId and H.bodyId==I.bodyId and s(H.radius,I.radius)and s(H.center.x,I.center.x)and s(H.center.y,I.center.y)and s(H.center.z,I.center.z)and s(H.GM,I.GM)end;local function J(K,L,M,N,O)assert(f(K),'Argument 1 (planetarySystemId) must be a number:'..type(K))assert(f(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(f(M),'Argument 3 (radius) must be a number:'..type(M))assert(g(N),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(N))assert(f(O),'Argument 5 (GM) must be a number:'..type(O))return setmetatable({planetarySystemId=tonumber(K),bodyId=tonumber(L),radius=tonumber(M),center=vec3(N),GM=tonumber(O)},D)end;local P={}P.__index=P;P.__tostring=function(Q)return string.format('::pos{%d,%d,%s,%s,%s}',Q.systemId,Q.bodyId,u(Q.latitude*o),u(Q.longitude*o),u(Q.altitude))end;P.__eq=function(H,I)return H.bodyId==I.bodyId and H.systemId==I.systemId and s(H.latitude,I.latitude)and s(H.altitude,I.altitude)and(s(H.longitude,I.longitude)or s(H.latitude,math.pi/2)or s(H.latitude,-math.pi/2))end;local function R(S,L,T,U,V)local K=S;if h(S)and not U and not V and not L and not T then K,L,T,U,V=string.match(S,r)assert(K,'Argument 1 (position string) is malformed.')else assert(f(K),'Argument 1 (systemId) must be a number:'..type(K))assert(f(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(f(T),'Argument 3 (latitude) must be in degrees:'..type(T))assert(f(U),'Argument 4 (longitude) must be in degrees:'..type(U))assert(f(V),'Argument 5 (altitude) must be in meters:'..type(V))end;K=tonumber(K)L=tonumber(L)T=tonumber(T)U=tonumber(U)V=tonumber(V)if L==0 then return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=L,systemId=K},P)end;return setmetatable({latitude=n*clamp(T,-90,90),longitude=n*(U%360),altitude=V,bodyId=L,systemId=K},P)end;local W={}W.__index=W;W.__tostring=function(x,E)local X=E and E..'  'local Y={}local F={}for B in pairs(x)do table.insert(F,B)end;table.sort(F)for G,Z in ipairs(F)do bdy=x[Z]local _=D.__tostring(bdy,X)if E then table.insert(Y,string.format('[%s]={\\n%s\\n%s}',Z,_,E))else table.insert(Y,string.format('  [%s]=%s',Z,_))end end;if E then return string.format('\\n%s%s%s',E,table.concat(Y,',\\n'..E),E)end;return string.format('{\\n%s\\n}',table.concat(Y,',\\n'))end;local function a0(a1)local a2={}local a3;for G,k in pairs(a1)do local a4=k.planetarySystemId;if a4==nil then a4=0;k.planetarySystemId=a4 end;if type(a4)~='number'then error('Invalid planetary system ID: '..tostring(a4))elseif a3 and a4~=a3 then error('Mismatch planetary system IDs: '..a4 ..' and '..a3)end;local a5=k.bodyId;if a5==nil then a5=k.id;k.bodyId=a5 end;if type(a5)~='number'then error('Invalid body ID: '..tostring(a5))elseif a2[a5]then error('Duplicate body ID: '..tostring(a5))end;k.center=vec3(k.center)a2[a5]=setmetatable(k,D)a3=a4 end;return setmetatable(a2,W)end;PlanetaryReference={}local function a6(a7)return setmetatable({galaxyAtlas=a7 or{}},PlanetaryReference)end;PlanetaryReference.__index=function(t,A)if type(A)=='number'then local system=t.galaxyAtlas[A]return a0(system)end;return rawget(PlanetaryReference,A)end;PlanetaryReference.__pairs=function(x)return function(t,B)local a8,a9=next(t,B)return a8,a9 and a0(a9)end,x.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(x)local aa={}for G,ab in pairs(x or{})do local ac=ab:getPlanetarySystemId()local ad=W.__tostring(ab,'    ')table.insert(aa,string.format('  [%s]={%s\\n  }',ac,ad))end;return string.format('{\\n%s\\n}\\n',table.concat(aa,',\\n'))end;PlanetaryReference.BodyParameters=J;PlanetaryReference.MapPosition=R;PlanetaryReference.PlanetarySystem=a0;function PlanetaryReference.createBodyParameters(ae,L,af,ag,ah,ai,aj)assert(f(ae),'Argument 1 (planetarySystemId) must be a number:'..type(ae))assert(f(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(f(af),'Argument 3 (surfaceArea) must be a number:'..type(af))assert(g(ag),'Argument 4 (aPosition) must be an array or vec3:'..type(ag))assert(g(ah),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ah))assert(f(ai),'Argument 6 (altitude) must be in meters:'..type(ai))assert(f(aj),'Argument 7 (gravityAtPosition) must be number:'..type(aj))local M=math.sqrt(af/4/math.pi)local ak=M+ai;local al=vec3(ag)+ak*vec3(ah)local O=aj*ak*ak;return J(ae,L,M,al,O)end;PlanetaryReference.isMapPosition=l;function PlanetaryReference:getPlanetarySystem(S)if self.galaxyAtlas then local ae=S;if l(S)then ae=S.systemId end;if type(ae)=='number'then local system=self.galaxyAtlas[ae]if system then if getmetatable(system)~=W then system=a0(system)end;return system end end end;return nil end;function W:castIntersections(am,an,ao,ap)local ao=ao or function(aq)return 1.05*aq.radius end;local ar={}if ap then for G,A in ipairs(ap)do ar[A]=self[A]end else ap={}for B,aq in pairs(self)do table.insert(ap,B)ar[B]=aq end end;local function as(at,au)local av=ar[at].center-am;local aw=ar[au].center-am;return av:len()<aw:len()end;table.sort(ap,as)local ax=an:normalize()for A,a4 in ipairs(ap)do local aq=ar[a4]local ay=aq.center-am;local M=ao(aq)local az=ay:dot(ax)local aA=az^2-(ay:len2()-M^2)if aA>=0 then local aB=math.sqrt(aA)local aC=az+aB;local aD=az-aB;if aD>0 then return aq,aC,aD elseif aC>0 then return aq,aC,nil end end end;return nil,nil,nil end;function W:closestBody(aE)assert(type(aE)=='table','Invalid coordinates.')local aF,aq;local aG=vec3(aE)for G,aH in pairs(self)do local aI=aH.center-aG:len2()if not aq or aI<aF then aq=aH;aF=aI end end;return aq end;function W:convertToBodyIdAndWorldCoordinates(S)local aJ=S;if h(S)then aJ=R(S)end;if aJ.bodyId==0 then return 0,vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;local aH=self:getBodyParameters(aJ)if aH then return aJ.bodyId,aH:convertToWorldCoordinates(aJ)end end;function W:getBodyParameters(S)local L=S;if l(S)then L=S.bodyId end;assert(f(L),'Argument 1 (bodyId) must be a number:'..type(L))return self[L]end;function W:getPlanetarySystemId()local B,k=next(self)return k and k.planetarySystemId end;function W:netGravity(aE)assert(type(aE)=='table','Invalid coordinates.')local aK=vec3()local aG=vec3(aE)local aL,aq;for G,aH in pairs(self)do local aM=aH.center-aG;local aN=aM:len2()local aO=aH.GM/aN;if not aq or aO>aL then aq=aH;aL=aO end;aK=aK+aO/math.sqrt(aN)*aM end;return aq,aK end;function D:convertToMapPosition(N)assert(g(N),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(N))local aP=vec3(N)if self.bodyId==0 then return setmetatable({latitude=aP.x,longitude=aP.y,altitude=aP.z,bodyId=0,systemId=self.planetarySystemId},P)end;local aQ=aP-self.center;local ak=aQ:len()local V=ak-self.radius;local T=0;local U=0;if not s(ak,0)then local aR=math.atan(aQ.y,aQ.x)U=aR>=0 and aR or 2*math.pi+aR;T=math.pi/2-math.acos(aQ.z/ak)end;return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=self.bodyId,systemId=self.planetarySystemId},P)end;function D:convertToWorldCoordinates(S)local aJ=h(S)and R(S)or S;if aJ.bodyId==0 then return vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;assert(l(aJ),'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')assert(aJ.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(aJ.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local aS=math.cos(aJ.latitude)return self.center+(self.radius+aJ.altitude)*vec3(aS*math.cos(aJ.longitude),aS*math.sin(aJ.longitude),math.sin(aJ.latitude))end;function D:getAltitude(N)return vec3(N)-self.center:len()-self.radius end;function D:getDistance(N)return vec3(N)-self.center:len()end;function D:getGravity(N)local aM=self.center-vec3(N)local aN=aM:len2()return self.GM/aN*aM/math.sqrt(aN)end;return setmetatable(PlanetaryReference,{__call=function(G,...)return a6(...)end})end;function Kinematics()local a={}local b=30000000/3600;local c=b*b;local aT=100;local function aU(aV)return 1/math.sqrt(1-aV*aV/c)end;function a.computeAccelerationTime(aO,aW,A)local aX=b*math.asin(aO/b)return(b*math.asin(A/b)-aX)/aW end;function a.computeDistanceAndTime(aO,A,B,aY,m,e)m=m or 0;e=e or 0;local aZ=aU(aO)local Q=aO<=A;local a_=aY*(Q and 1 or-1)/B;local b0=-e/B;local i=a_+b0;if Q and i<=0 or not Q and i>=0 then return-1,-1 end;local t,b1=0,0;if a_~=0 and m>0 then local aX=math.asin(aO/b)local k=math.pi*(a_/2+b0)local b2=a_*m;local b3=b*math.pi;local aV=function(b4)local b5=(k*b4-b2*math.sin(math.pi*b4/2/m)+b3*aX)/b3;local b6=math.tan(b5)return b*b6/math.sqrt(b6*b6+1)end;local b7=Q and function(b8)return b8>=A end or function(b8)return b8<=A end;b1=2*m;if b7(aV(b1))then local b9=0;while math.abs(b1-b9)>0.5 do local b4=(b1+b9)/2;if b7(aV(b4))then b1=b4 else b9=b4 end end end;local ba=aO;local bb=b1/aT;for bc=1,aT do local bd=aV(bc*bb)t=t+(bd+ba)*bb/2;ba=bd end;if b1<2*m then return t,b1 end;aO=ba end;local aX=b*math.asin(aO/b)local be=(b*math.asin(A/b)-aX)/i;local bf=c*math.cos(aX/b)/i;local bg=bf-c*math.cos((i*be+aX)/b)/i;return bg+t,be+b1 end;function a.computeTravelTime(aO,aW,bg)if bg==0 then return 0 end;if aW>0 then local aX=b*math.asin(aO/b)local bf=c*math.cos(aX/b)/aW;return(b*math.acos(aW*(bf-bg)/c)-aX)/aW end;assert(aO>0,'Acceleration and initial speed are both zero.')return bg/aO end;function a.lorentz(aV)return aU(aV)end;return a end;local bh=table.concat;local bi=string.format;local function bj(k,bk,t)local bl=type(k)local bm=bj;if bl=='table'then t[bk]='{'local bn=bk+1;if#k==0 then for B,aU in pairs(k)do if type(B)~='number'then t[bn]=B;t[bn+1]='='bn=bn+2 else t[bn]='['t[bn+1]=B;t[bn+2]=']='bn=bn+3 end;bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end else for B,aU in pairs(k)do bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end end;if bn==bk+1 then t[bn]='}'return bn+1 else t[bn-1]='}'return bn end elseif bl=='string'then t[bk]=bi(\"%q\",k)return bk+1 elseif bl=='number'then t[bk]=tostring(k)return bk+1 else t[bk]=k and'true'or'false'return bk+1 end end;function serialize(k)local t={}local bk=1;local bl=type(k)local bm=bj;if bl=='table'then t[bk]='{'bk=bk+1;local bn=bk;if#k==0 then for B,aU in pairs(k)do if type(B)~='number'then t[bn]=B;t[bn+1]='='bn=bn+2 else t[bn]='['t[bn+1]=B;t[bn+2]=']='bn=bn+3 end;bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end else for B,aU in pairs(k)do bn=bm(aU,bn,t)t[bn]=','bn=bn+1 end end;if bn==bk then t[bn]='}'else t[bn-1]='}'end elseif bl=='string'then t[bk]=bi(\"%q\",k)elseif bl=='number'then t[bk]=tostring(k)else t[bk]=k and'true'or'false'end;return bh(t)end;function deserialize(i)local aV=load('t='..i)aV()return t end;function tryDeserialize(i)local aV=load('t='..i)if aV then aV()return true,t else return false end end;function mToKm(e)if e>=1000 then return round2(e/1000,2)..\" km\"else return round2(e,2)..\" m\"end end;function round2(q,bo)if q~=nil then return tonumber(string.format(\"%.\"..(bo or 0)..\"f\",q))end end;config={dataType=\"config\",floors={floor1=0,floor2=0,floor3=0,floor4=0},elevatorName=construct.getName(),rtb=0,targetAlt=0,estop=false,settingsActive=false,setBaseActive=false,setBaseReq=false,manualControl=false,destination=nil,shutDown=false,updateReq=false}stats={dataType=\"stats\",data={elevation=0,target=config.targetAlt,velocity=0,mass=0,gravity=0,target_dist=0,brake_dist=0,deviation=0,deviationVec=vec3(0,0,0),deviationRot=vec3(0,0,0),state=\"Idle\"}}fuelAtmo={dataType=\"fuelAtmo\",tanks={}}fuelSpace={dataType=\"fuelSpace\",tanks={}}function fuelTank(bp,bq)local br={}br.__index=br;return setmetatable({tm=bp,pct=bq},br)end;function EventDelegate()local a={}a.Delegates={}function a.Add(b)if type(b)~=\"function\"then error(\"[EventDelegate] Unable to add callback - not a function\")return end;for c=1,#a.Delegates do if a.Delegates[c]==b then return false end end;table.insert(a.Delegates,b)return true end;function a.Remove(b)if type(b)~=\"function\"then error(\"[EventDelegate] Unable to remove callback - not a function\")return end;for c=1,#a.Delegates do if a.Delegates[c]==b then table.remove(a.Delegates,c)return true end end;return false end;function a.Call(...)for c=1,#a.Delegates do a.Delegates[c](...)end end;function a.Count()return#a.Delegates end;setmetatable(a,{__call=function(aT,...)a.Call(...)end,__add=function(aU,aV)if aU==a then a.Add(aV)return a end;if aV==a then a.Add(aU)return a end;return a end,__sub=function(aU,aV)if aU==a then a.Remove(aV)return a end;if aV==a then a.Remove(aU)return a end;return a end,__tostring=function()return\"EventDelegate(#\"..#a.Delegates..\")\"end})return a end;Events={Update=EventDelegate(),Flush=EventDelegate()}TaskManager=function()local self={}self.Stack={}function self.Register(a)if not a.Coroutine then error(\"[TaskManager] Trying to register a non-Task\")end;table.insert(self.Stack,a)end;function self.Update()for b=1,#self.Stack do local a=self.Stack[b]if a and a.Coroutine~=nil then if coroutine.status(a.Coroutine)~=\"dead\"then local c,aT=coroutine.resume(a.Coroutine)a.Error=not c;a.LastReturn=aT else table.remove(self.Stack,b)if a.Error and a._Catch then a._Catch(a.LastReturn)elseif a._Then~=nil then a._Then(a.LastReturn)end;if a._Finally~=nil then a._Finally()end;a.Finished=true end end end end;return self end()function Task(aU)local self={}self.LastReturn=nil;self.Error=nil;self.Finished=false;if type(aU)~=\"function\"then error(\"[Task] Not a function.\")end;self.Coroutine=coroutine.create(aU)function self.Then(aU)if type(aU)~=\"function\"then error(\"[Task] Then callback not a function.\")end;self._Then=aU;return self end;function self.Finally(aU)if type(aU)~=\"function\"then error(\"[Task] Finally callback not a function.\")end;self._Finally=aU;return self end;function self.Catch(aU)if type(aU)~=\"function\"then error(\"[Task] Catch callback not a function.\")end;self._Catch=aU;return self end;TaskManager.Register(self)return self end;function await(a)if not a or not a.Coroutine then error(\"Trying to await non-task object\")end;while not a.Finished do coroutine.yield()end;return a.LastReturn end;function DynamicDocument(a)local self={}self.template=a or\"\"local b=\"\"local c={}self.tree={}local aT={br=true,hr=true,img=true,embed=true,param=true,area=true,col=true,input=true,meta=true,link=true,base=true,basefont=true,iframe=true,isindex=true,circle=true,polygon=true,polyline=true,ellipse=true,path=true,line=true,rect=true,use=true}function table.indexOf(val,table)for aU,aV in ipairs(table)do if aV==val then return aU end end;return nil end;function self.makeFunc(string)local val=\"nil\"if c[string]==nil then local aO,aW=pcall(load(\"return function() return \"..string..\" end\",nil,\"t\",_ENV))if aO then c[string]=aW;val=aW()if type(val)==\"function\"then c[string]=aW()val=val()end end else val=c[string]()end;return val end;local function A(a)local aX=0;local B={}local aY={}aY.dd={}table.insert(B,aY)local node={}for m,e,aZ,Q,a_,b0,val,i in string.gmatch(a,\"(<)(%/?!?)([%w:_-'\\\\\\\"%[]+)(.-)(%/?%-?)>([%s\\r\\n\\t]*)([^<]*)([%s\\r\\n\\t]*)\")do aZ=string.lower(aZ)if e==\"/\"then if aX==0 then return aY end;aX=aX-1;table.remove(B)else local function t(b1)local k=\"dd-\"return b1:sub(1,#k)==k end;aX=aX+1;node={}node.name=aZ;node.children={}node.attr={}if B[aX-1]then node.parent=B[aX-1][#B[aX-1]]else node.parent=nil end;if Q~=\"\"then for b2,aV in string.gmatch(Q,\"%s([^%s=]+)=\\\"([^\\\"]+)\\\"\")do node.attr[b2]=string.gsub(aV,'\"','[^\\\\]\\\\\"')if t(b2)then if not aY.dd[b2]then aY.dd[b2]={}end;table.insert(aY.dd[b2],node)end end;for b2,aV in string.gmatch(Q,\"%s([^%s=]+)='([^']+)'\")do node.attr[b2]=string.gsub(aV,'\"','[^\\\\]\\\\\"')if t(b2)then if not aY.dd[b2]then aY.dd[b2]={}end;table.insert(aY.dd[b2],node)end end end;if not B[aX]then B[aX]={}end;table.insert(B[aX],node)if aT[aZ]then if val~=\"\"then table.insert(B[aX],{name=\"textNode\",value=val})end;node.children={}aX=aX-1 else if val~=\"\"then table.insert(node.children,{name=\"textNode\",value=val})end;table.insert(B,node.children)end end end;return aY end;local function b3(b4,b5)local B={b4}local b6=\"\"local function b7(b8)local b9=0;for ba in pairs(b8)do b9=b9+1 end;return b9 end;if not b5 and b7(b4.dd)>0 then if b4.dd[\"dd-repeat\"]then for bb=#b4.dd[\"dd-repeat\"],1,-1 do local node=b4.dd[\"dd-repeat\"][bb]var,array=string.match(node.attr[\"dd-repeat\"],\"(.*) in (.*)\")node.attr[\"dd-repeat\"]=nil;local bc=b3({node},true)local bd=string.gmatch(bc,\"{{([^}}]+)}}\")local be={}for bf in bd do if string.match(bf,var)then table.insert(be,bf)end end;local b=\"\"local bg=self.makeFunc(array)for bb=1,#bg do _ENV[var]=bg[bb]local bs=bc;local bt=A(bs:gsub(\"^%s*(.-)%s*$\",\"%1\"))b=b..b3(bt)end;node.children={}node.name=\"textNode\"node.value=b end end;if b4.dd[\"dd-if\"]then for bb=#b4.dd[\"dd-if\"],1,-1 do local node=b4.dd[\"dd-if\"][bb]local bu=self.makeFunc(node.attr[\"dd-if\"])if bu then node.attr[\"dd-if\"]=nil else local bv=table.indexOf(node,node.parent.children)if bv then table.remove(node.parent.children,bv)end;node=nil;table.remove(b4.dd[\"dd-if\"],bb)b4.dd[\"dd-if\"][bb]=nil end end end;if b4.dd[\"dd-init\"]then for bb=#b4.dd[\"dd-init\"],1,-1 do local node=b4.dd[\"dd-init\"][bb]pcall(load(node.attr[\"dd-init\"],nil,\"t\",_ENV))node.attr[\"dd-init\"]=nil end end end;while#B~=0 do node=B[#B][1]if not node then break end;if node.name==\"textNode\"then local val=node.value:gsub(\"^%s*(.-)%s*$\",\"%1\")if not b5 then val=self.transformClosures(val)end;b6=b6 ..val else b6=b6 ..\"\\n\"..string.rep(\" \",#B-1)b6=b6 ..\"<\"..node.name;if node.attr then for bw,aV in pairs(node.attr)do if not b5 then bw=self.transformClosures(bw)aV=self.transformClosures(aV)end;b6=b6 ..\" \"..bw..'=\"'..aV..'\"'end end;if aT[node.name]then b6=b6 ..\"/>\"else b6=b6 ..\">\"end end;if node.children and#node.children>0 then table.insert(B,node.children)else table.remove(B[#B],1)if node.children and#node.children==0 and not aT[node.name]and not node.name==\"textNode\"then b6=b6 ..\"</\"..node.name..\">\"end;while#B>0 and#B[#B]==0 do table.remove(B)if#B>0 then if#B[#B][1].children>1 then b6=b6 ..\"\\n\"..string.rep(\" \",#B-1)..\"</\"..B[#B][1].name..\">\"else b6=b6 ..\"</\"..B[#B][1].name..\">\"end;table.remove(B[#B],1)end end end end;return b6:match\"^%s*(.-)%s*$\"end;function self.transformClosures(bx)local by={}local bz=string.gmatch(bx,\"{{([^}}]+)}}\")for bb in bz do table.insert(by,bb)end;if#by>0 then for bb=1,#by do local bA=by[bb]val=self.makeFunc(bA)bx=string.gsub(bx,self.literalize(\"{{\"..bA..\"}}\"),tostring(val))end end;return bx end;function self.literalize(b1)return b1:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\",function(bf)return\"%\"..bf end)end;function self.Read()return b3(A(self.template))end;return self end;DUTTY={}local a={}local b={}local function c(aT,aU)return aT:sub(aU,aU)end;local function aV(aT)local aO={}local aW=false;local A=''local aX=false;for B=1,#aT do local aY=c(aT,B)if aX==false and aW and aY==aW then table.insert(aO,A)aW=false;A=''elseif aX==false and#A==0 and(not aW and(aY=='\"'or aY==\"'\"))then aW=aY elseif aX==false and aY==' 'and aW==false then if#A>0 then table.insert(aO,A)A=''end elseif aX==false and aY=='\\\\'then aX=true else if aX then aX=false end;A=A..aY end end;if#A>0 then table.insert(aO,A)end;return aO end;function DUTTY.input(aT)for B,m in pairs(a)do if'function'==type(m)then m(aT)end end;local e=aV(aT)if#e>0 then local aZ=''local Q={}for B,aT in pairs(e)do if B==1 then aZ=aT:lower()else table.insert(Q,aT)end end;if b[aZ]and'function'==type(b[aZ])then b[aZ](table.unpack(Q))end end end;function DUTTY.onInput(m)if not'function'==type(m)then error('Event handler must be of type function')end;table.insert(a,m)end;function DUTTY.onCommand(aO,m)if not'function'==type(m)then error('Event handler must be of type function')end;b[aO:lower()]=m end;displaySize=0.85;system.print(fuelFontSize)CSS_SHUD=[[\n#horizon { \n  left: 0;\n  top: 0;\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background: radial-gradient(ellipse 27vw 11vw at 50% 51vw, rgba(1,5,8,0.6) 50%,rgba(1,5,8,0) 90%);\n  font-family: Verdana;\n  \n}\n\n#speedometer::before {\n  display: block;\n  position: absolute;\n  content: ' ';\n  top: 0.25vh;\n  bottom: -17vh;\n  left: 50%;\n  width: 31vw;\n  border: 10px solid #]]..primaryColor..[[;\n  border-bottom: 0;\n  border-right: 0;\n  border-left: 0;\n  border-radius: 100%;\n  transform: translateX(-50%);\n  background-color: transparent;\n  filter: blur(100vw);\n}\n\n#speedometerBar {\n  display: block;\n  position: fixed;\n  left: 50%;\n  top: 77.2vh;\n  width: 30vw;\n  height: 24.5vh;\n  transform: translate(-50%);\n  content: ' ';\n  border: 10px solid #]]..primaryColor..[[;\n  border-bottom: 0;\n  border-right: 0;\n  border-left: 0;\n  border-radius: 100%;\n  background-size: contain;\n  background-color: transparent;\n  filter: blur(0.1vw);\n}\n\n#speedometer {\n  font-family: 'Verdana';\n  font-weight: normal;\n  font-style: normal;\n  position: fixed;\n  left: 50%;\n  bottom: 13vh;\n  font-size: 2.5vw;\n  transform: translate(-50%);\n  background-color: transparent;\n  width: 30vw;\n  height: 10vh;\n  text-align: center;\n}\n\n#speedometer .display {\n  position: absolute;\n  top: calc(50% + 1vh);\n  left: calc(50% + 0.25em);\n  transform: translate(-50%, -50%);\n  font-weight: bold;\n  text-shadow: 0 0 0.75vw #]]..textShadow..[[;\n  padding: 0;\n  margin: 0;\n  font-size: 2.8vw;\n}\n\n#speedometer .display .minor, #speedometer .unit {\n  position: relative;\n  left: -0.5em;\n  vertical-align: super;\n  font-size: 40%;\n}\n\n#speedometer .unit {\n  vertical-align: 50%;\n  font-size: 23%;\n  left: -1.33em;\n}\n\n#speedometer .accel {\n  font-size: 1.2vw;\n  text-shadow: 0 0 0.15vw #000000;\n  position: absolute;\n  left: 12.5%;\n  bottom: 0;\n  opacity: 0.75;\n}\n\n#speedometer .accel .major::before {\n  content: 'Δ';\n  font-size: 40%;\n}\n\n#speedometer .accel .unit {\n  left: -0.66em;\n}\n\n#speedometer .alt {\n  position: absolute;\n  left: 50%;\n  bottom: -0.65vh;\n  transform: translateX(-50%);\n  font-size: 0.65vw;\n  text-align: center;\n}\n\n#speedometer .misc {\n  position: absolute;\n  left: 50%;\n  bottom: -1.5vh;\n  transform: translateX(-50%);\n  font-size: 0.4vw;\n  text-align: center;\n}\n\n#speedometer .throttle {\n  position: absolute;\n  left: 50%;\n  bottom: -4.3vh;\n  transform: translateX(-50%);\n  font-size: 0.7vw;\n  text-align: center;\n}\n\n#speedometer .vertical {\n  font-size: 1.3vw;\n  text-shadow: 0 0 0.15vw #000000;\n  position: absolute;\n  right: 12.5%;\n  bottom: 0;\n  opacity: 0.75;\n  text-align: right;\n}\n\n#speedometer .vertical::after {\n  content: '↕ m/s';\n  vertical-align: 50%;\n  font-size: 33%;\n}\n\n#speedometer::after {\n  display: block;\n  font-size: 0;\n  background-size: contain;\n  content: ' ';\n  position: absolute;\n  top: 0.5vh;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 666;\n  opacity: 0.5;\n}\n\n#horizon-menu {\n  text-transform: uppercase;\n  font-family: 'Verdana';\n  font-size: ]]..displaySize..[[vw;\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  bottom: 35%;\n  left: 2vw;\n  width: 18vw;\n  padding: 1vw;\n  transform: perspective(50vw) rotateY(35deg);\n  text-shadow: 0.1vw 0 0.25vw #000000;\n}\n#horizon-menu .item {\n  color: #fff;\n  padding: 0.2vw 0.5vw;\n  z-index: 99999;\n}\n#horizon-menu .item .right {\n  float: right;\n}\n#horizon-menu .item .red {\n  color: #]]..secondaryColor..[[;\n}\n#horizon-menu .item.active {\n  position: relative;\n  text-shadow: 0 0 0.75vw #]]..secondaryColor..[[;\n  transform: translateZ(0.33vw);\n  font-size: 1.15em;\n  transform-style: preserve-3d;\n}\n\n#horizon-menu .item.active::before {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 15%;\n  bottom: 15%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..secondaryColor..[[aa;\n  z-index: -50;\n  filter: blur(1vw);\n  opacity: 0.2;\n}\n\n#horizon-menu .item.active::after {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 20%;\n  bottom: 40%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..secondaryColor..[[aa;\n  z-index: -50;\n  filter: blur(0.2vw);\n  opacity: 0.3; \n}\n#horizon-menu .item.locked {\n  padding-left: 0.4vw;\n}\n#horizon-menu .item.locked::before {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 15%;\n  bottom: 15%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..primaryColor..[[aa;\n  z-index: -50;\n  filter: blur(1vw);\n  opacity: 0.2;\n}\n#horizon-menu .item.locked::after {\n  display: block;\n  content: ' ';\n  position: absolute;\n  top: 20%;\n  bottom: 40%;\n  left: 0.1vw;\n  right: 0.1vw;\n  background: #]]..primaryColor..[[aa;\n  z-index: -50;\n  filter: blur(0.2vw);\n  opacity: 0.6; \n}\n\n#horizon-menu::after {\n  content: ' ';\n  filter: blur(1vw);\n  display: block;\n  border-top-left-radius: 1vw;\n  border-top-right-radius: 1vw;\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n  background: linear-gradient(to bottom, rgba(0,0,0,0.65) 50%,rgba(0,0,0,0) 100%);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -99;\n}\n\n#horizon-menu::before {\n  content: ' ';\n  filter: blur(0.05vw);\n  display: block;\n  border-top-left-radius: 1vw;\n  border-top-right-radius: 1vw;\n  border-top: 0.25vw solid #]]..primaryColor..[[;\n  border-left: 0.25vw solid #]]..primaryColor..[[;\n  border-right: 0.25vw solid #]]..primaryColor..[[;\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n  background: radial-gradient(ellipse at top, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: -100;\n}\n\n/* ORE TRILATERATE STYLE */\n\np {\n  /*color:#eca943;*/\n   font-size:100%;\n  }\n\n.block {\n  border: 1px solid DimGray;\n  border-radius:10px;\n  background-color: rgba(0,0,0,.5)\n  }\n\n#main_block{\n  text-align: center;\n  padding: 10px 10px 10px 10px;\n  }\n\n#help_block{\n  text-align: left;\n  padding: 10px 10px 10px 10px;\n  width: 320px;\n  }\t\n\n#pause_block{        \ntext-align: center;\n  font-size:90%;\n  }\n\n#panel_left {  \n  position: absolute;\n  top: 0%;\nleft: 0%;\n  /*width: 310px;*/\n\n  }\n#slider_header {\n  position: absolute;\n  top: 0vh;\n  font-size:110%;\nwidth: 100%;\ntext-align: center;\t   \n  }\n\n\n#slider_main {\n  position: relative;\n  font-size:105%;\ncolor:#eca943;\n  /*left: -51%;/*0%*/*/\n  }\n\n#slider_footer{\n  position: relative;\n  font-size:120%;\n  top:80%;\n  left:10%; \n  }\n\n#panel_slider {\n  position: absolute;\n  top: 54.5vh; ;\n  left: 66.8vw;/*66.8vw;*/\n  width: 9vw;/*9vw;*/\n  height: 28.5vh;\n  transform: skew(15.85deg); /*15.85deg*/\n  border-bottom: 28.5vh solid rgba(0,0,0,.25);\n  border-right: 1vw solid transparent;\n  /*background-color:rgba(0,0,0,.75)*/  \t\n  }\n\n#panel_test {  \n  position: fixed;\n  top: 100px; /* or whatever top you need */\nleft: 50%;\nwidth: auto;\n-webkit-transform: translateX(-50%);\n-moz-transform: translateX(-50%);\n-ms-transform: translateX(-50%);\n-o-transform: translateX(-50%);\ntransform: translateX(-50%);\n}\n#fuelTanks {\n  position: absolute;\n  top: 2%;\n  left: 2%;\n  width: 12vw;\n\n  color: #1b1b1b;\n  font-family: Verdana;\n  font-size: 1vh;\n  text-align: center;\n}\n#fuelTanks .fuel-meter {\n  display: block;\n  position: relative;\n  z-index: 1;\n  border-radius: 0.5em;\n  background: #c6c6c6;\n  padding: 0.5em 1em;\n  margin-bottom: 0.5em;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n#fuelTanks .fuel-meter .fuel-level {\n  display: block;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  bottom: 0px;\n  z-index: -1;\n  border: 0px none;\n  margin: 0;\n  padding: 0;\n}\n#fuelTanks .fuel-meter.fuel-type-atmo .fuel-level { background: #1dd1f9; }\n#fuelTanks .fuel-meter.fuel-type-space .fuel-level { background: #fac31e; }\n#fuelTanks .fuel-meter.fuel-type-rocket .fuel-level { background: #bfa6ff; }\n.st0{fill:none;stroke:#]]..ARCrosshair..[[;stroke-width:1;stroke-miterlimit:10;}\n.st1{fill:none;stroke:#]]..ARCrosshair..[[;stroke-width:2;stroke-miterlimit:10;}\n.st2{fill:#]]..ARCrosshair..[[;stroke:#]]..ARCrosshair..[[;stroke-miterlimit:10;}\n.st3{fill:#]]..ARCrosshair..[[; font-family: Verdana; font-size:10.5px;}\n.shadow {\n  -webkit-filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n  filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n}\n]]system.print(\"ContainerOp\"..ContainerOptimization)fuelTanks={}FuelMass={}FuelTime={}fuelTypes={atmo={density=4.000},space={density=6.000},rocket={density=0.800}}local function bB(bC)if fuelTankHandlingAtmo>0 then return bC+bC*fuelTankHandlingAtmo*0.2 else return bC end end;local function bD(bC)if fuelTankHandlingSpace>0 then return bC+bC*fuelTankHandlingSpace*0.2 else return bC end end;local function bE(bF,type)local bG=bF*fuelTypes[type].density;local bH=bG;if ContainerOptimization>0 then bH=bG-bG*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bH=bH-bG*FuelTankOptimization*0.05 end;return bH end;function normalizeHp(type,bI)local bJ=0;if type==\"atmo\"then if bI>=50 and bI<163 then bJ=50 elseif bI>=163 and bI<1315 then bJ=163 elseif bI>=1315 and bI<10461 then bJ=1315 elseif bI>=10461 then bJ=10461 end elseif type==\"space\"then if bI>=50 and bI<187 then bJ=50 elseif bI>=187 and bI<1496 then bJ=187 elseif bI>=1496 and bI<15933 then bJ=1496 elseif bI>=15933 then bJ=15933 end elseif type==\"rocket\"then if bI>=366 and bI<736 then bJ=366 elseif bI>=736 and bI<6231 then bJ=736 elseif bI>=6231 and bI<68824 then bJ=6231 elseif bI>=68824 then bJ=68824 end end;return bJ end;function normalizeHpAtmo(bI)end;function normalizeHpSpace(bI)end;function normalizeHpRocket(bI)end;fuelTankSpecsByMaxHP={atmo={_50={type=\"atmo\",size=\"XS\",capacity=function()return bB(100)end,baseWeight=35.030,maxWeight=function()return bE(bB(100),\"atmo\")end},_163={type=\"atmo\",size=\"S\",capacity=function()return bB(400)end,baseWeight=182.670,maxWeight=function()return bE(bB(400),\"atmo\")end},_1315={type=\"atmo\",size=\"M\",capacity=function()return bB(1600)end,baseWeight=988.670,maxWeight=function()return bE(bB(1600),\"atmo\")end},_10461={type=\"atmo\",size=\"L\",capacity=function()return bB(12800)end,baseWeight=5480.000,maxWeight=function()return bE(bB(12800),\"atmo\")end}},space={_50={type=\"space\",size=\"XS\",capacity=function()return bB(100)end,baseWeight=35.030,maxWeight=function()return bE(bB(100),\"space\")end},_187={type=\"space\",size=\"S\",capacity=function()return bD(400)end,baseWeight=182.670,maxWeight=function()return bE(bB(400),\"space\")end},_1496={type=\"space\",size=\"M\",capacity=function()return bD(1600)end,baseWeight=988.670,maxWeight=function()return bE(bB(1600),\"space\")end},_15933={type=\"space\",size=\"L\",capacity=function()return bD(12800)end,baseWeight=5480.000,maxWeight=function()return bE(bB(12800),\"space\")end}},rocket={_366={type=\"rocket\",size=\"XS\",capacity=function()return 400 end,baseWeight=173.420,maxWeight=function()return bE(bB(400),\"rocket\")end},_736={type=\"rocket\",size=\"S\",capacity=function()return 800 end,baseWeight=886.720,maxWeight=function()return bE(bB(800),\"rocket\")end},_6231={type=\"rocket\",size=\"M\",capacity=function()return 6400 end,baseWeight=4720.000,maxWeight=function()return bE(bB(6400),\"rocket\")end},_68824={type=\"rocket\",size=\"L\",capacity=function()return 50000 end,baseWeight=25740.000,maxWeight=function()return bE(bB(50000),\"rocket\")end}}}local function bK(C)return C==math.huge or C==-math.huge end;local function bL(C)return C~=C end;function disp_time(bM)if bK(bM)or bL(bM)then return\"inf\"end;local bN=math.floor(bM/86400)local bO=math.floor(math.fmod(bM,86400)/3600)local bP=math.floor(math.fmod(bM,3600)/60)local bQ=math.floor(math.fmod(bM,60))if bM>=86400 then return string.format(\"%dd:%02dh\",bN,bO)elseif bM<86400 and bM>3600 then return string.format(\"%02dh:%02dm:%02ds\",bO,bP,bQ)elseif bM<3600 and bM>60 then return string.format(\"%02dm:%02ds\",bP,bQ)else return string.format(\"%02ds\",bQ)end end;local bR=table.unpack;function fuelUsed(bS)local t={}function sum(a,...)if a then return a-sum(...)else return 0 end end;function average(e)if#t==bS then table.remove(t,1)end;if e~=0 and e~=nil then t[#t+1]=e end;return sum(bR(t))end;return average end;function getFuelSituation()local bT={atmo={},space={},rocket={}}for a4,bU in pairs(fuelTanks)do table.insert(bT[bU.type],{name=core.getElementNameById(a4),level=getFuelTankLevel(a4),time=getFuelTime(a4),specs=bU})end;return bT end;function getFuelTankSpecs(bV,bW)local bX=math.floor(core.getElementMaxHitPointsById(bW))system.print(bV..\"........\"..bX)return fuelTankSpecsByMaxHP[bV]['_'..normalizeHp(bV,bX)]end;function getFuelTankLiters(bW)local bY=fuelTanks[bW]local bZ=core.getElementMassById(bW)local b_=bZ-bY.baseWeight;return b_ end;function getFuelTankLevel(bW)local bY=fuelTanks[bW]local bH=bY.maxWeight()return getFuelTankLiters(bW)/bH end;function getFuelTime(bW)local bY=fuelTanks[bW]local c0=FuelTime[bW]or system.getArkTime()local c1=math.max(system.getArkTime()-c0,0.001)local bZ=core.getElementMassById(bW)local c2=bY.baseWeight;local fuelUsed=FuelMass[bW](bZ)local c3=c1/fuelUsed*(bZ-c2)local c4=disp_time(c3)FuelTime[bW]=system.getArkTime()return c4 end;function getFuelTanks()local c5=core.getElementIdList()for B,c6 in pairs(c5)do local c7=core.getElementDisplayNameById(c6)if c7==\"Atmospheric Fuel Tank\"then local c8=getFuelTankSpecs(\"atmo\",c6)fuelTanks[c6]=c8;FuelMass[c6]=fuelUsed(2)elseif c7==\"Space Fuel Tank\"then fuelTanks[c6]=getFuelTankSpecs(\"space\",c6)FuelMass[c6]=fuelUsed(2)elseif c7==\"Rocket Fuel Tank\"then fuelTanks[c6]=getFuelTankSpecs(\"rocket\",c6)FuelMass[c6]=fuelUsed(2)end end;for G,k in ipairs(fuelTankSpecsByMaxHP)do for B,t in ipairs(k)do for b3,b4 in pairs(t)do end end end end;getFuelTanks()function TagManager(a)self={}local b={}local c=\"\"local function aT(aU,aV)if aU==''then return false end;local aO,aW=0,{}for A,aX in function()return string.find(aV,aU,aO,true)end do table.insert(aW,string.sub(aV,aO,A-1))aO=aX+1 end;table.insert(aW,string.sub(aV,aO))return aW end;function self.tagsToString()if#b==0 then c=\"all\"else c=table.concat(b,\",\")end end;function self.Remove(B)if type(B)~=\"string\"then error(\"[TagManager] Unable to remove a tag - Not a string\")end;for aY,m in pairs(b)do if B==m then table.remove(b,aY)end end;self.tagsToString()end;function self.Add(B)if type(B)~=\"string\"then error(\"[TagManager] Unable to add a tag - Not a string\")end;for aY,m in pairs(b)do if B==m then return end end;table.insert(b,B)self.tagsToString()end;if a~=nil and type(a)==\"string\"then for aY,m in pairs(aT(\",\",a))do self.Add(m)end else self.Add(\"all\")end;setmetatable(self,{__tostring=function(self)return c end})return self end;function Keybind(a)local self={}self.Key=a;local b={}function self.Add(c,aT)if type(c)~=\"function\"then error(\"[Keybind] Unable to add callback - not a function\")end;table.insert(b,{Function=c,Name=aT})end;function self.Remove(c)if type(c)~=\"function\"then error(\"[Keybind] Unable to remove callback - not a function\")end;local aU={}for aV,aO in pairs(b)do aU[aO.Function]=aV end;for aV,aO in pairs(aU)do if aV==c then b[aO]=nil end end end;function self.GetNames()local aW={}for aV,aO in pairs(b)do if aO.Name then table.insert(aW,aO.Name)end end;return aW end;function self.Call()for aV,aO in pairs(b)do aO.Function(self.Key)end end;return self end;function KeybindController()local self={}local A={\"forward\",\"backward\",\"left\",\"right\",\"yawleft\",\"yawright\",\"up\",\"down\",\"gear\",\"light\",\"landing\",\"brake\",\"option1\",\"option2\",\"option3\",\"option4\",\"option5\",\"option6\",\"option7\",\"option8\",\"option9\",\"stopengines\",\"speedup\",\"speeddown\",\"antigravity\",\"booster\",\"lshift\",\"lalt\",\"lalt\",\"strafeleft\",\"straferight\"}self.keyUp={}self.keyDown={}self.keyLoop={}function self.Call(aX,type)if type==\"up\"then if self.keyUp[aX]then self.keyUp[aX].Call(aX)end elseif type==\"down\"then if self.keyDown[aX]then self.keyDown[aX].Call(aX)end else if self.keyLoop[aX]then self.keyDown[aX].Call(aX)end;system.print(aX)end end;function self.GetNamedKeybinds()local aW={}for aV,aO in pairs(self.keyUp)do local B=aO.GetNames()if#B>0 then for aY=1,#B do table.insert(aW,{Key=aO.Key,Name=B[aY]})end end end;for aV,aO in pairs(self.keyDown)do local B=aO.GetNames()if#B>0 then for aY=1,#B do table.insert(aW,{Key=aO.Key,Name=B[aY]})end end end;for aV,aO in pairs(self.keyLoop)do local B=aO.GetNames()if#B>0 then for aY=1,#B do table.insert(aW,{Key=aO.Key,Name=B[aY]})end end end;table.sort(aW,function(m,e)return m.Key<e.Key end)return aW end;self.Init=function()end;local function aZ()for aY=1,#A do self.keyUp[A[aY]]=Keybind(A[aY])self.keyDown[A[aY]]=Keybind(A[aY])self.keyLoop[A[aY]]=Keybind(A[aY])end end;aZ()return self end;keybindPresets={}IOScheduler=function()local self={}self.defaultData=nil;self.currentTask=nil;self.taskQueue={}function self.queueData(c9)table.insert(self.taskQueue,c9)end;function self.send(bA)output=screen.getScriptOutput()screen.clearScriptOutput()if output~=\"ack\"then if output~=\"\"then handleOutput.Read(output)end;coroutine.yield()self.send(bA)else screen.setScriptInput(serialize(bA))end end;function self.runQueue()if#self.taskQueue==0 then if self.defaultData~=nil then self.currentTask=coroutine.create(function()self.send(self.defaultData)end)coroutine.resume(self.currentTask)end else self.currentTask=coroutine.create(function()for A=1,#self.taskQueue do local c9=self.taskQueue[A]if type(c9)==\"table\"then self.send(c9)end;table.remove(self.taskQueue,A)end end)coroutine.resume(self.currentTask)end end;function self.update()if self.currentTask then if coroutine.status(self.currentTask)~=\"dead\"then coroutine.resume(self.currentTask)else self.runQueue()end else self.runQueue()end end;return self end()HandleOutput=function()local self={}function self.Read(output)if output~=nil and output~=\"\"then if type(output)==\"string\"then local i=deserialize(output)if i.dataType==\"config\"then config=i;stats.data.target=config.targetAlt;self.Execute()elseif i.updateReq then ioScheduler.queueData(config)else system.print(tostring(i))end end end end;function self.Execute()ship.baseAltitude=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ship.altitudeHold=config.targetAlt;if config.estop then ship.altitudeHold=0;config.targetAlt=0;ship.verticalLock=false;ship.elevatorActive=false;ship.brake=true;ship.stateMessage=\"EMERGENCY STOP\"system.print(ship.stateMessage)ioScheduler.queueData(config)else ship.brake=false end;if ship.altitudeHold~=0 then ship.elevatorActive=true;system.print(\"Alt diff: \"..config.targetAlt-ship.baseAltitude)ship.targetDestination=moveWaypointZ(ship.baseLoc,config.targetAlt-ship.baseAltitude)end;if config.setBaseReq then setBase()config.setBaseReq=false;ioScheduler.queueData(config)end;manualControlSwitch()end;return self end()ioScheduler=IOScheduler;handleOutput=HandleOutput;local a2=require('atlas')planetaryReference=PlanetRef()galaxyReference=planetaryReference(a2)helios=galaxyReference[0]kinematics=Kinematics()local ca=json.decode;local cb=ca(unit.getWidgetData()).maxBrake;function STEC(core,cc,cd)local self={}self.core=core;self.construct=construct;self.control=cc;self.nearestPlanet=helios:closestBody(construct.getWorldPosition())self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cc.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}self.target={prograde=function()return self.world.velocity:normalize()end,retrograde=function()return-self.world.velocity:normalize()end,radial=function()return self.world.gravity:normalize()end,antiradial=function()return-self.world.gravity:normalize()end,normal=function()return self.world.velocity:normalize():cross(self.world.gravity:normalize()):normalize()end,antinormal=function()return self.world.velocity:normalize():cross(-self.world.gravity:normalize()):normalize()end}self.rot=vec3(0,0,0)self.deviationRot=vec3(0,0,0)self.id=construct.getId()self.controlMode=unit.getControlMode()self.alternateCM=false;self.tags=TagManager(\"all,brake\")self.targetDestination=nil;self.targetdestination=nil;self.baseLoc=vec3(0,0,0)self.baseAltitude=0;self.verticalLock=false;self.lockVector=vec3(0,0,0)self.lockPos=vec3(0,0,0)self.altHoldPreset1=0;self.altHoldPreset2=0;self.altHoldPreset3=0;self.altHoldPreset4=0;self.deviation=0;self.deviationVec=vec3(0,0,0)self.stateMessage=\"\"self.pocket=false;self.autoShutdown=false;self.dockingClamps=false;self.elevatorDestination=vec3(0,0,0)self.IDIntensity=5;self.deviationThreshold=0.05;self.playerId=player.getId()self.targetVectorVertical=nil;self.breadCrumbDist=1000;self.deviated=false;self.breadCrumbs={}self.hoverHeight=10;self.targetVectorAutoUnlock=true;self.altitude=0;self.mass=self.construct.getMass()self.thrust=vec3(0,0,0)self.direction=vec3(0,0,0)self.rotation=vec3(0,0,0)self.rotationSpeed=2;self.rotationSpeedzMin=0.01;self.rotationSpeedz=0.01;self.maxRotationSpeedz=3;self.rotationStep=0.03;self.brakingFactor=10;self.angularThrust=vec3(0,0,0)self.inertialDampening=false;self.inertialDampeningDesired=false;self.brake=false;self.counterGravity=true;self.followGravity=false;self.gravityFollowSpeed=6;self.speedLimiter=2000;self.variableSpeedLimit=2000;self.speedLimiterToggle=true;self.verticalSpeedLimitAtmo=750;self.verticalSpeedLimitSpace=2000;self.approachSpeed=200;self.throttle=1;self.fMax=0;self.vMax=0;self.hMax=0;self.elevatorActive=false;self.altitudeHold=0;self.atmosphereThreshold=0;self.cruiseSpeed=0;self.ignoreVerticalThrottle=false;self.localVelocity=vec3(construct.getVelocity())self.brakeDistance=0;self.accelTime=nil;self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;self.viewY=0;self.viewX=0;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.verticalCruise=false;self.verticalCruiseSpeed=0;self.priorityTags1=\"brake,airfoil,torque,vertical,lateral,longitudinal\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"\"local c0=system.getArkTime()function self.updateWorld()self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cc.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}self.nearestPlanet=helios:closestBody(construct.getWorldPosition())self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.AngularVelocity=vec3(construct.getWorldAngularVelocity())self.AngularAcceleration=vec3(construct.getWorldAngularAcceleration())self.AngularAirFriction=vec3(construct.getMaxThrustAlongAxis())self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())local atmoRadius=helios:closestBody(construct.getWorldPosition()).atmosphereRadius;local planetRadius=helios:closestBody(construct.getWorldPosition()).radius;self.atmosphereThreshold=atmoRadius-planetRadius;self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())self.mass=self.construct.getMass()self.altitude=helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition())self.localVelocity=vec3(construct.getVelocity())self.maxBrake=ca(unit.getWidgetData()).maxBrake;local ce=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local cf=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})local cg=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})if self.world.atmosphericDensity>0.1 then self.fMax=math.max(ce[1],-ce[2])else self.fMax=math.max(ce[3],-ce[4])end;if self.world.atmosphericDensity>0.1 then self.vMax=math.max(cf[1],-cf[2])else self.vMax=math.min(cf[3],-cf[4])end;if self.world.atmosphericDensity>0.1 then self.hMax=math.max(cg[1],-cg[2])else self.hMax=math.max(cg[3],-cg[4])end;local ch=self.mass*core.getGravityIntensity()local ci=self.vMax;local cj=self.maxBrake;local ck=1;if self.maxBrake~=nil and core.getGravityIntensity()>=1 then if self.world.velocity:dot(-self.world.gravity:normalize())<1 then ck=-1 end;ch=ch*ck;ci=self.vMax+ch;cj=self.maxBrake+ch end;self.brakeDistance,self.accelTime=kinematics.computeDistanceAndTime(self.world.velocity:len(),0,self.mass,ci,20,cj)end;function self.calculateAccelerationForce(cl,bM)return self.mass*cl/bM end;function clamp(e,cm,cn)return math.min(cn,math.max(e,cm))end;function round(q,bo)local co=10^(bo or 0)return math.floor(q*co+0.5)/co end;function self.throttleUp()self.throttle=clamp(self.throttle+0.05,0,1)end;function self.throttleDown()self.throttle=clamp(self.throttle-0.05,0,1)end;function moveWaypointZ(cp,V)return cp-ship.nearestPlanet:getGravity(cp):normalize()*V end;function self.worldToLocal(cp)return vec3(library.systemResolution3({self.world.right:unpack()},{self.world.forward:unpack()},{self.world.up:unpack()},{cp:unpack()}))end;function self.localToRelative(cq,cr,cs,ct)local cu,cv,cw=cs:unpack()local forwardX,cx,cy=ct:unpack()local cz,cA,cB=cr:unpack()local cC,cD,cE=cq:unpack()local cF=cC*cu+cD*forwardX+cE*cz;local cG=cC*cv+cD*cx+cE*cA;local cH=cC*cw+cD*cy+cE*cB;return vec3(cF,cG,cH)end;function MsToKmh(cI)return cI*3.6 end;function KmhToMs(cJ)return cJ/3.6 end;function self.apply()local c1=math.max(system.getArkTime()-c0,0.001)self.updateWorld()local cK=self.thrust;local cL=self.angularThrust;local cM=false;local ce=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local cN=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})local cO=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,-1):unpack()})local cg=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})if lockVerticalToBase then self.altitude=helios:closestBody(self.baseLoc):getAltitude(construct.getWorldPosition())self.nearestPlanet=helios:closestBody(self.baseLoc)atmoRadius=helios:closestBody(self.baseLoc).atmosphereRadius;planetRadius=helios:closestBody(self.baseLoc).radius end;if not self.elevatorActive then self.inertialDampening=self.inertialDampeningDesired end;if self.direction.x~=0 then local az=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cP=-self.world.vertical*az;if self.direction.x<0 and math.abs(round2(cg[2],0))<500 then cM=true;cK=cK+self.world.right*self.direction.x+cP:normalize()*self.fMax*self.throttle elseif self.direction.x>0 and math.abs(round2(cg[1],0))<500 then cM=true;cK=cK+self.world.right*self.direction.x+cP:normalize()*self.fMax*self.throttle else cK=cK+self.world.right*self.direction.x*self.fMax*self.throttle end end;if self.direction.y~=0 then local az=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cP=-self.world.vertical*az;if self.direction.y<0 and math.abs(round2(ce[2],0))==0 then cM=true;cK=cK+self.world.forward*self.direction.y+cP:normalize()*self.fMax*self.throttle else cK=cK+self.world.forward*self.direction.y*self.fMax*self.throttle end end;if self.direction.z~=0 then local a=self.world.up*self.direction.z*self.fMax;if not self.ignoreVerticalThrottle then a=a*self.throttle end;cK=cK+a end;if self.rotation.x~=0 then cL=cL+self.world.forward:cross(self.world.up)*self.rotation.x*self.rotationSpeed;if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.rotation.y~=0 then cL=cL+self.world.up:cross(self.world.right)*self.rotation.y*self.rotationSpeed end;if self.rotation.z~=0 then if self.rotationSpeedz<=self.maxRotationSpeedz then self.rotationSpeedz=self.rotationSpeedz+self.rotationStep end;cL=cL+self.world.forward:cross(self.world.right)*self.rotation.z*clamp(self.rotationSpeedz,0.01,self.maxRotationSpeedz)if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.followGravity and self.rotation.x==0 then local cQ=self.localVelocity:len()*self.mass;local cR=nil;local cS=self.world.up:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition()))if lockVerticalToBase then cS=self.world.up:cross(-self.nearestPlanet:getGravity(self.baseLoc))end;local cR=1;if self.pocket then if self.direction.x<0 then cR=0.25;cS=cS+ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.x>0 then cR=0.25;cS=cS-ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.y<0 then cS=cS+ship.world.forward:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)end end;cS=cS*cR;cL=cL+cS end;self.deviationVec=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude)-self.world.position;self.deviationRot=self.world.forward:cross(self.rot)self.deviation=self.deviationVec:len()if self.elevatorActive then if not self.inertialDampening then self.inertialDampening=true end;if not self.counterGravity then self.counterGravity=true end;self.targetVector=self.rot;if self.world.velocity:len()>2000/3.6 then deviation=0 end;local cT=self.altitudeHold-self.altitude;local cU=1000;local cV=0;local ak=self.world.position-self.targetDestination:len()local cW=helios:closestBody(self.baseLoc):getAltitude(self.targetDestination)-self.altitude;local cX=vec3(0,0,0)local cY;local cZ=1;if self.altitude<=self.atmosphereThreshold+self.brakeDistance or self.altitude<=self.brakeDistance then cY=self.verticalSpeedLimitAtmo else cY=self.verticalSpeedLimitSpace end;if self.brakeDistance+cU>=math.abs(cT)then cY=self.approachSpeed end;local deviationThreshold=self.deviationThreshold;if self.deviated or self.world.velocity:len()<1 then deviationThreshold=0.05 end;if self.deviation>deviationThreshold+self.world.velocity:len()*10^-2 then cX=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude)self.deviated=true;cV=self.deviation*self.IDIntensity;self.stateMessage=\"Correcting Deviation\"else self.deviated=false;cX=self.targetDestination end;if math.abs(cT)>self.brakeDistance and math.abs(cT)>500 and not self.deviated then self.stateMessage=\"Traveling\"cV=round2(clamp(cT,-cY,cY),1)elseif not self.deviated then self.stateMessage=\"Final approach\"cV=self.approachSpeed;if self.brakeDistance*1.5>=math.abs(ak)then cV=5 end end;local c_;if cW>self.breadCrumbDist and not self.deviated then c_=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude+self.breadCrumbDist)cX=c_;local d0=ship.nearestPlanet:convertToMapPosition(cX)system.setWaypoint(d0,false)elseif cW<-self.breadCrumbDist and not self.deviated then c_=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude-self.breadCrumbDist)cX=c_;local d0=ship.nearestPlanet:convertToMapPosition(cX)system.setWaypoint(d0,false)end;self.elevatorDestination=self.world.position-cX:normalize()cK=cK-self.elevatorDestination*self.mass*utils.clamp(ak*3.6,0.3,math.abs(cV)/3.6*self.IDIntensity)if ak<0.01 and not manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true elseif ak<2 and self.world.velocity:len()==0 and not manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true else self.dockingClamps=false end else self.destination=vec3(0,0,0)end;if self.inertialDampening then local d1=self.localVelocity;local d2=vec3(0,0,0)local d3=self.direction or vec3(0,0,0)if d3.x==0 then d2.x=d1.x end;if d3.y==0 then d2.y=d1.y end;if d3.z==0 then d2.z=d1.z end;d2=self.localToRelative(d2,self.world.up,self.world.right,self.world.forward)cK=cK-d2*self.mass*self.IDIntensity end;if self.brake then local d4=self.world.velocity:len()cK=-self.world.velocity*self.mass*math.max(self.brakingFactor*math.max(1,d4*0.5),d4*d4)end;if self.targetVector~=nil then local d5=vec3(self.world.forward.x,self.world.forward.y,self.world.forward.z)if type(self.targetVector)==\"function\"then d5=self.targetVector()elseif type(self.targetVector)==\"table\"then d5=self.targetVector end;cL=cL+self.world.forward:cross(d5)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end;if self.targetVectorVertical~=nil then local d5=vec3(self.world.up.x,self.world.up.y,self.world.up.z)if type(self.targetVector)==\"function\"then d5=self.targetVector()elseif type(self.targetVector)==\"table\"then d5=self.targetVector end;if self.world.up-self.targetVectorVertical:len()<0 then cL=cL+-self.world.up:cross(d5)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)else cL=cL+self.world.up:cross(d5)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end end;if self.counterGravity then cK=cK-self.world.gravity*self.mass end;if self.verticalLock then local d6=self.world.position+self.world.up-self.lockPos;local d7=self.lockVector*self.lockVector:dot(d6)local d8=d7-d6;local d9=d8*self.mass*0.3;cK=cK+d9*self.mass end;cL=cL-(self.AngularVelocity*2-self.AngularAirFriction*2)cK=cK/self.mass;if self.controlMode~=unit.getControlMode()then self.controlMode=unit.getControlMode()if unit.getControlMode()==0 then self.alternateCM=false end;if unit.getControlMode()==1 then self.alternateCM=true end end;self.control.setEngineCommand(\"atmospheric_engine,space_engine,airfoil,brake,torque,vertical,lateral,longitudinal\",{cK:unpack()},{cL:unpack()},false,false,self.priorityTags1,self.priorityTags2,self.priorityTags3)cL=vec3(0,0,0)cK=vec3(0,0,0)self.elevatorDestination=vec3(0,0,0)c0=system.getArkTime()end;return self end;ship=STEC(core,unit)json=require('dkjson')quat=require('cpml/quat')vec3=require('cpml/vec3')const=require('cpml/constants')vec2=require('cpml/vec2')utils=require('cpml/utils')mat4=require(\"cpml/mat4\")mouseDeltaSum=vec2(0,0)local function a(b)if b>0 then return 1 elseif b<0 then return-1 else return 0 end end;function scaleViewBoundsY(c)local aT=0;local aU=1250/mouseSensitivity;local aV=-(system.getScreenHeight()/2)local aO=system.getScreenHeight()/2;return(c-aT)/(aU-aT)*(aO-aV)+aV end;function scaleViewBoundsX(aW)local aT=1;local aU=-1;if a(forwardX.x)==-1 and a(forwardX.y)==-1 then aT=-1;aU=1 elseif a(forwardX.x)==1 and a(forwardX.y)==-1 then aT=-1;aU=1 end;local aV=-(system.getScreenHeight()/2)local aO=system.getScreenHeight()/2;return(aW-aT)/(aU-aT)*(aO-aV)+aV end;function scaleViewBound(aT,aU,aV,aO,A)return(A-aT)/(aU-aT)*(aO-aV)+aV end;function deltaSum(aX,B)local aY=0;local m=0;if aX.y+B.y<=0 then m=0 elseif aX.y+B.y>=1250/mouseSensitivity then m=1250/mouseSensitivity else m=aX.y+B.y end;return vec2(aY,m)end;function updateAR()local e=vec2(system.getMouseDeltaX(),system.getMouseDeltaY())mouseDeltaSum=deltaSum(mouseDeltaSum,e)playerQ=quat(unit.getMasterPlayerRelativeOrientation())forwardX=playerQ*vec3(core.getConstructOrientationForward())ship.viewY=scaleViewBoundsY(mouseDeltaSum.y)ship.viewX=scaleViewBoundsX(forwardX.x)end;vec2=require('cpml/vec2')mat4=require(\"cpml/mat4\")local json=require(\"dkjson\")local da=string.format;if next(manualSwitches)~=nil then for G,db in ipairs(manualSwitches)do system.print(\"Deactivate!\")db.deactivate()end end;function SpeedConvert(C)if not C or C==0 then return{0,\"00\",\"km/h\"}end;if C>5000 then local dc=tonumber(tostring(round2(C/55.55,2)):match(\"%.(%d+)\"))local dd=string.format(\"%02d\",dc)return{round2(C/55.55),dd,\"su/h\"}end;local dc=tonumber(tostring(round2(C/3.6,2)):match(\"%.(%d+)\"))local dd=string.format(\"%02d\",dc)return{round2(C*3.6),dd,\"km/h\"}end;function CruiseControl(C)local de=0;if ship.cruiseSpeed<500 then de=C*10 elseif ship.cruiseSpeed>=500 and ship.cruiseSpeed<=1999 then de=C*50 elseif ship.cruiseSpeed>=2000 and ship.cruiseSpeed<=9999 then de=C*100 elseif ship.cruiseSpeed>=10000 then de=C*1000 end;ship.cruiseSpeed=utils.clamp(ship.cruiseSpeed+de,-29990,29990)end;function getControlMode()if ship.alternateCM then return\"Cruise\"end;return\"Travel\"end;altHoldAdjustment=0.1;altAdjustment=3;function altHoldAdjustmentSetting()return altHoldAdjustment*10^altAdjustment end;function setAltHoldAdjustment()end;function SHUDMenuItem(df,dg,dh)local self={}self.Enabled=true;self.Active=false;self.Content=df;self.Class=\"\"self.Action=dg or function(system,unit,self)end;self.Update=dh or function(system,unit,self)end;function self.Disable()self.Enabled=false;return self end;function self.Enable()self.True=false;return self end;function self.Lock()SHUD.ScrollLock=true;self.Active=true;self.Class=\"locked\"return self end;function self.Unlock()SHUD.ScrollLock=false;self.Active=false;self.Class=\"\"return self end;return self end;SHUD=function()local self={}self.Enabled=false;self.FreezeUpdate=false;self.IntroPassed=false;self.FOV=system.getCameraHorizontalFov()self.ScreenW=system.getScreenWidth()self.ScreenH=system.getScreenHeight()self.Resolution=vec2(self.ScreenW,self.ScreenH)self.SvgMinX=-round(self.ScreenW/4/2,0)self.SvgMinY=-round(self.ScreenH/4/2,0)self.SvgWidth=round(self.ScreenW/4,0)self.SvgHeight=round(self.ScreenH/4,0)function scaleViewBounds(di)local dj=-0.5;local dk=0.5;local dl=-90;local dm=90;return-((di-dj)/(dk-dj)*(dm-dl)+dl)end;shipPitch=scaleViewBounds(ship.pitchRatio)self.SHUDFuelHtml=\"\"self.Markers={}self.MarkerBuffer={}function self.worldToScreen(dn)local bw=mat4():perspective(self.FOV,self.ScreenW/self.ScreenH,0.1,100000)local dp=ship.world.position-vec3(unit.getPlayerWorldPos())local dq=mat4():look_at(dp,dp+ship.world.forward,ship.world.up)local cq=dq*bw*{dn.x,dn.y,dn.z,1}cq[1]=cq[1]/cq[4]*0.5+0.5;cq[2]=cq[2]/cq[4]*0.5+0.5;cq[1]=cq[1]*100;cq[2]=cq[2]*100;return vec3(cq[1],cq[2],cq[3])end;local dr=SHUDMenuItem;local ds=DynamicDocument;function self.UpdateMarkers()self.MarkerBuffer={}for A=1,#self.Markers do local m=self.Markers[A]local dt={}local Q=vec3(0,0,0)if type(m.Position)==\"function\"then dt.pos=m.Position()Q=m.Position()else dt.pos=m.Position;Q=m.Position end;dt.pos=self.worldToScreen(dt.pos)dt.class=m.Class;dt.content='&nbsp;'if m.Name then dt.content=[[<div class=\"name\">]]..m.Name..[[</div>]]end;if m.ShowDistance then dt.content=dt.content..[[<div class=\"distance\">]]..round2(ship.world.position-Q:len())..[[m</div>]]end;if dt.pos.z>0 then self.MarkerBuffer[#self.MarkerBuffer+1]=dt end end end;local function du(b3)return b3:gsub(\"%%\",\"%%%%\")end;function self.MakeBooleanIndicator(dv)local dw=[[<span class=\"right\">\n            <i dd-if=\"varName == true\">✓&nbsp;</i>\n            <i dd-if=\"varName == false\">✘&nbsp;</i>\n        </span>]]return dw:gsub(\"varName\",du(dv))end;function self.MakeSliderIndicator(dv,dx)dx=dx or\"\"local dw=[[<span class=\"right\">{{varName}}{{suffix}}<i>&udarr;&nbsp;</i></span>]]return dw:gsub(\"varName\",du(dv)):gsub(\"{{suffix}}\",du(dx))end;function self.GenerateMenuLink(dy,dz)return dr(dy..self.MenuIcon,function()self.SelectMenu(dz)end)end;self.MenuIcon=[[<span class=\"right\"><i>&gt;&nbsp;</i></span>]]self.BackButton=dr([[<i>&lt;&nbsp;</i>&nbsp;]]..\"Back\",function()SHUD.Menu=SHUD.MenuList.prev;SHUD.CurrentIndex=1 end)self.Menu={dr(ds([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\",\"%\")),function(G,G,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,G,b2)ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end),self.GenerateMenuLink(\"Stability Assist\",\"stability\"),self.GenerateMenuLink(\"Altitude Hold\",\"altHold\"),self.GenerateMenuLink(\"Ship Stats\",\"shipStats\"),dr([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon,function()self.SelectMenu(\"hotkeys\")end)}self.MenuList={}self.MenuList.flightMode={}self.MenuList.shipStats={dr(ds([[<span>Core ID:</span><span class=\"right\">{{ship.id}}</span>]])).Disable(),dr(ds([[<span>Mass:</span><span class=\"right\">{{round2(ship.mass/1000,2)}} Ton</span>]])).Disable(),dr(ds([[<span>FMax:</span><span class=\"right\">{{round2(ship.fMax/1000,2)}} KN</span>]])).Disable(),dr(ds([[<span>Pos X:</span><span class=\"right\">{{round2(ship.world.position.x)}}</span>]])).Disable(),dr(ds([[<span>Pos Y:</span><span class=\"right\">{{round2(ship.world.position.y)}}</span>]])).Disable(),dr(ds([[<span>Pos Z:</span><span class=\"right\">{{round2(ship.world.position.z)}}</span>]])).Disable()}self.MenuList.stability={dr(ds(\"<span>Gravity Suppression<span>\"..self.MakeBooleanIndicator(\"ship.counterGravity\")),function()ship.counterGravity=not ship.counterGravity end),dr(ds(\"<span>Gravity Follow</span>\"..self.MakeBooleanIndicator(\"ship.followGravity\")),function()ship.followGravity=not ship.followGravity end),dr(ds(\"<span>Inertial Dampening<span>\"..self.MakeBooleanIndicator(\"ship.inertialDampening\")),function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end),dr(ds([[<span>Hover Height<span>]]..self.MakeSliderIndicator(\"ship.hoverHeight\",\"m\")),function(G,G,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,G,b2)ship.hoverHeight=utils.clamp(ship.hoverHeight+system.getMouseWheel(),0,35)end)}function self.updateTargetDest()ship.targetDestination=moveWaypointZ(ship.baseLoc,utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)-ship.baseAltitude)ship.altitudeHold=utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)end;self.MenuList.altHold={dr(ds(\"<span>Altitude Hold<span>\"..self.MakeBooleanIndicator(\"ship.elevatorActive\")),function()ship.elevatorActive=not ship.elevatorActive end),dr(ds([[<span>Multiplier<span>]]..self.MakeSliderIndicator(\"round2(altHoldAdjustmentSetting(),3)\",\"\")),function(G,G,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,G,b2)altAdjustment=utils.clamp(altAdjustment+system.getMouseWheel(),-1,4)end),dr(ds([[<span>Alt Setpoint<span>]]..self.MakeSliderIndicator(\"round2(ship.altitudeHold,3)\",\"m\")),function(G,G,b2)if b2.Active then b2.Unlock()else b2.Lock()end end,function(system,G,b2)self.updateTargetDest()end),dr(ds([[<span>Preset 1:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset1)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset1;ship.elevatorActive=true end),dr(ds([[<span>Preset 2:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset2)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset2;ship.elevatorActive=true end),dr(ds([[<span>Preset 3:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset3)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset3;ship.elevatorActive=true end),dr(ds([[<span>Preset 4:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset4)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset4;ship.elevatorActive=true end),dr(ds([[<span>Altitude:</span><span class=\"right\">{{round2(ship.altitude,4)}}</span>]])).Disable()}self.MenuList.hotkeys={}local dA=\"<style>\"..CSS_SHUD..\"</style>\"self.fuel=nil;function getFuelRenderedHtml()local dB=\"\"local dC=\"\"local dD=\"\"self.fuel=getFuelSituation()local dE=\"\"local dF=function(type,c8)local dG=100*c8.level;local dH=c8.level*c8.specs.capacity()return'<div class=\"fuel-meter fuel-type-'..type..'\"><hr class=\"fuel-level\" style=\"width:'..dG..'%%;\" />'..c8.time..' ('..math.floor(dG)..'%%, '..math.floor(dH)..'L)</div>'end;for G,c8 in pairs(self.fuel.atmo)do dE=dE..dF(\"atmo\",c8)end;for G,c8 in pairs(self.fuel.space)do dE=dE..dF(\"space\",c8)end;for G,c8 in pairs(self.fuel.rocket)do dE=dE..dF(\"rocket\",c8)end;self.SHUDFuelHtml=dE end;opacity=1.0;local dI=ds(dA..[[\n    <div id=\"horizon\" style=\"opacity: {{opacity}};\">\n        <svg dd-if=\"enableARReticle\" class=\"shadow\" height=\"100%\" width=\"100%\" viewBox=\"{{SHUD.SvgMinX}} {{SHUD.SvgMinY}} {{SHUD.SvgWidth}} {{SHUD.SvgHeight}}\">\n            <g transform=\"translate({{ship.viewX}},{{ -ship.viewY }}) scale(0.7)\">\n                <line class=\"st0\" x1=\"-0.5\" y1=\"-91.5\" x2=\"-0.5\" y2=\"-11.5\"/>\n                <line class=\"st0\" x1=\"116\" y1=\"-0.5\" x2=\"19\" y2=\"-0.5\"/>\n                <line class=\"st0\" x1=\"-0.5\" y1=\"10.25\" x2=\"-0.5\" y2=\"90.25\"/>\n                <line class=\"st0\" x1=\"-20\" y1=\"-0.5\" x2=\"-117\" y2=\"-0.5\"/>\n                <line class=\"st1\" x1=\"-0.5\" y1=\"-4\" x2=\"-0.5\" y2=\"3\"/>\n                <line class=\"st1\" x1=\"3\" y1=\"-0.5\" x2=\"-4\" y2=\"-0.5\"/>\n                <path class=\"st0\" d=\"M-10,16.34c-5.12-3.4-8.5-9.23-8.5-15.84c0-6.56,3.32-12.34,8.38-15.76\"/>\n                <path class=\"st0\" d=\"M10-15.96c5.68,3.29,9.5,9.43,9.5,16.46c0,7.03-3.82,13.17-9.5,16.46\"/>\n                <g transform=\"rotate({{ shipPitch }} 0,0)\">\n                    <path class=\"st0\" d=\"M-53.99-10.22c3.98-17.83,19.5-38.76,42.99-43.7\"/>\n                    <path class=\"st0\" d=\"M-11,51.99C-32.68,47.76-49.76,30.68-53.99,9\"/>\n                    <path class=\"st0\" d=\"M52.99,9C48.69,31.01,31.15,48.28,9,52.17\"/>\n                    <path class=\"st0\" d=\"M9-54.14c21.87,3.98,39.92,21.42,44.09,43.78\"/>\n                    <line class=\"st0\" x1=\"-53.5\" y1=\"-10.5\" x2=\"-94.5\" y2=\"-10.5\"/>\n                    <line class=\"st0\" x1=\"-54\" y1=\"9.5\" x2=\"-95\" y2=\"9.5\"/>\n                    <polyline class=\"st2\" points=\"53,9.5 84.49,9.5 94,9.5 84.5,13.5 84.5,9.5 \"/>\n                    <polyline class=\"st2\" points=\"53,-10.5 84.49,-10.5 94,-10.5 84.5,-14.5 84.5,-10.5 \"/>\n                </g dd-if=\"ship.world.nearPlanet\">\n            </g>\n        </svg>\n        <div id=\"speedometerBar\">&nbsp;</div>\n           <div id=\"speedometer\">\n               <span class=\"display\">\n               \t<span class=\"major\">{{SpeedConvert(ship.world.velocity:len())[1]}}</span>\n               \t<span class=\"minor\">{{SpeedConvert(ship.world.velocity:len())[2]}}</span>\n               \t<span class=\"unit\">{{SpeedConvert(ship.world.velocity:len())[3]}}</span>\n               </span>\n               <span class=\"accel\">\n               \t<span class=\"major\">{{round2(ship.world.acceleration:len(), 1)}}</span>\n               \t<span class=\"unit\">m/s</span>\n               </span>\n               <span class=\"vertical\">\n               \t{{round2(ship.world.velocity:dot(-ship.world.gravity:normalize()), 1)}}\n               </span>\n               <span class=\"alt\">\n               \t{{round2(ship.altitude)}}m\n               </span>\n\n               <span class=\"misc\">ATM {{round2(ship.world.atmosphericDensity, 2)}} | G {{round2(ship.world.gravity:len(), 2)}}m/s</span>\n               <span dd-if=\"not ship.alternateCM\" class=\"throttle\">Throttle {{round2(ship.throttle * 100)}}%</span>\n\t\t     <span dd-if=\"ship.alternateCM\" class=\"throttle\">Cruise {{round2(ship.cruiseSpeed)}} km/h</span>\n            </div>\n\n            <div id=\"horizon-menu\">\n                {{_SHUDBUFFER}}\n            </div>\n\n            </div>\n            <div id=\"fuelTanks\">{{ SHUD.SHUDFuelHtml }}</div>\n    </div>\n    ]])local dJ=[[<div class=\"item {{class}}\">{{content}}</div>]]function self.SelectMenu(dK)if not SHUD.MenuList[dK]then error(\"[SHUD] Undefined menu: \"..dK)end;SHUD.MenuList.prev=SHUD.Menu;SHUD.Menu=SHUD.MenuList[dK]SHUD.CurrentIndex=1;if SHUD.Menu[#SHUD.Menu]~=SHUD.BackButton then table.insert(SHUD.Menu,SHUD.BackButton)end end;function self.Select()if not self.Enabled then return end;if#self.Menu<1 then return end;self.Menu[self.CurrentIndex].Action(self.system,self.unit,self.Menu[self.CurrentIndex])end;function self.Render()local dL=\"\"if self.Enabled then for A=1,#self.Menu do local dM=self.Menu[A]if dM.Active then dM.Update(self.system,self.unit,dM)end;local dN=dJ;local dO=\"\"local df=dM.Content;if df.Read then df=df.Read()end;df=du(df)if self.CurrentIndex==A then dO=\"active\"end;if not dM.Enabled then dO=dO..\" disabled\"end;dN=dN:gsub(\"{{class}}\",dO..\" \"..dM.Class)dN=dN:gsub(\"{{content}}\",df)dL=dL..dN end;_ENV[\"_SHUDBUFFER\"]=du(dL)else ship.frozen=player.isFrozen()_ENV[\"_SHUDBUFFER\"]=ds([[<div class=\"item helpText\">Press ]]..\"[\"..self.system.getActionKeyName(\"speedup\")..\"]\"..[[ to  toggle menu</div>\n                    <div class=\"item helpText\"><span>Character Movement:</span>]]..self.MakeBooleanIndicator(\"ship.frozen\")..[[</div>\n                    <div class=\"item helpText\"><span>Vertical Lock:</span>]]..self.MakeBooleanIndicator(\"ship.verticalLock\")..[[</div>\n                    <div class=\"item helpText\"><span>Inertial Dampening:</span>]]..self.MakeBooleanIndicator(\"ship.inertialDampening\")..[[</div>\n                    <div class=\"item helpText\"><span>Gravity Follow:</span>]]..self.MakeBooleanIndicator(\"ship.followGravity\")..[[</div>\n                    <div class=\"item helpText\"><span>Gravity Supression:</span>]]..self.MakeBooleanIndicator(\"ship.counterGravity\")..[[</div>\n                    ]]).Read()end;if not self.FreezeUpdate then self.system.setScreen(dI.Read())end end;function self.Update()if useGEAS then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)end;if player.isFrozen()or self.Enabled then opacity=1 else opacity=0.5 end;if not self.ScrollLock and self.Enabled then local dP=system.getMouseWheel()if dP~=0 then self.CurrentIndex=self.CurrentIndex-dP;if self.CurrentIndex>#self.Menu then self.CurrentIndex=1 elseif self.CurrentIndex<1 then self.CurrentIndex=#self.Menu end end elseif not self.Enabled then if player.isFrozen()and unit.isRemoteControlled()then ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end;self.UpdateMarkers()end end;function self.Init(system,unit,dQ)self.system=system;self.unit=unit;self.CurrentIndex=1;self.ScrollLock=false;system.showScreen(true)unit.hideWidget()local F=dQ.GetNamedKeybinds()self.MenuList.hotkeys={}for A=1,#F do local dR=F[A]table.insert(self.MenuList.hotkeys,dr([[<span>]]..dR.Name..[[</span><span class=\"right\">]]..self.system.getActionKeyName(dR.Key)..[[</span>]]).Disable())end;self.MenuList.flightMode={}for B,k in pairs(keybindPresets)do table.insert(self.MenuList.flightMode,dr(string.upper(B),function()self.Init(self.system,self.unit,k)keybindPreset=B;keybindPresets[keybindPreset].Init()end))end;dQ.Init()end;return self end()ship.hoverHeight=GEAS_Alt;ship.autoShutdown=autoShutdown;ship.altitudeHold=round2(ship.altitude,0)ship.inertialDampeningDesired=inertialDampening;ship.followGravity=followGravity;ship.minRotationSpeed=minRotationSpeed;ship.maxRotationSpeedz=maxRotationSpeed;ship.rotationStep=rotationStep;ship.verticalSpeedLimitAtmo=verticalSpeedLimitAtmo;ship.verticalSpeedLimitSpace=verticalSpeedLimitSpace;ship.approachSpeed=approachSpeed;ship.altHoldPreset1=altHoldPreset1;ship.altHoldPreset2=altHoldPreset2;ship.altHoldPreset3=altHoldPreset3;ship.altHoldPreset4=altHoldPreset4;ship.deviationThreshold=deviationThreshold;ship.pocket=pocket;ship.breadCrumbDist=breadCrumbDist;if construct.setDockingMode(dockingMode)then system.print(\"Docking mode set successfully\")else system.print(\"Invalid docking mode\")end;local dS=false;if flightModeDb~=nil then if flightModeDb.hasKey(\"verticalSpeedLimitAtmo\")==0 or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitAtmo\",verticalSpeedLimitAtmo)ship.verticalSpeedLimitAtmo=verticalSpeedLimitAtmo else ship.verticalSpeedLimitAtmo=flightModeDb.getFloatValue(\"verticalSpeedLimitAtmo\")end;if flightModeDb.hasKey(\"verticalSpeedLimitSpace\")==0 or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitSpace\",verticalSpeedLimitSpace)ship.verticalSpeedLimitSpace=verticalSpeedLimitSpace else ship.verticalSpeedLimitSpace=flightModeDb.getFloatValue(\"verticalSpeedLimitSpace\")end;if flightModeDb.hasKey(\"approachSpeed\")==0 or updateSettings then flightModeDb.setFloatValue(\"approachSpeed\",approachSpeed)ship.approachSpeed=approachSpeed else ship.approachSpeed=flightModeDb.getFloatValue(\"approachSpeed\")end;if flightModeDb.hasKey(\"altHoldPreset1\")==0 or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset1\",altHoldPreset1)ship.altHoldPreset1=altHoldPreset1 else ship.altHoldPreset1=flightModeDb.getFloatValue(\"altHoldPreset1\")end;if flightModeDb.hasKey(\"altHoldPreset2\")==0 or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset2\",altHoldPreset2)ship.altHoldPreset2=altHoldPreset2 else ship.altHoldPreset2=flightModeDb.getFloatValue(\"altHoldPreset2\")end;if flightModeDb.hasKey(\"altHoldPreset3\")==0 or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset3\",altHoldPreset3)ship.altHoldPreset3=altHoldPreset3 else ship.altHoldPreset3=flightModeDb.getFloatValue(\"altHoldPreset3\")end;if flightModeDb.hasKey(\"altHoldPreset4\")==0 or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset4\",altHoldPreset4)ship.altHoldPreset4=altHoldPreset4 else ship.altHoldPreset4=flightModeDb.getFloatValue(\"altHoldPreset4\")end;function writeTargetToDb(dT,dU)if flightModeDb~=nil then flightModeDb.setFloatValue(dU..\"X\",dT.x)flightModeDb.setFloatValue(dU..\"Y\",dT.y)flightModeDb.setFloatValue(dU..\"Z\",dT.z)if settingsActive then settingsActive=false end;system.print(\"Target Lock: \"..tostring(dT))end end;function readTargetFromDb(dU)if flightModeDb~=nil then local k=vec3(0,0,0)k.x=flightModeDb.getFloatValue(dU..\"X\")k.y=flightModeDb.getFloatValue(dU..\"Y\")k.z=flightModeDb.getFloatValue(dU..\"Z\")system.print(\"Target Lock: \"..tostring(k))return k end end end;function gearToggle()if unit.isAnyLandingGearExtended()==1 then unit.retractLandingGears()else unit.extendLandingGears()end end;function scaleViewBound(dj,dk,dl,dm,di)return(di-dj)/(dk-dj)*(dm-dl)+dl end;function switchFlightMode(dV)SHUD.Init(system,unit,keybindPresets[dV])keybindPreset=dV;if flightModeDb then flightModeDb.setStringValue(\"flightMode\",dV)end end;function switchControlMode()if ship.alternateCM==false then ship.alternateCM=true else ship.alternateCM=false end end;function swapForceFields()if manualSwitches~=nil then if player.isFrozen()then manualSwitches[1].activate()for G,db in ipairs(forceFields)do db.retract()end else manualSwitches[1].deactivate()for G,db in ipairs(forceFields)do db.deploy()end end end end;ship.baseAltitude=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)system.print(\"Altitude: \"..ship.baseAltitude)if flightModeDb~=nil then if flightModeDb.hasKey(\"BaseLocX\")==1 then ship.baseLoc=readTargetFromDb(\"BaseLoc\")else ship.baseLoc=ship.world.position;system.print(\"No RTB set\")config.setBaseActive=true end;if flightModeDb.hasKey(\"BaseRotX\")==1 then ship.rot=readTargetFromDb(\"BaseRot\")else ship.rot=ship.world.forward;config.setBaseActive=true end end;config.rtb=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)function setBase(a)if a==nil then ship.baseLoc=ship.world.position;ship.rot=ship.world.right:cross(ship.nearestPlanet:getGravity(construct.getWorldPosition()))writeTargetToDb(ship.baseLoc,\"BaseLoc\")writeTargetToDb(ship.rot,\"BaseRot\")system.print(\"Base Position: \"..tostring(ship.nearestPlanet:convertToMapPosition(ship.baseLoc)))else if string.find(a,\"::pos\")~=nil then ship.baseLoc=ship.nearestPlanet:convertToWorldCoordinates(a)writeTargetToDb(ship.baseLoc,\"BaseLoc\")writeTargetToDb(ship.rot,\"BaseRot\")system.print(\"Base Position: \"..tostring(ship.nearestPlanet:convertToMapPosition(ship.baseLoc)))end end;config.rtb=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ioScheduler.queueData(config)end;local dW=DUTTY;dW.onCommand('setbase',function(a)setBase(a)end)keybindPresets[\"keyboard\"]=KeybindController()keybindPresets[\"keyboard\"].Init=function()keybindPreset=\"keyboard\"ship.ignoreVerticalThrottle=true;ship.throttle=1 end;keybindPresets[\"keyboard\"].keyDown.up.Add(function()ship.direction.z=1;if not ship.counterGravity then ship.counterGravity=true end end)keybindPresets[\"keyboard\"].keyUp.up.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.down.Add(function()ship.direction.z=-1 end)keybindPresets[\"keyboard\"].keyUp.down.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.yawleft.Add(function()ship.rotation.z=-1 end)keybindPresets[\"keyboard\"].keyUp.yawleft.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.yawright.Add(function()ship.rotation.z=1 end)keybindPresets[\"keyboard\"].keyUp.yawright.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.forward.Add(function()ship.direction.y=1 end)keybindPresets[\"keyboard\"].keyUp.forward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.left.Add(function()ship.direction.x=-1 end)keybindPresets[\"keyboard\"].keyUp.left.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.right.Add(function()ship.direction.x=1 end)keybindPresets[\"keyboard\"].keyUp.right.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.lshift.Add(function()dS=true end,\"Shift Modifier\")keybindPresets[\"keyboard\"].keyUp.lshift.Add(function()dS=false end)keybindPresets[\"keyboard\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"keyboard\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"keyboard\"].keyUp.stopengines.Add(function()SHUD.Select()if not SHUD.Enabled then if ship.direction.y==1 then ship.direction.y=0 else ship.direction.y=1 end end end,\"Cruise\")keybindPresets[\"keyboard\"].keyUp.gear.Add(function()useGEAS=not useGEAS;updateGEAS()end)keybindPresets[\"keyboard\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"keyboard\"].keyUp[\"option1\"].Add(function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end,\"Inertial Dampening\")keybindPresets[\"keyboard\"].keyUp[\"option2\"].Add(function()player.freeze(not player.isFrozen())swapForceFields()end,\"Freeze character\")keybindPresets[\"keyboard\"].keyUp[\"option3\"].Add(function()ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"keyboard\"].keyUp[\"option4\"].Add(function()ship.counterGravity=not ship.counterGravity end,\"Counter Gravity\")keybindPresets[\"keyboard\"].keyUp[\"option5\"].Add(function()ship.verticalLock=true;ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())if flightModeDb~=nil then flightModeDb.setFloatValue(\"lockVectorX\",ship.lockVector.x)flightModeDb.setFloatValue(\"lockVectorY\",ship.lockVector.y)flightModeDb.setFloatValue(\"lockVectorZ\",ship.lockVector.z)flightModeDb.setFloatValue(\"lockPosX\",ship.lockPos.x)flightModeDb.setFloatValue(\"lockPosY\",ship.lockPos.y)flightModeDb.setFloatValue(\"lockPosZ\",ship.lockPos.z)end end,\"Set Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option6\"].Add(function()ship.verticalLock=not ship.verticalLock end,\"Toggle Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option7\"].Add(function()ship.altitudeHold=ship.baseAltitude;ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.baseLoc,0)end,\"RTB\")keybindPresets[\"keyboard\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(0)construct.undock()end,\"Undock\")keybindPresets[\"keyboard\"].keyUp[\"option9\"].Add(function()if dS then flightModeDb.clear()system.print(\"DB Cleared\")else ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end end,\"Manual Mode Toggle\")keybindPresets[\"screenui\"]=KeybindController()keybindPresets[\"screenui\"].Init=function()keybindPreset=\"screenui\"ship.ignoreVerticalThrottle=true;ship.throttle=1;player.freeze(true)ship.frozen=false end;keybindPresets[\"screenui\"].keyDown.lshift.Add(function()dS=true end,\"Shift Modifier\")keybindPresets[\"screenui\"].keyUp.lshift.Add(function()dS=false end)keybindPresets[\"screenui\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"screenui\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"screenui\"].keyUp[\"option7\"].Add(function()ship.altitudeHold=ship.baseAltitude;ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.baseLoc,0)end,\"RTB\")keybindPresets[\"screenui\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(0)construct.undock()end,\"Undock\")keybindPresets[\"screenui\"].keyUp[\"option9\"].Add(function()if dS then flightModeDb.clear()system.print(\"DB Cleared\")else ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()end end,\"Manual Mode Toggle\")if flightModeDb then if flightModeDb.hasKey(\"flightMode\")==0 then flightModeDb.setStringValue(\"flightMode\",\"keyboard\")end;keybindPreset=flightModeDb.getStringValue(\"flightMode\")else system.print(\"No databank installed.\")keybindPreset=\"keyboard\"end;keybindPreset=\"keyboard\"SHUD.Init(system,unit,keybindPresets[keybindPreset])Task(function()coroutine.yield()SHUD.FreezeUpdate=true;local dX=system.getArkTime()+2;while system.getArkTime()<dX do coroutine.yield()end;SHUD.FreezeUpdate=false;SHUD.IntroPassed=true end)player.freeze(true)ship.frozen=false;function updateGEAS()if useGEAS then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)else unit.deactivateGroundEngineAltitudeStabilization()end end;updateGEAS()controlStateChange=true;function normalizeTravelMode()if ship.controlMode==1 and controlStateChange then ship.cruiseSpeed=round(ship.world.velocity:len()*3.6,-1)ship.throttle=0;controlStateChange=false end;if ship.controlMode==0 then controlStateChange=true end end;function autoLandingGear()if ship.world.velocity:len()>=83.3333 then unit.retractLandingGears()else unit.extendLandingGears()end end;config.floors.floor1=ship.altHoldPreset1;config.floors.floor2=ship.altHoldPreset2;config.floors.floor3=ship.altHoldPreset3;config.floors.floor4=ship.altHoldPreset4;elevatorName=construct.getName()config.rtb=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)config.targetAlt=0;system.print(\"Preset 1: \"..config.floors.floor1)system.print(\"Preset 2: \"..config.floors.floor2)system.print(\"Preset 3: \"..config.floors.floor3)system.print(\"Preset 4: \"..config.floors.floor4)ioScheduler.defaultData=stats;ioScheduler.queueData(config)ioScheduler.queueData(fuelAtmo)ioScheduler.queueData(fuelSpace)ElevatorScreen=function()local self={}function self.updateStats()stats.data.elevation=ship.altitude;stats.data.target=config.targetAlt;stats.data.velocity=ship.world.velocity:len()stats.data.mass=ship.mass;stats.data.gravity=ship.world.gravity:len()stats.data.target_dist=math.abs(ship.altitude-ship.altitudeHold)stats.data.brake_dist=ship.brakeDistance;stats.data.deviation=ship.deviation;stats.data.deviationVec=ship.worldToLocal(ship.deviationVec)stats.data.deviationRot=ship.worldToLocal(ship.deviationRot)stats.data.state=ship.stateMessage end;self.updateStats()function self.updateScreenFuel()fuelAtmo.tanks={}fuelSpace.tanks={}for G,c8 in pairs(SHUD.fuel.atmo)do table.insert(fuelAtmo.tanks,fuelTank(c8.time,math.ceil(100*c8.level)))end;for G,c8 in pairs(SHUD.fuel.space)do table.insert(fuelSpace.tanks,fuelTank(c8.time,math.ceil(100*c8.level)))end;ioScheduler.queueData(fuelAtmo)ioScheduler.queueData(fuelSpace)end;if screen then screen.clearScriptOutput()end;return self end()_G.BuildUnit={}local dY=_G.BuildUnit;_G.BuildSystem={}local dZ=_G.BuildSystem;_G.BuildScreen={}local d_=_G.BuildScreen;local e0=nil;function dY.onStart()Events.Flush.Add(ship.apply)Events.Update.Add(SHUD.Update)getFuelRenderedHtml()system.print(\"Screen: \"..tostring(screen))if screen~=nil then manualControlSwitch()system.print(\"Altitude: \"..helios:closestBody(construct.getWorldPosition()):getAltitude(construct.getWorldPosition()))ship.altitudeHold=helios:closestBody(ship.baseLoc):getAltitude(construct.getWorldPosition())ship.baseAltitude=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)end;if screen==nil then ship.verticalLock=false;ship.intertialDampening=true;ship.elevatorActive=false;config.manualControl=not config.manualControl;manualControlSwitch()else e0=ElevatorScreen end;if system.showHelper then system.showHelper(false)end;system.print(\"ElevatorScreen: \"..tostring(e0))local e1=\"\"local e2=construct.getTotalMass()if emitter~=nil then system.print(\"Emitter Range: \"..emitter.getRange())end;if activateFFonStart then if next(manualSwitches)~=nil then for G,db in ipairs(manualSwitches)do db.activate()end end end;shipName=construct.getName()system.print(player.getId())unit.setTimer(\"SHUDRender\",0.02)unit.setTimer(\"FuelStatus\",3)unit.setTimer(\"DockingTrigger\",1)if laser~=nil then laser.deactivate()end;system.print([[Horizon 1.0.1.15]])if showDockingWidget then parentingPanelId=system.createWidgetPanel(\"Docking\")parentingWidgetId=system.createWidget(parentingPanelId,\"parenting\")system.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)end;if setBaseOnStart then setBase()end end;function dY.onStop()if next(manualSwitches)~=nil then for G,db in ipairs(manualSwitches)do db.deactivate()end end;config.shutDown=true;if screen then screen.setScriptInput(serialize(config))end;system.showScreen(false)if laser~=nil then laser.deactivate()end;for G,db in ipairs(forceFields)do db.retract()end end;function manualControlSwitch()if not config.manualControl then SHUD.Init(system,unit,keybindPresets[\"screenui\"])system.showScreen(false)player.freeze(false)ship.frozen=true;ship.stateMessage=\"Idle\"else SHUD.Init(system,unit,keybindPresets[\"keyboard\"])system.showScreen(true)player.freeze(true)ship.frozen=false;ship.stateMessage=\"Manual Control\"end end;local e3=false;local e4=ship.dockingClamps;function dY.onTimer(e5)if e5==\"SHUDRender\"then if screen==nil then if SHUD then SHUD.Render()end elseif config.manualControl then if SHUD then SHUD.Render()end;if enableARReticle then updateAR()end else end end;if e5==\"FuelStatus\"then getFuelRenderedHtml()if e0 then e0.updateScreenFuel()end end;if e5==\"DockingTrigger\"then if telemeter~=nil then telDistance=telemeter.raycast().distance end;if ship.dockingClamps then if laser~=nil then laser.activate()end;if telemeter~=nil and telDistance>0 and telDistance<1 then if ship.autoShutdown and not config.manualControl then system.print(ship.altitude)unit.exit()end end end end;if e5==\"Debug\"then system.print(\"[--------------------------------]\")system.print(\"ship.altitude: \"..ship.altitude)system.print(\"ship.nearestPlanet: \"..tostring(ship.nearestPlanet.name[1]))system.print(\"[--------------------------------]\")end end;function dZ.onActionStart(dg)keybindPresets[keybindPreset].Call(dg,\"down\")end;function dZ.onActionStop(dg)keybindPresets[keybindPreset].Call(dg,\"up\")end;function dZ.onInputText(dg)if DUTTY then DUTTY.input(dg)end end;function dZ.onActionLoop(dg)end;function dZ.onUpdate()ioScheduler.update()if e0 then e0.updateStats()end;if Events then Events.Update()end;TaskManager.Update()end;function dZ.onFlush()if Events then Events.Flush()end end;function d_.mouseDown(b3,b4,e6)end;function toggleVerticalLock()ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())end;function createBreadcrumbTrail(e7)local e8=moveWaypointZ(ship.baseLoc,ship.world.atlasAltitude-ship.baseAltitude)local e9=moveWaypointZ(ship.baseLoc,e7)local ak=e8-e7:len()if ak>1000 then for A=1,round2(ak/1000,0),1 do if ship.nearestPlanet:getAltitude(e8)<ship.nearestPlanet:getAltitude(e9)then table.insert(ship.breadCrumbs,moveWaypointZ(e8,1000*A))else table.insert(ship.breadCrumbs,moveWaypointZ(e8,-1000*A))end end end end;function d_.mouseUp(b3,b4,e6)end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "_G.BuildUnit.onStart()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "_G.BuildUnit.onStop()",
      "filter": {
        "args": [],
        "signature": "onStop",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "_G.BuildSystem.onActionStart(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStart(action)",
        "slotKey": "-2"
      },
      "key": "3"
    },
    {
      "code": "_G.BuildSystem.onActionStop(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStop(action)",
        "slotKey": "-2"
      },
      "key": "4"
    },
    {
      "code": "_G.BuildSystem.onInputText(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onInputText(action)",
        "slotKey": "-2"
      },
      "key": "5"
    },
    {
      "code": "_G.BuildSystem.onUpdate()",
      "filter": {
        "args": [],
        "signature": "onUpdate",
        "slotKey": "-2"
      },
      "key": "6"
    },
    {
      "code": "_G.BuildSystem.onFlush()",
      "filter": {
        "args": [],
        "signature": "onFlush",
        "slotKey": "-2"
      },
      "key": "7"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"SHUDRender\")",
      "filter": {
        "args": [
          {
            "variable": "SHUDRender"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "8"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"FuelStatus\")",
      "filter": {
        "args": [
          {
            "variable": "FuelStatus"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "9"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"DockingTrigger\")",
      "filter": {
        "args": [
          {
            "variable": "DockingTrigger"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "10"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"Debug\")",
      "filter": {
        "args": [
          {
            "variable": "Debug"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "11"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "0"
      },
      "key": "12"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "0"
      },
      "key": "13"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "0"
      },
      "key": "14"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "1"
      },
      "key": "15"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "1"
      },
      "key": "16"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "1"
      },
      "key": "17"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "2"
      },
      "key": "18"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "2"
      },
      "key": "19"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "2"
      },
      "key": "20"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "3"
      },
      "key": "21"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "3"
      },
      "key": "22"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "3"
      },
      "key": "23"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "4"
      },
      "key": "24"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "4"
      },
      "key": "25"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "4"
      },
      "key": "26"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "5"
      },
      "key": "27"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "5"
      },
      "key": "28"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "5"
      },
      "key": "29"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "6"
      },
      "key": "30"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "6"
      },
      "key": "31"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "6"
      },
      "key": "32"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "7"
      },
      "key": "33"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "7"
      },
      "key": "34"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "7"
      },
      "key": "35"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "8"
      },
      "key": "36"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "8"
      },
      "key": "37"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "8"
      },
      "key": "38"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "9"
      },
      "key": "39"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "9"
      },
      "key": "40"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "9"
      },
      "key": "41"
    }
  ],
  "methods": [],
  "events": []
}