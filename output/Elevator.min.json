{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "10": {
      "name": "slot11",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "11": {
      "name": "slot12",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "12": {
      "name": "slot13",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "13": {
      "name": "slot14",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "14": {
      "name": "slot15",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "15": {
      "name": "slot16",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "16": {
      "name": "slot17",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "17": {
      "name": "slot18",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "18": {
      "name": "slot19",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "19": {
      "name": "slot20",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "20": {
      "name": "slot21",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "core=nil;antigrav=nil;warpDrive=nil;radarUnitAtmo=nil;radarUnitSpace=nil;flightModeDb=nil;manualSwitches={}forceFields={}laser=nil;screen=nil;settingsActive=false;emitter=nil;telemeter=nil;function getElements()for a,var in pairs(_G)do if type(var)==\"table\"and var[\"getClass\"]then local b=var[\"getClass\"]()if b==\"CoreUnitDynamic\"or b==\"CoreUnitStatic\"or b==\"CoreUnitSpace\"then core=var end;if b==\"AtmoFuelContainer\"or b==\"SpaceFuelContainer\"then var.showWidget()end;if b==\"WarpDriveUnit\"then warpDrive=var;var.showWidget()end;if b==\"RadarPvPAtmospheric\"then radarUnitAtmo=var;radarUnitAtmo.showWidget()end;if b==\"RadarPvPSpace\"then radarUnitSpace=var;radarUnitSpace.showWidget()end;if b==\"DataBankUnit\"then flightModeDb=var end;if b==\"AntiGravityGeneratorUnit\"then antigrav=var end;if b==\"ManualSwitchUnit\"then table.insert(manualSwitches,var)end;if b==\"ForceFieldUnit\"then table.insert(forceFields,var)end;if b==\"ScreenUnit\"then screen=var end;if b==\"LaserEmitterUnit\"then laser=var end;if b==\"EmitterUnit\"then emitter=var end;if b==\"TelemeterUnit\"then telemeter=var end end end end;getElements()shipName=\"\"updateSettings=false;altHoldPreset1=150000;altHoldPreset2=1000;altHoldPreset3=100;altHoldPreset4=2;deviationThreshold=0.5;inertialDampening=true;followGravity=true;minRotationSpeed=0.01;maxRotationSpeed=5;rotationStep=0.025;verticalSpeedLimitAtmo=1100;verticalSpeedLimitSpace=4000;approachSpeed=200;autoShutdown=true;breadCrumbDist=1000;ContainerOptimization=0;FuelTankOptimization=0;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;primaryColor=\"b80000\"secondaryColor=\"e30000\"textShadow=\"e81313\"fuelFontSize=1.8;showDockingWidget=false;dockingMode=1;setBaseOnStart=false;useGEAS=false;GEAS_Alt=10;activateFFonStart=false;setactivateFFonStart=false;pocket=false;setpocket=false;mouseSensitivity=1;lockVerticalToBase=false;function PlanetRef()local function c(d)return type(d)=='number'end;local function e(d)return type(tonumber(d))=='number'end;local function f(t)return type(t)=='table'end;local function g(h)return type(h)=='string'end;local function i(j)return f(j)and c(j.x and j.y and j.z)end;local function k(l)return f(l)and c(l.latitude and l.longitude and l.altitude and l.bodyId and l.systemId)end;local m=math.pi/180;local n=180/math.pi;local o=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local q='::pos{'..p..','..p..','..p..','..p..','..p..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local clamp=utils.clamp;local function r(s,u)if s==0 then return math.abs(u)<1e-09 end;if u==0 then return math.abs(s)<1e-09 end;return math.abs(s-u)<math.max(math.abs(s),math.abs(u))*o end;local function v(d)local w=string.gsub(string.reverse(string.format('%.4f',d)),'^0*%.?','')return w==''and'0'or string.reverse(w)end;local function x(y)if i(y)then return string.format('{x=%.3f,y=%.3f,z=%.3f}',y.x,y.y,y.z)end;if f(y)and not getmetatable(y)then local z={}local A=next(y)if type(A)=='nil'or A==1 then for B,s in ipairs(y)do z[B]=x(s)end else for a,j in pairs(y)do local C=x(j)if type(a)=='number'then table.insert(z,string.format('[%s]=%s',a,C))else table.insert(z,string.format('%s=%s',a,C))end end end;return string.format('{%s}',table.concat(z,','))end;if g(y)then return string.format(\"[[%s]]\",y)end;return tostring(y)end;local D={}D.__index=D;D.__tostring=function(y,E)local F={}for a in pairs(y)do table.insert(F,a)end;table.sort(F)local z={}for G,a in ipairs(F)do local C=x(y[a])if type(a)=='number'then table.insert(z,string.format('[%s]=%s',a,C))else table.insert(z,string.format('%s=%s',a,C))end end;if E then return string.format('%s%s',E,table.concat(z,',\\n'..E))end;return string.format('{%s}',table.concat(z,','))end;D.__eq=function(H,I)return H.planetarySystemId==I.planetarySystemId and H.bodyId==I.bodyId and r(H.radius,I.radius)and r(H.center.x,I.center.x)and r(H.center.y,I.center.y)and r(H.center.z,I.center.z)and r(H.GM,I.GM)end;local function J(K,L,M,N,O)assert(e(K),'Argument 1 (planetarySystemId) must be a number:'..type(K))assert(e(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(e(M),'Argument 3 (radius) must be a number:'..type(M))assert(f(N),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(N))assert(e(O),'Argument 5 (GM) must be a number:'..type(O))return setmetatable({planetarySystemId=tonumber(K),bodyId=tonumber(L),radius=tonumber(M),center=vec3(N),GM=tonumber(O)},D)end;local P={}P.__index=P;P.__tostring=function(Q)return string.format('::pos{%d,%d,%s,%s,%s}',Q.systemId,Q.bodyId,v(Q.latitude*n),v(Q.longitude*n),v(Q.altitude))end;P.__eq=function(H,I)return H.bodyId==I.bodyId and H.systemId==I.systemId and r(H.latitude,I.latitude)and r(H.altitude,I.altitude)and(r(H.longitude,I.longitude)or r(H.latitude,math.pi/2)or r(H.latitude,-math.pi/2))end;local function R(S,L,T,U,V)local K=S;if g(S)and not U and not V and not L and not T then K,L,T,U,V=string.match(S,q)assert(K,'Argument 1 (position string) is malformed.')else assert(e(K),'Argument 1 (systemId) must be a number:'..type(K))assert(e(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(e(T),'Argument 3 (latitude) must be in degrees:'..type(T))assert(e(U),'Argument 4 (longitude) must be in degrees:'..type(U))assert(e(V),'Argument 5 (altitude) must be in meters:'..type(V))end;K=tonumber(K)L=tonumber(L)T=tonumber(T)U=tonumber(U)V=tonumber(V)if L==0 then return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=L,systemId=K},P)end;return setmetatable({latitude=m*clamp(T,-90,90),longitude=m*(U%360),altitude=V,bodyId=L,systemId=K},P)end;local W={}W.__index=W;W.__tostring=function(y,E)local X=E and E..'  'local Y={}local F={}for a in pairs(y)do table.insert(F,a)end;table.sort(F)for G,Z in ipairs(F)do bdy=y[Z]local _=D.__tostring(bdy,X)if E then table.insert(Y,string.format('[%s]={\\n%s\\n%s}',Z,_,E))else table.insert(Y,string.format('  [%s]=%s',Z,_))end end;if E then return string.format('\\n%s%s%s',E,table.concat(Y,',\\n'..E),E)end;return string.format('{\\n%s\\n}',table.concat(Y,',\\n'))end;local function a0(a1)local a2={}local a3;for G,j in pairs(a1)do local a4=j.planetarySystemId;if a4==nil then a4=0;j.planetarySystemId=a4 end;if type(a4)~='number'then error('Invalid planetary system ID: '..tostring(a4))elseif a3 and a4~=a3 then error('Mismatch planetary system IDs: '..a4 ..' and '..a3)end;local a5=j.bodyId;if a5==nil then a5=j.id;j.bodyId=a5 end;if type(a5)~='number'then error('Invalid body ID: '..tostring(a5))elseif a2[a5]then error('Duplicate body ID: '..tostring(a5))end;j.center=vec3(j.center)a2[a5]=setmetatable(j,D)a3=a4 end;return setmetatable(a2,W)end;PlanetaryReference={}local function a6(a7)return setmetatable({galaxyAtlas=a7 or{}},PlanetaryReference)end;PlanetaryReference.__index=function(t,B)if type(B)=='number'then local system=t.galaxyAtlas[B]return a0(system)end;return rawget(PlanetaryReference,B)end;PlanetaryReference.__pairs=function(y)return function(t,a)local a8,a9=next(t,a)return a8,a9 and a0(a9)end,y.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(y)local aa={}for G,ab in pairs(y or{})do local ac=ab:getPlanetarySystemId()local ad=W.__tostring(ab,'    ')table.insert(aa,string.format('  [%s]={%s\\n  }',ac,ad))end;return string.format('{\\n%s\\n}\\n',table.concat(aa,',\\n'))end;PlanetaryReference.BodyParameters=J;PlanetaryReference.MapPosition=R;PlanetaryReference.PlanetarySystem=a0;function PlanetaryReference.createBodyParameters(ae,L,af,ag,ah,ai,aj)assert(e(ae),'Argument 1 (planetarySystemId) must be a number:'..type(ae))assert(e(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(e(af),'Argument 3 (surfaceArea) must be a number:'..type(af))assert(f(ag),'Argument 4 (aPosition) must be an array or vec3:'..type(ag))assert(f(ah),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ah))assert(e(ai),'Argument 6 (altitude) must be in meters:'..type(ai))assert(e(aj),'Argument 7 (gravityAtPosition) must be number:'..type(aj))local M=math.sqrt(af/4/math.pi)local ak=M+ai;local al=vec3(ag)+ak*vec3(ah)local O=aj*ak*ak;return J(ae,L,M,al,O)end;PlanetaryReference.isMapPosition=k;function PlanetaryReference:getPlanetarySystem(S)if self.galaxyAtlas then local ae=S;if k(S)then ae=S.systemId end;if type(ae)=='number'then local system=self.galaxyAtlas[ae]if system then if getmetatable(system)~=W then system=a0(system)end;return system end end end;return nil end;function W:castIntersections(am,an,ao,ap)local ao=ao or function(aq)return 1.05*aq.radius end;local ar={}if ap then for G,B in ipairs(ap)do ar[B]=self[B]end else ap={}for a,aq in pairs(self)do table.insert(ap,a)ar[a]=aq end end;local function as(at,au)local av=ar[at].center-am;local aw=ar[au].center-am;return av:len()<aw:len()end;table.sort(ap,as)local ax=an:normalize()for B,a4 in ipairs(ap)do local aq=ar[a4]local ay=aq.center-am;local M=ao(aq)local az=ay:dot(ax)local aA=az^2-(ay:len2()-M^2)if aA>=0 then local aB=math.sqrt(aA)local aC=az+aB;local aD=az-aB;if aD>0 then return aq,aC,aD elseif aC>0 then return aq,aC,nil end end end;return nil,nil,nil end;function W:closestBody(aE)assert(type(aE)=='table','Invalid coordinates.')local aF,aq;local aG=vec3(aE)for G,aH in pairs(self)do local aI=aH.center-aG:len2()if not aq or aI<aF then aq=aH;aF=aI end end;return aq end;function W:convertToBodyIdAndWorldCoordinates(S)local aJ=S;if g(S)then aJ=R(S)end;if aJ.bodyId==0 then return 0,vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;local aH=self:getBodyParameters(aJ)if aH then return aJ.bodyId,aH:convertToWorldCoordinates(aJ)end end;function W:getBodyParameters(S)local L=S;if k(S)then L=S.bodyId end;assert(e(L),'Argument 1 (bodyId) must be a number:'..type(L))return self[L]end;function W:getPlanetarySystemId()local G,j=next(self)return j and j.planetarySystemId end;function W:netGravity(aE)assert(type(aE)=='table','Invalid coordinates.')local aK=vec3()local aG=vec3(aE)local aL,aq;for G,aH in pairs(self)do local aM=aH.center-aG;local aN=aM:len2()local aO=aH.GM/aN;if not aq or aO>aL then aq=aH;aL=aO end;aK=aK+aO/math.sqrt(aN)*aM end;return aq,aK end;function D:convertToMapPosition(N)assert(f(N),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(N))local aP=vec3(N)if self.bodyId==0 then return setmetatable({latitude=aP.x,longitude=aP.y,altitude=aP.z,bodyId=0,systemId=self.planetarySystemId},P)end;local aQ=aP-self.center;local ak=aQ:len()local V=ak-self.radius;local T=0;local U=0;if not r(ak,0)then local aR=math.atan(aQ.y,aQ.x)U=aR>=0 and aR or 2*math.pi+aR;T=math.pi/2-math.acos(aQ.z/ak)end;return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=self.bodyId,systemId=self.planetarySystemId},P)end;function D:convertToWorldCoordinates(S)local aJ=g(S)and R(S)or S;if aJ.bodyId==0 then return vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;assert(k(aJ),'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')assert(aJ.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(aJ.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local aS=math.cos(aJ.latitude)return self.center+(self.radius+aJ.altitude)*vec3(aS*math.cos(aJ.longitude),aS*math.sin(aJ.longitude),math.sin(aJ.latitude))end;function D:getAltitude(N)return vec3(N)-self.center:len()-self.radius end;function D:getDistance(N)return vec3(N)-self.center:len()end;function D:getGravity(N)local aM=self.center-vec3(N)local aN=aM:len2()return self.GM/aN*aM/math.sqrt(aN)end;return setmetatable(PlanetaryReference,{__call=function(G,...)return a6(...)end})end;function Kinematics()local s={}local u=30000000/3600;local aT=u*u;local aU=100;local function aV(aW)return 1/math.sqrt(1-aW*aW/aT)end;function s.computeAccelerationTime(aO,aX,B)local aY=u*math.asin(aO/u)return(u*math.asin(B/u)-aY)/aX end;function s.computeDistanceAndTime(aO,B,a,aZ,l,d)l=l or 0;d=d or 0;local a_=aV(aO)local Q=aO<=B;local b0=aZ*(Q and 1 or-1)/a;local b1=-d/a;local h=b0+b1;if Q and h<=0 or not Q and h>=0 then return-1,-1 end;local t,b2=0,0;if b0~=0 and l>0 then local aY=math.asin(aO/u)local j=math.pi*(b0/2+b1)local b3=b0*l;local b4=u*math.pi;local aW=function(b5)local b6=(j*b5-b3*math.sin(math.pi*b5/2/l)+b4*aY)/b4;local b7=math.tan(b6)return u*b7/math.sqrt(b7*b7+1)end;local b8=Q and function(b9)return b9>=B end or function(b9)return b9<=B end;b2=2*l;if b8(aW(b2))then local ba=0;while math.abs(b2-ba)>0.5 do local b5=(b2+ba)/2;if b8(aW(b5))then b2=b5 else ba=b5 end end end;local bb=aO;local bc=b2/aU;for bd=1,aU do local be=aW(bd*bc)t=t+(be+bb)*bc/2;bb=be end;if b2<2*l then return t,b2 end;aO=bb end;local aY=u*math.asin(aO/u)local bf=(u*math.asin(B/u)-aY)/h;local bg=aT*math.cos(aY/u)/h;local bh=bg-aT*math.cos((h*bf+aY)/u)/h;return bh+t,bf+b2 end;function s.computeTravelTime(aO,aX,bh)if bh==0 then return 0 end;if aX>0 then local aY=u*math.asin(aO/u)local bg=aT*math.cos(aY/u)/aX;return(u*math.acos(aX*(bg-bh)/aT)-aY)/aX end;assert(aO>0,'Acceleration and initial speed are both zero.')return bh/aO end;function s.lorentz(aW)return aV(aW)end;return s end;local bi=table.concat;local bj=string.format;local function bk(j,bl,t)local bm=type(j)local bn=bk;if bm=='table'then t[bl]='{'local bo=bl+1;if#j==0 then for a,aV in pairs(j)do if type(a)~='number'then t[bo]=a;t[bo+1]='='bo=bo+2 else t[bo]='['t[bo+1]=a;t[bo+2]=']='bo=bo+3 end;bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end else for a,aV in pairs(j)do bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end end;if bo==bl+1 then t[bo]='}'return bo+1 else t[bo-1]='}'return bo end elseif bm=='string'then t[bl]=bj(\"%q\",j)return bl+1 elseif bm=='number'then t[bl]=tostring(j)return bl+1 else t[bl]=j and'true'or'false'return bl+1 end end;function serialize(j)local t={}local bl=1;local bm=type(j)local bn=bk;if bm=='table'then t[bl]='{'bl=bl+1;local bo=bl;if#j==0 then for a,aV in pairs(j)do if type(a)~='number'then t[bo]=a;t[bo+1]='='bo=bo+2 else t[bo]='['t[bo+1]=a;t[bo+2]=']='bo=bo+3 end;bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end else for a,aV in pairs(j)do bo=bn(aV,bo,t)t[bo]=','bo=bo+1 end end;if bo==bl then t[bo]='}'else t[bo-1]='}'end elseif bm=='string'then t[bl]=bj(\"%q\",j)elseif bm=='number'then t[bl]=tostring(j)else t[bl]=j and'true'or'false'end;return bi(t)end;function deserialize(h)local aW=load('t='..h)aW()return t end;function tryDeserialize(h)local aW=load('t='..h)if aW then aW()return true,t else return false end end;function mToKm(d)if d>=10000 then return round2(d/1000,2)..\" km\"end;return round2(d,2)..\" m\"end;function round2(p,bp)if p~=nil then return tonumber(string.format(\"%.\"..(bp or 0)..\"f\",p))end end;config={dataType=\"config\",floors={floor1=0,floor2=0,floor3=0,floor4=0},elevatorName=construct.getName(),rtb=0,targetAlt=0,estop=false,settingsActive=false,setBaseActive=false,setBaseReq=false,manualControl=false,destination=nil,shutDown=false,updateReq=false}stats={dataType=\"stats\",data={elevation=0,target=config.targetAlt,velocity=0,mass=0,gravity=0,target_dist=0,brake_dist=0,deviation=0,deviationVec=vec3(),deviationRot=vec3(),state=\"Idle\"}}fuelAtmo={dataType=\"fuelAtmo\",tanks={}}fuelSpace={dataType=\"fuelSpace\",tanks={}}function fuelTank(bq,br)local bs={}bs.__index=bs;return setmetatable({tm=bq,pct=br},bs)end;function EventDelegate()local s={}s.Delegates={}function s.Add(u)if type(u)~=\"function\"then error(\"[EventDelegate] Unable to add callback - not a function\")return end;for aT=1,#s.Delegates do if s.Delegates[aT]==u then return false end end;table.insert(s.Delegates,u)return true end;function s.Remove(u)if type(u)~=\"function\"then error(\"[EventDelegate] Unable to remove callback - not a function\")return end;for aT=1,#s.Delegates do if s.Delegates[aT]==u then table.remove(s.Delegates,aT)return true end end;return false end;function s.Call(...)for aT=1,#s.Delegates do s.Delegates[aT](...)end end;function s.Count()return#s.Delegates end;setmetatable(s,{__call=function(aU,...)s.Call(...)end,__add=function(aV,aW)if aV==s then s.Add(aW)return s end;if aW==s then s.Add(aV)return s end;return s end,__sub=function(aV,aW)if aV==s then s.Remove(aW)return s end;if aW==s then s.Remove(aV)return s end;return s end,__tostring=function()return\"EventDelegate(#\"..#s.Delegates..\")\"end})return s end;Events={Update=EventDelegate(),Flush=EventDelegate()}TaskManager=function()local self={}self.Stack={}function self.Register(s)if not s.Coroutine then error(\"[TaskManager] Trying to register a non-Task\")end;table.insert(self.Stack,s)end;function self.Update()for u=1,#self.Stack do local s=self.Stack[u]if s and s.Coroutine~=nil then if coroutine.status(s.Coroutine)~=\"dead\"then local aT,aU=coroutine.resume(s.Coroutine)s.Error=not aT;s.LastReturn=aU else table.remove(self.Stack,u)if s.Error and s._Catch then s._Catch(s.LastReturn)elseif s._Then~=nil then s._Then(s.LastReturn)end;if s._Finally~=nil then s._Finally()end;s.Finished=true end end end end;return self end()function Task(aV)local self={}self.LastReturn=nil;self.Error=nil;self.Finished=false;if type(aV)~=\"function\"then error(\"[Task] Not a function.\")end;self.Coroutine=coroutine.create(aV)function self.Then(aV)if type(aV)~=\"function\"then error(\"[Task] Then callback not a function.\")end;self._Then=aV;return self end;function self.Finally(aV)if type(aV)~=\"function\"then error(\"[Task] Finally callback not a function.\")end;self._Finally=aV;return self end;function self.Catch(aV)if type(aV)~=\"function\"then error(\"[Task] Catch callback not a function.\")end;self._Catch=aV;return self end;TaskManager.Register(self)return self end;function await(s)if not s or not s.Coroutine then error(\"Trying to await non-task object\")end;while not s.Finished do coroutine.yield()end;return s.LastReturn end;function DynamicDocument(s)local self={}self.template=s or\"\"local u=\"\"local aT={}self.tree={}local aU={br=true,hr=true,img=true,embed=true,param=true,area=true,col=true,input=true,meta=true,link=true,base=true,basefont=true,iframe=true,isindex=true,circle=true,polygon=true,polyline=true,ellipse=true,path=true,line=true,rect=true,use=true}function table.indexOf(val,table)for aV,aW in ipairs(table)do if aW==val then return aV end end;return nil end;function self.makeFunc(string)local val=\"nil\"if aT[string]==nil then local aO,aX=pcall(load(\"return function() return \"..string..\" end\",nil,\"t\",_ENV))if aO then aT[string]=aX;val=aX()if type(val)==\"function\"then aT[string]=aX()val=val()end end else val=aT[string]()end;return val end;local function B(s)local aY=0;local a={}local aZ={}aZ.dd={}table.insert(a,aZ)local node={}for l,d,a_,Q,b0,b1,val,h in string.gmatch(s,\"(<)(%/?!?)([%w:_-'\\\\\\\"%[]+)(.-)(%/?%-?)>([%s\\r\\n\\t]*)([^<]*)([%s\\r\\n\\t]*)\")do a_=string.lower(a_)if d==\"/\"then if aY==0 then return aZ end;aY=aY-1;table.remove(a)else local function t(b2)local j=\"dd-\"return b2:sub(1,#j)==j end;aY=aY+1;node={}node.name=a_;node.children={}node.attr={}if a[aY-1]then node.parent=a[aY-1][#a[aY-1]]else node.parent=nil end;if Q~=\"\"then for b3,aW in string.gmatch(Q,\"%s([^%s=]+)=\\\"([^\\\"]+)\\\"\")do node.attr[b3]=string.gsub(aW,'\"','[^\\\\]\\\\\"')if t(b3)then if not aZ.dd[b3]then aZ.dd[b3]={}end;table.insert(aZ.dd[b3],node)end end;for b3,aW in string.gmatch(Q,\"%s([^%s=]+)='([^']+)'\")do node.attr[b3]=string.gsub(aW,'\"','[^\\\\]\\\\\"')if t(b3)then if not aZ.dd[b3]then aZ.dd[b3]={}end;table.insert(aZ.dd[b3],node)end end end;if not a[aY]then a[aY]={}end;table.insert(a[aY],node)if aU[a_]then if val~=\"\"then table.insert(a[aY],{name=\"textNode\",value=val})end;node.children={}aY=aY-1 else if val~=\"\"then table.insert(node.children,{name=\"textNode\",value=val})end;table.insert(a,node.children)end end end;return aZ end;local function b4(b5,b6)local a={b5}local b7=\"\"local function b8(b9)local ba=0;for bb in pairs(b9)do ba=ba+1 end;return ba end;if not b6 and b8(b5.dd)>0 then if b5.dd[\"dd-repeat\"]then for bc=#b5.dd[\"dd-repeat\"],1,-1 do local node=b5.dd[\"dd-repeat\"][bc]var,array=string.match(node.attr[\"dd-repeat\"],\"(.*) in (.*)\")node.attr[\"dd-repeat\"]=nil;local bd=b4({node},true)local be=string.gmatch(bd,\"{{([^}}]+)}}\")local bf={}for bg in be do if string.match(bg,var)then table.insert(bf,bg)end end;local u=\"\"local bh=self.makeFunc(array)for bc=1,#bh do _ENV[var]=bh[bc]local bt=bd;local bu=B(bt:gsub(\"^%s*(.-)%s*$\",\"%1\"))u=u..b4(bu)end;node.children={}node.name=\"textNode\"node.value=u end end;if b5.dd[\"dd-if\"]then for bc=#b5.dd[\"dd-if\"],1,-1 do local node=b5.dd[\"dd-if\"][bc]local bv=self.makeFunc(node.attr[\"dd-if\"])if bv then node.attr[\"dd-if\"]=nil else local bw=table.indexOf(node,node.parent.children)if bw then table.remove(node.parent.children,bw)end;node=nil;table.remove(b5.dd[\"dd-if\"],bc)b5.dd[\"dd-if\"][bc]=nil end end end;if b5.dd[\"dd-init\"]then for bc=#b5.dd[\"dd-init\"],1,-1 do local node=b5.dd[\"dd-init\"][bc]pcall(load(node.attr[\"dd-init\"],nil,\"t\",_ENV))node.attr[\"dd-init\"]=nil end end end;while#a~=0 do node=a[#a][1]if not node then break end;if node.name==\"textNode\"then local val=node.value:gsub(\"^%s*(.-)%s*$\",\"%1\")if not b6 then val=self.transformClosures(val)end;b7=b7 ..val else b7=b7 ..\"\\n\"..string.rep(\" \",#a-1)b7=b7 ..\"<\"..node.name;if node.attr then for bx,aW in pairs(node.attr)do if not b6 then bx=self.transformClosures(bx)aW=self.transformClosures(aW)end;b7=b7 ..\" \"..bx..'=\"'..aW..'\"'end end;if aU[node.name]then b7=b7 ..\"/>\"else b7=b7 ..\">\"end end;if node.children and#node.children>0 then table.insert(a,node.children)else table.remove(a[#a],1)if node.children and#node.children==0 and not aU[node.name]and not node.name==\"textNode\"then b7=b7 ..\"</\"..node.name..\">\"end;while#a>0 and#a[#a]==0 do table.remove(a)if#a>0 then if#a[#a][1].children>1 then b7=b7 ..\"\\n\"..string.rep(\" \",#a-1)..\"</\"..a[#a][1].name..\">\"else b7=b7 ..\"</\"..a[#a][1].name..\">\"end;table.remove(a[#a],1)end end end end;return b7:match\"^%s*(.-)%s*$\"end;function self.transformClosures(by)local bz={}local bA=string.gmatch(by,\"{{([^}}]+)}}\")for bc in bA do table.insert(bz,bc)end;if#bz>0 then for bc=1,#bz do local bB=bz[bc]val=self.makeFunc(bB)by=string.gsub(by,self.literalize(\"{{\"..bB..\"}}\"),tostring(val))end end;return by end;function self.literalize(b2)return b2:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\",function(bg)return\"%\"..bg end)end;function self.Read()return b4(B(self.template))end;return self end;DUTTY={}local s={}local u={}local function aT(aU,aV)return aU:sub(aV,aV)end;local function aW(aU)local aO={}local aX=false;local B=''local aY=false;for a=1,#aU do local aZ=aT(aU,a)if aY==false and aX and aZ==aX then table.insert(aO,B)aX=false;B=''elseif aY==false and#B==0 and(not aX and(aZ=='\"'or aZ==\"'\"))then aX=aZ elseif aY==false and aZ==' 'and aX==false then if#B>0 then table.insert(aO,B)B=''end elseif aY==false and aZ=='\\\\'then aY=true else if aY then aY=false end;B=B..aZ end end;if#B>0 then table.insert(aO,B)end;return aO end;function DUTTY.input(aU)for a,l in pairs(s)do if'function'==type(l)then l(aU)end end;local d=aW(aU)if#d>0 then local a_=''local Q={}for a,aU in pairs(d)do if a==1 then a_=aU:lower()else table.insert(Q,aU)end end;if u[a_]and'function'==type(u[a_])then u[a_](table.unpack(Q))end end end;function DUTTY.onInput(l)if not'function'==type(l)then error('Event handler must be of type function')end;table.insert(s,l)end;function DUTTY.onCommand(aO,l)if not'function'==type(l)then error('Event handler must be of type function')end;u[aO:lower()]=l end;fuelTanks={}FuelMass={}FuelTime={}fuelTypes={atmo={density=4.000},space={density=6.000},rocket={density=0.800}}local function bC(bD)if fuelTankHandlingAtmo>0 then return bD+bD*fuelTankHandlingAtmo*0.2 end;return bD end;local function bE(bD)if fuelTankHandlingSpace>0 then return bD+bD*fuelTankHandlingSpace*0.2 end;return bD end;local function bF(bG,type)local bH=bG*fuelTypes[type].density;local bI=bH;if ContainerOptimization>0 then bI=bH-bH*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bI=bI-bH*FuelTankOptimization*0.05 end;return bI end;function normalizeHp(type,bJ)local bK=0;if type==\"atmo\"then if bJ>=50 and bJ<163 then bK=50 elseif bJ>=163 and bJ<1315 then bK=163 elseif bJ>=1315 and bJ<10461 then bK=1315 elseif bJ>=10461 then bK=10461 end elseif type==\"space\"then if bJ>=50 and bJ<187 then bK=50 elseif bJ>=187 and bJ<1496 then bK=187 elseif bJ>=1496 and bJ<15933 then bK=1496 elseif bJ>=15933 then bK=15933 end elseif type==\"rocket\"then if bJ>=366 and bJ<736 then bK=366 elseif bJ>=736 and bJ<6231 then bK=736 elseif bJ>=6231 and bJ<68824 then bK=6231 elseif bJ>=68824 then bK=68824 end end;return bK end;function normalizeHpAtmo(bJ)end;function normalizeHpSpace(bJ)end;function normalizeHpRocket(bJ)end;fuelTankSpecsByMaxHP={atmo={_50={type=\"atmo\",size=\"XS\",capacity=function()return bC(100)end,baseWeight=35.030,maxWeight=function()return bF(bC(100),\"atmo\")end},_163={type=\"atmo\",size=\"S\",capacity=function()return bC(400)end,baseWeight=182.670,maxWeight=function()return bF(bC(400),\"atmo\")end},_1315={type=\"atmo\",size=\"M\",capacity=function()return bC(1600)end,baseWeight=988.670,maxWeight=function()return bF(bC(1600),\"atmo\")end},_10461={type=\"atmo\",size=\"L\",capacity=function()return bC(12800)end,baseWeight=5480.000,maxWeight=function()return bF(bC(12800),\"atmo\")end}},space={_50={type=\"space\",size=\"XS\",capacity=function()return bC(100)end,baseWeight=35.030,maxWeight=function()return bF(bC(100),\"space\")end},_187={type=\"space\",size=\"S\",capacity=function()return bE(400)end,baseWeight=182.670,maxWeight=function()return bF(bC(400),\"space\")end},_1496={type=\"space\",size=\"M\",capacity=function()return bE(1600)end,baseWeight=988.670,maxWeight=function()return bF(bC(1600),\"space\")end},_15933={type=\"space\",size=\"L\",capacity=function()return bE(12800)end,baseWeight=5480.000,maxWeight=function()return bF(bC(12800),\"space\")end}},rocket={_366={type=\"rocket\",size=\"XS\",capacity=function()return 400 end,baseWeight=173.420,maxWeight=function()return bF(bC(400),\"rocket\")end},_736={type=\"rocket\",size=\"S\",capacity=function()return 800 end,baseWeight=886.720,maxWeight=function()return bF(bC(800),\"rocket\")end},_6231={type=\"rocket\",size=\"M\",capacity=function()return 6400 end,baseWeight=4720.000,maxWeight=function()return bF(bC(6400),\"rocket\")end},_68824={type=\"rocket\",size=\"L\",capacity=function()return 50000 end,baseWeight=25740.000,maxWeight=function()return bF(bC(50000),\"rocket\")end}}}local function bL(C)return C==math.huge or C==-math.huge end;local function bM(C)return C~=C end;function disp_time(bN)if bL(bN)or bM(bN)then return\"-:-\"end;local bO=math.floor(bN/86400)local bP=math.floor(math.fmod(bN,86400)/3600)local bQ=math.floor(math.fmod(bN,3600)/60)local bR=math.floor(math.fmod(bN,60))if bN>=86400 then return string.format(\"%dd:%02dh\",bO,bP)elseif bN<86400 and bN>3600 then return string.format(\"%02dh:%02dm:%02ds\",bP,bQ,bR)elseif bN<3600 and bN>60 then return string.format(\"%02dm:%02ds\",bQ,bR)else return string.format(\"%02ds\",bR)end end;local bS=table.unpack;function fuelUsed(bT)local t={}function sum(s,...)if s then return s-sum(...)else return 0 end end;function average(d)if#t==bT then table.remove(t,1)end;if d~=0 and d~=nil then t[#t+1]=d end;return sum(bS(t))end;return average end;local function bU(bV)if next(bV)then table.sort(bV,function(s,u)return s.name<u.name end)end end;function getFuelSituation()local bV={atmo={},space={},rocket={}}for a4,bW in pairs(fuelTanks)do table.insert(bV[bW.type],{name=core.getElementNameById(a4),level=getFuelTankLevel(a4),time=getFuelTime(a4),specs=bW})end;bU(bV.atmo)bU(bV.space)bU(bV.rocket)return bV end;function getFuelTankSpecs(bX,bY)local bZ=math.floor(core.getElementMaxHitPointsById(bY))return fuelTankSpecsByMaxHP[bX]['_'..normalizeHp(bX,bZ)]end;function getFuelTankLiters(bY)local b_=fuelTanks[bY]local c0=core.getElementMassById(bY)local c1=c0-b_.baseWeight;return c1 end;function getFuelTankLevel(bY)local b_=fuelTanks[bY]local bI=b_.maxWeight()return getFuelTankLiters(bY)/bI end;function getFuelTime(bY)local b_=fuelTanks[bY]local c2=FuelTime[bY]or system.getArkTime()local c3=math.max(system.getArkTime()-c2,0.001)local c0=core.getElementMassById(bY)local c4=b_.baseWeight;local fuelUsed=FuelMass[bY](c0)local c5=c3/fuelUsed*(c0-c4)local c6=disp_time(c5)FuelTime[bY]=system.getArkTime()return c6 end;function getFuelTanks()local c7=core.getElementIdList()for a,c8 in pairs(c7)do local c9=core.getElementDisplayNameById(c8)if c9==\"Atmospheric Fuel Tank\"then local ca=getFuelTankSpecs(\"atmo\",c8)fuelTanks[c8]=ca;FuelMass[c8]=fuelUsed(2)elseif c9==\"Space Fuel Tank\"then fuelTanks[c8]=getFuelTankSpecs(\"space\",c8)FuelMass[c8]=fuelUsed(2)elseif c9==\"Rocket Fuel Tank\"then fuelTanks[c8]=getFuelTankSpecs(\"rocket\",c8)FuelMass[c8]=fuelUsed(2)end end end;getFuelTanks()function Keybind(s)local self={}self.Key=s;local u={}function self.Add(aT,aU)if type(aT)~=\"function\"then error(\"[Keybind] Unable to add callback - not a function\")end;table.insert(u,{Function=aT,Name=aU})end;function self.Remove(aT)if type(aT)~=\"function\"then error(\"[Keybind] Unable to remove callback - not a function\")end;local aV={}for aW,aO in pairs(u)do aV[aO.Function]=aW end;for aW,aO in pairs(aV)do if aW==aT then u[aO]=nil end end end;function self.GetNames()local aX={}for aW,aO in pairs(u)do if aO.Name then table.insert(aX,aO.Name)end end;return aX end;function self.Call()for aW,aO in pairs(u)do aO.Function(self.Key)end end;return self end;function KeybindController()local self={}local B={\"forward\",\"backward\",\"left\",\"right\",\"yawleft\",\"yawright\",\"up\",\"down\",\"gear\",\"light\",\"landing\",\"brake\",\"option1\",\"option2\",\"option3\",\"option4\",\"option5\",\"option6\",\"option7\",\"option8\",\"option9\",\"stopengines\",\"speedup\",\"speeddown\",\"antigravity\",\"booster\",\"lshift\",\"lalt\",\"lalt\",\"strafeleft\",\"straferight\"}self.keyUp={}self.keyDown={}self.keyLoop={}function self.Call(aY,type)if type==\"up\"then if self.keyUp[aY]then self.keyUp[aY].Call(aY)end elseif type==\"down\"then if self.keyDown[aY]then self.keyDown[aY].Call(aY)end else if self.keyLoop[aY]then self.keyDown[aY].Call(aY)end;system.print(aY)end end;function self.GetNamedKeybinds()local aX={}for aW,aO in pairs(self.keyUp)do local a=aO.GetNames()if#a>0 then for aZ=1,#a do table.insert(aX,{Key=aO.Key,Name=a[aZ]})end end end;for aW,aO in pairs(self.keyDown)do local a=aO.GetNames()if#a>0 then for aZ=1,#a do table.insert(aX,{Key=aO.Key,Name=a[aZ]})end end end;for aW,aO in pairs(self.keyLoop)do local a=aO.GetNames()if#a>0 then for aZ=1,#a do table.insert(aX,{Key=aO.Key,Name=a[aZ]})end end end;table.sort(aX,function(l,d)return l.Key<d.Key end)return aX end;self.Init=function()end;local function a_()for aZ=1,#B do self.keyUp[B[aZ]]=Keybind(B[aZ])self.keyDown[B[aZ]]=Keybind(B[aZ])self.keyLoop[B[aZ]]=Keybind(B[aZ])end end;a_()return self end;keybindPresets={}IOScheduler=function()local self={}self.defaultData=nil;self.currentTask=nil;self.taskQueue={}function self.queueData(cb)table.insert(self.taskQueue,cb)end;function self.send(bB)if not screen then return end;output=screen.getScriptOutput()screen.clearScriptOutput()if output~=\"ack\"then if output and output~=\"\"then handleOutput.Read(output)end;coroutine.yield()self.send(bB)else screen.setScriptInput(serialize(bB))end end;function self.runQueue()if#self.taskQueue==0 then if self.defaultData~=nil then self.currentTask=coroutine.create(function()self.send(self.defaultData)end)coroutine.resume(self.currentTask)end else self.currentTask=coroutine.create(function()for B=1,#self.taskQueue do local cb=self.taskQueue[B]if type(cb)==\"table\"then self.send(cb)end;table.remove(self.taskQueue,B)end end)coroutine.resume(self.currentTask)end end;function self.update()if self.currentTask then if coroutine.status(self.currentTask)~=\"dead\"then coroutine.resume(self.currentTask)else self.runQueue()end else self.runQueue()end end;return self end()HandleOutput=function()local self={}function self.Read(output)if type(output)~=\"string\"or output==\"\"then return end;local h=deserialize(output)if type(h)~=\"table\"then system.print('[E] Communication error!')return end;if h.dataType==\"config\"then config=h;local cc=tonumber(config.delta)if cc~=nil then config.targetAlt=ship.altitude+cc end;stats.data.target=config.targetAlt;self.Execute()elseif h.updateReq then ioScheduler.queueData(config)end end;function self.Execute()ship.baseAltitude=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ship.altitudeHold=config.targetAlt;if config.estop then config.targetAlt=0;ship.altitudeHold=0;ship.brake=true;ship.elevatorActive=false;ship.verticalLock=false;ship.stateMessage=\"EMERGENCY STOP\"system.print(ship.stateMessage)ioScheduler.queueData(config)else ship.brake=false end;if not config.manualControl and ship.altitudeHold>0 then ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.baseLoc,config.targetAlt-ship.baseAltitude)end;if config.setBaseReq then setBase()config.setBaseReq=false;ioScheduler.queueData(config)end;manualControlSwitch()end;return self end()ioScheduler=IOScheduler;handleOutput=HandleOutput;local a2,bx=require('atlas'),system.print;json=require('dkjson')planetaryReference=PlanetRef()galaxyReference=planetaryReference(a2)helios=galaxyReference[0]kinematics=Kinematics()function STEC(core,cd)local self={}self.core=core;self.construct=construct;self.control=cd;local ce=vec3(construct.getWorldPosition())self.nearestPlanet=helios:closestBody(ce)self.world={up=vec3(self.construct.getWorldOrientationUp()),down=-vec3(self.construct.getWorldOrientationUp()),left=-vec3(self.construct.getWorldOrientationRight()),right=vec3(self.construct.getWorldOrientationRight()),forward=vec3(self.construct.getWorldOrientationForward()),back=-vec3(self.construct.getWorldOrientationForward()),velocity=vec3(self.construct.getWorldVelocity()),acceleration=vec3(self.construct.getWorldAcceleration()),position=ce,gravity=vec3(self.core.getWorldGravity()),vertical=vec3(self.core.getWorldVertical()),atmosphericDensity=self.control.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0}local cf=self.world.gravity:normalize()local cg=self.world.velocity:normalize()self.target={prograde=function()return cg end,retrograde=function()return-cg end,radial=function()return cf end,antiradial=function()return-cf end,normal=function()return cg:cross(cf):normalize()end,antinormal=function()return cg:cross(-cf):normalize()end}self.altitude=core.getAltitude()if self.nearestPlanet then self.altitude=self.nearestPlanet:getAltitude(ce)end;self.rot=vec3()self.deviationRot=vec3()self.id=construct.getId()self.controlMode=unit.getControlMode()self.alternateCM=false;self.targetDestination=nil;self.baseLoc=vec3()self.baseAltitude=0;self.verticalLock=false;self.lockVector=vec3()self.lockPos=vec3()self.altHoldPreset1=0;self.altHoldPreset2=0;self.altHoldPreset3=0;self.altHoldPreset4=0;self.deviation=0;self.deviationVec=vec3()self.stateMessage=\"\"self.pocket=false;self.autoShutdown=false;self.dockingClamps=false;self.IDIntensity=5;self.deviationThreshold=0.05;self.playerId=player.getId()self.targetVectorVertical=nil;self.breadCrumbDist=1000;self.deviated=false;self.breadCrumbs={}self.hoverHeight=10;self.targetVectorAutoUnlock=true;self.mass=self.construct.getTotalMass()self.thrust=vec3()self.direction=vec3()self.rotation=vec3()self.rotationSpeed=2;self.rotationSpeedzMin=0.01;self.rotationSpeedz=0.01;self.maxRotationSpeedz=3;self.rotationStep=0.03;self.brakingFactor=10;self.angularThrust=vec3()self.inertialDampening=false;self.inertialDampeningDesired=false;self.brake=false;self.counterGravity=true;self.followGravity=true;self.gravityFollowSpeed=10;self.speedLimiter=1100;self.variableSpeedLimit=1100;self.speedLimiterToggle=true;self.verticalSpeedLimitAtmo=1100;self.verticalSpeedLimitSpace=4000;self.approachSpeed=200;self.throttle=1;self.fMax=0;self.vMax=0;self.hMax=0;self.elevatorActive=false;self.altitudeHold=0;self.atmosphereThreshold=0;self.cruiseSpeed=0;self.ignoreVerticalThrottle=false;self.localVelocity=vec3(construct.getVelocity())self.brakeDistance=0;self.accelTime=nil;self.viewY=0;self.viewX=0;self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.verticalCruise=false;self.verticalCruiseSpeed=0;self.priorityTags1=\"brake,airfoil,torque,vertical,lateral,longitudinal\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"\"local c2=system.getArkTime()function self.checkGrndDist()self.hasGndDet=false;self.isLanded=false;self.telemeterDist=nil;if not telemeter then return end;self.hasGndDet=true;local ch=telemeter.raycast()if ch.hit then self.GrndDist=ch.distance;self.telemeterDist=self.GrndDist;self.isLanded=self.GrndDist>0 and self.GrndDist<=0.5 and vec3(construct.getWorldVelocity()):len()<1 end end;self.checkGrndDist()function self.updateWorld()local ci=vec3(construct.getWorldPosition())self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=ci,gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cd.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0}self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.AngularVelocity=vec3(construct.getWorldAngularVelocity())self.AngularAcceleration=vec3(construct.getWorldAngularAcceleration())self.AngularAirFriction=vec3(construct.getWorldAirFrictionAngularAcceleration())self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())self.altitude=core.getAltitude()self.atmosphereThreshold=0;self.nearestPlanet=helios:closestBody(ci)if self.nearestPlanet then self.altitude=self.nearestPlanet:getAltitude(ci)self.atmosphereThreshold=self.nearestPlanet.atmosphereRadius-self.nearestPlanet.radius end;self.mass=self.construct.getTotalMass()self.localVelocity=vec3(construct.getVelocity())self.maxBrake=json.decode(unit.getWidgetData()).maxBrake;local cj=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})local ck=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local cl=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})if self.world.atmosphericDensity>0.1 then self.fMax=math.max(ck[1],-ck[2])else self.fMax=math.max(ck[3],-ck[4])end;if self.world.atmosphericDensity>0.1 then self.vMax=math.max(cl[1],-cl[2])else self.vMax=math.min(cl[3],-cl[4])end;if self.world.atmosphericDensity>0.1 then self.hMax=math.max(cj[1],-cj[2])else self.hMax=math.max(cj[3],-cj[4])end;local cm=self.mass*core.getGravityIntensity()local cn=self.vMax;local co=self.maxBrake;local cp=1;if self.maxBrake~=nil and core.getGravityIntensity()>=1 then if self.world.velocity:dot(-self.world.gravity:normalize())<1 then cp=-1 end;cm=cm*cp;cn=self.vMax+cm;co=self.maxBrake+cm end;self.brakeDistance,self.accelTime=kinematics.computeDistanceAndTime(self.world.velocity:len(),0,self.mass,cn,20,co)self.checkGrndDist()end;function self.calculateAccelerationForce(cq,bN)return self.mass*cq/bN end;function clamp(d,cr,cs)return math.min(cs,math.max(d,cr))end;function round(p,bp)local ct=10^(bp or 0)return math.floor(p*ct+0.5)/ct end;function self.throttleUp()self.throttle=clamp(self.throttle+0.05,0,1)end;function self.throttleDown()self.throttle=clamp(self.throttle-0.05,0,1)end;function moveWaypointZ(cu,V)if not ship.nearestPlanet then return cu end;return cu-ship.nearestPlanet:getGravity(cu):normalize()*V end;function self.worldToLocal(cu)return vec3(library.systemResolution3({self.world.right:unpack()},{self.world.forward:unpack()},{self.world.up:unpack()},{cu:unpack()}))end;function self.localToRelative(cv,cw,cx,cy)local cz,cA,cB=cx:unpack()local cC,cD,cE=cy:unpack()local cF,cG,cH=cw:unpack()local cI,cJ,cK=cv:unpack()local cL=cI*cz+cJ*cC+cK*cF;local cM=cI*cA+cJ*cD+cK*cG;local cN=cI*cB+cJ*cE+cK*cH;return vec3(cL,cM,cN)end;function MsToKmh(cO)return cO*3.6 end;function KmhToMs(cP)return cP/3.6 end;function self.apply()local c3=math.max(system.getArkTime()-c2,0.001)self.updateWorld()if not config.manualControl and self.isLanded and not self.targetDestination then return end;local cQ=self.thrust;local cR=self.angularThrust;local ck=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local cj=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})if not vec3.isvector(self.baseLoc)or self.baseLoc==vec3()then self.baseLoc=nil end;if lockVerticalToBase and self.baseLoc then local aq=helios:closestBody(self.baseLoc)if aq then self.nearestPlanet=aq;self.altitude=self.nearestPlanet:getAltitude(self.world.position)self.atmosphereThreshold=self.nearestPlanet.atmosphereRadius-self.nearestPlanet.radius end end;if not self.elevatorActive then self.inertialDampening=self.inertialDampeningDesired end;if self.direction.x~=0 then local az=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cS=-self.world.vertical*az;if self.direction.x<0 and math.abs(round2(cj[2],0))<500 then cQ=cQ+self.world.right*self.direction.x+cS:normalize()*self.fMax*self.throttle elseif self.direction.x>0 and math.abs(round2(cj[1],0))<500 then cQ=cQ+self.world.right*self.direction.x+cS:normalize()*self.fMax*self.throttle else cQ=cQ+self.world.right*self.direction.x*self.fMax*self.throttle end end;if self.direction.y~=0 then local az=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local cS=-self.world.vertical*az;if self.direction.y<0 and math.abs(round2(ck[2],0))==0 then cQ=cQ+self.world.forward*self.direction.y+cS:normalize()*self.fMax*self.throttle else cQ=cQ+self.world.forward*self.direction.y*self.fMax*self.throttle end end;if self.direction.z~=0 then local s=self.world.up*self.direction.z*self.fMax;if not self.ignoreVerticalThrottle then s=s*self.throttle end;cQ=cQ+s end;if self.rotation.y~=0 then cR=cR+self.world.up:cross(self.world.right)*self.rotation.y*self.rotationSpeed end;if self.rotation.z~=0 then if self.rotationSpeedz<=self.maxRotationSpeedz then self.rotationSpeedz=self.rotationSpeedz+self.rotationStep end;cR=cR+self.world.forward:cross(self.world.right)*self.rotation.z*clamp(self.rotationSpeedz,0.01,self.maxRotationSpeedz)if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.rotation.x~=0 then cR=cR+self.world.forward:cross(self.world.up)*self.rotation.x*self.rotationSpeed;if self.targetVectorAutoUnlock then self.targetVector=nil end elseif self.followGravity and self.nearestPlanet then local cT,cU=1,-self.nearestPlanet:getGravity(self.world.position)local cV=self.world.up:cross(cU)if lockVerticalToBase and self.baseLoc then cV=self.world.up:cross(-self.nearestPlanet:getGravity(self.baseLoc))end;if self.pocket then if self.direction.x<0 then cT=0.25;cV=cV+ship.world.right:cross(cU*cT)elseif self.direction.x>0 then cT=0.25;cV=cV-ship.world.right:cross(cU*cT)elseif self.direction.y<0 then cV=cV+ship.world.forward:cross(cU*0.25)end end;cV=cV*cT;cR=cR+cV end;self.deviation=0;self.deviationVec=vec3()self.deviationRot=vec3()if self.baseLoc then self.deviationVec=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude)-self.world.position;self.deviation=self.deviationVec:len()if vec3.isvector(self.rot)then self.deviationRot=self.world.forward:cross(self.rot)end end;if self.elevatorActive and self.targetDestination then self.inertialDampening=true;self.counterGravity=true;self.targetVector=self.rot;if self.world.velocity:len()>2000/3.6 then deviation=0 end;local cW=self.altitudeHold-self.altitude;local cX,cY=1000,0;local ak=self.world.position-self.targetDestination:len()local cZ=helios:closestBody(self.baseLoc):getAltitude(self.targetDestination)-self.altitude;local c_=self.targetDestination;local d0=0;d0=self.verticalSpeedLimitSpace;if self.altitude<=self.atmosphereThreshold+self.brakeDistance or self.altitude<=self.brakeDistance then d0=self.verticalSpeedLimitAtmo end;if self.brakeDistance+cX>=math.abs(cW)then d0=self.approachSpeed end;local deviationThreshold=self.deviationThreshold;if self.deviated or self.world.velocity:len()<1 then deviationThreshold=0.05 end;self.deviated=self.deviation>deviationThreshold+self.world.velocity:len()*10^-2;if self.deviated then c_=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude)cY=self.deviation*self.IDIntensity;self.stateMessage=\"Correcting Deviation\"end;if math.abs(cW)>self.brakeDistance and math.abs(cW)>500 and not self.deviated then self.stateMessage=\"Traveling\"cY=round2(clamp(cW,-d0,d0),1)elseif not self.deviated then self.stateMessage=\"Final approach\"cY=self.approachSpeed;if self.brakeDistance*1.5>=math.abs(ak)then cY=5 end end;local d1;if ship.nearestPlanet then if cZ>self.breadCrumbDist and not self.deviated then d1=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude+self.breadCrumbDist)c_=d1;local d2=ship.nearestPlanet:convertToMapPosition(c_)system.setWaypoint(d2,false)elseif cZ<-self.breadCrumbDist and not self.deviated then d1=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude-self.breadCrumbDist)c_=d1;local d2=ship.nearestPlanet:convertToMapPosition(c_)system.setWaypoint(d2,false)end end;local d3=self.world.position-c_:normalize()cQ=cQ-d3*self.mass*utils.clamp(ak*3.6,0.3,math.abs(cY)/3.6*self.IDIntensity)self.dockingClamps=false;if ak<0.01 and not config.manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true elseif ak<2 and self.world.velocity:len()==0 and not config.manualControl then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true end else self.targetDestination=nil end;if self.inertialDampening then local d4=self.localVelocity;local cc=vec3(0,0,0)local d5=self.direction or vec3(0,0,0)if d5.x==0 then cc.x=d4.x end;if d5.y==0 then cc.y=d4.y end;if d5.z==0 then cc.z=d4.z end;cc=self.localToRelative(cc,self.world.up,self.world.right,self.world.forward)cQ=cQ-cc*self.mass*self.IDIntensity end;if self.brake then local d6=self.world.velocity:len()cQ=-self.world.velocity*self.mass*math.max(self.brakingFactor*math.max(1,d6*0.5),d6*d6)end;if self.targetVector~=nil then local d7=vec3(self.world.forward.x,self.world.forward.y,self.world.forward.z)if type(self.targetVector)==\"function\"then d7=self.targetVector()elseif type(self.targetVector)==\"table\"then d7=self.targetVector end;cR=cR+self.world.forward:cross(d7)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end;if self.targetVectorVertical~=nil then local d7=vec3(self.world.up.x,self.world.up.y,self.world.up.z)if type(self.targetVector)==\"function\"then d7=self.targetVector()elseif type(self.targetVector)==\"table\"then d7=self.targetVector end;if self.world.up-self.targetVectorVertical:len()<0 then cR=cR+-self.world.up:cross(d7)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)else cR=cR+self.world.up:cross(d7)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end end;if self.counterGravity then cQ=cQ-self.world.gravity*self.mass end;if self.verticalLock then local d8=self.world.position+self.world.up-self.lockPos;local d9=self.lockVector*self.lockVector:dot(d8)local da=d9-d8;local db=da*self.mass*0.3;cQ=cQ+db*self.mass end;cR=cR-(self.AngularVelocity*2-self.AngularAirFriction*2)cQ=cQ/self.mass;if self.controlMode~=unit.getControlMode()then self.controlMode=unit.getControlMode()self.alternateCM=unit.getControlMode()==1 end;self.control.setEngineCommand(\"atmospheric_engine,space_engine,airfoil,brake,torque,vertical,lateral,longitudinal\",{cQ:unpack()},{cR:unpack()},false,false,self.priorityTags1,self.priorityTags2,self.priorityTags3)c2=system.getArkTime()end;return self end;ship=STEC(core,unit)displaySize=0.85;primaryColor=primaryColor or\"b80000\"secondaryColor=secondaryColor or\"e30000\"textShadowColor=textShadowColor or\"e81313\"CSS_SHUD=[[\n#horizon {\n\tleft: 0;\n\ttop: 0;\n\tposition: fixed;\n\twidth: 100vw;\n\theight: 100vh;\n\tbackground: radial-gradient(ellipse 27vw 11vw at 50% 51vw, rgba(1,5,8,0.6) 50%,rgba(1,5,8,0) 90%);\n\tfont-family: Montserrat, Roboto, Verdana;\n}\n#fuelTanks {\n\tposition: absolute;\n\ttop: 2%;\n\tleft: 2%;\n\tmargin: 2%;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n}\n.fuel-tanks {\n\twidth: 12vw;\n\tmargin-right: 1vw;\n\tdisplay: inline-block;\n\tvertical-align: top;\n}\n.fuel-meter {\n\theight: 1.8vh;\n\tbackground-color: #222;\n\tborder: 1px solid #fff;\n\tborder-radius: 0.6vh;\n\tfont-size: 0.9vh;\n\ttext-align: left;\n\toverflow: hidden;\n\tpadding: 0;\n}\n.fuel-meter hr.fuel-level {\n\theight: 1.6vh;\n\tborder: none;\n\tborder-radius: 0.6vh;\n\tmargin: 0;\n\tmargin-top: 0.1vh;\n\tpadding: 0;\n}\n.fuel-meter hr.fuel-level + span {\n\tfont-family: Montserrat, Roboto, Verdana;\n\tposition: relative;\n\ttop: -1.4vh;\n\tleft: 0.4vw;\n\tz-index: 1;\n\tcolor: #fff;\n\tfont-weight: bold;\n\tfont-size: 0.9vh;\n\tpadding 0;\n\ttext-shadow: 0.25vw 0.25vw 1.05vw #000;\n}\n.fuel-meter span:first-child {display: none;}\n.fuel-type-atmo .fuel-level {background: #1dd1f9;}\n.fuel-type-space .fuel-level {background: #ea5409;}\n.fuel-type-rocket .fuel-level {background: #bfa6ff;}\n\n#speedometer::before {\n\tdisplay: block;\n\tposition: absolute;\n\tcontent: ' ';\n\ttop: 0.25vh;\n\tbottom: -17vh;\n\tleft: 50%;\n\twidth: 31vw;\n\tborder: 10px solid #]]..primaryColor..[[;\n\tborder-bottom: 0;\n\tborder-right: 0;\n\tborder-left: 0;\n\tborder-radius: 100%;\n\ttransform: translateX(-50%);\n\tbackground-color: transparent;\n\tfilter: blur(100vw);\n}\n\n#speedometerBar {\n\tdisplay: block;\n\tposition: fixed;\n\tleft: 50%;\n\ttop: 77.2vh;\n\twidth: 30vw;\n\theight: 24.5vh;\n\ttransform: translate(-50%);\n\tcontent: ' ';\n\tborder: 10px solid #]]..primaryColor..[[;\n\tborder-bottom: 0;\n\tborder-right: 0;\n\tborder-left: 0;\n\tborder-radius: 100%;\n\tbackground-size: contain;\n\tbackground-color: transparent;\n\tfilter: blur(0.1vw);\n}\n\n#speedometer {\n\tfont-family: 'Montserrat', 'Roboto', 'Verdana';\n\tfont-weight: normal;\n\tfont-style: normal;\n\tposition: fixed;\n\tleft: 50%;\n\tbottom: 14vh;\n\tfont-size: 2.5vw;\n\ttransform: translate(-50%);\n\tbackground-color: transparent;\n\twidth: 30vw;\n\theight: 10vh;\n\ttext-align: center;\n}\n\n#speedometer .display {\n\tposition: absolute;\n\ttop: calc(50% + 1vh);\n\tleft: calc(50% + 0.25em);\n\ttransform: translate(-50%, -50%);\n\tfont-weight: bold;\n\ttext-shadow: 0 0 0.75vw #]]..textShadow..[[;\n\tpadding: 0;\n\tmargin: 0;\n\tfont-size: 2.8vw;\n}\n\n#speedometer .display .minor, #speedometer .unit {\n\tposition: relative;\n\tleft: -0.5em;\n\tvertical-align: super;\n\tfont-size: 40%;\n}\n\n#speedometer .unit {\n\tvertical-align: 50%;\n\tfont-size: 23%;\n\tleft: -1.33em;\n}\n\n#speedometer .accel {\n\tfont-size: 1.2vw;\n\ttext-shadow: 0 0 0.15vw #000000;\n\tposition: absolute;\n\tleft: 12.5%;\n\tbottom: 0;\n\topacity: 0.75;\n}\n\n#speedometer .accel .major::before {\n\tcontent: 'Δ';\n\tfont-size: 40%;\n}\n\n#speedometer .accel .unit {\n\tleft: -0.66em;\n}\n\n#speedometer .alt {\n\tposition: absolute;\n\tleft: 50%;\n\tbottom: -0.65vh;\n\ttransform: translateX(-50%);\n\tfont-size: 0.65vw;\n\ttext-align: center;\n}\n\n#speedometer .misc {\n\tposition: absolute;\n\tleft: 50%;\n\tbottom: -1.5vh;\n\ttransform: translateX(-50%);\n\tfont-size: 0.4vw;\n\ttext-align: center;\n}\n\n#speedometer .throttle {\n\tposition: absolute;\n\tleft: 50%;\n\tbottom: -3vh;\n\ttransform: translateX(-50%);\n\tfont-size: 0.7vw;\n\ttext-align: center;\n}\n\n#speedometer .vertical {\n\tfont-size: 1.3vw;\n\ttext-shadow: 0 0 0.15vw #000000;\n\tposition: absolute;\n\tright: 12.5%;\n\tbottom: 0;\n\topacity: 0.75;\n\ttext-align: right;\n}\n\n#speedometer .vertical::after {\n\tcontent: '↕ m/s';\n\tvertical-align: 50%;\n\tfont-size: 33%;\n}\n\n#speedometer::after {\n\tdisplay: block;\n\tfont-size: 0;\n\tbackground-size: contain;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 0.5vh;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tz-index: 666;\n\topacity: 0.5;\n}\n\n#horizon-menu {\n\ttext-transform: uppercase;\n\tfont-family: 'Verdana';\n\tfont-size: ]]..displaySize..[[vw;\n\tdisplay: flex;\n\tflex-direction: column;\n\tposition: fixed;\n\tbottom: 35%;\n\tleft: 2vw;\n\twidth: 18vw;\n\tpadding: 1vw;\n\ttransform: perspective(50vw) rotateY(35deg);\n\ttext-shadow: 0.1vw 0 0.25vw #000000;\n}\n#horizon-menu .item {\n\tcolor: #fff;\n\tpadding: 0.2vw 0.5vw;\n\tz-index: 99999;\n}\n#horizon-menu .item .right {\n\tfloat: right;\n}\n#horizon-menu .item .red {\n\tcolor: #]]..secondaryColor..[[;\n}\n#horizon-menu .item.active {\n\tposition: relative;\n\ttext-shadow: 0 0 0.75vw #]]..secondaryColor..[[;\n\ttransform: translateZ(0.33vw);\n\tfont-size: 1.15em;\n\ttransform-style: preserve-3d;\n}\n\n#horizon-menu .item.active::before {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 15%;\n\tbottom: 15%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..secondaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(1vw);\n\topacity: 0.2;\n}\n\n#horizon-menu .item.active::after {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 20%;\n\tbottom: 40%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..secondaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(0.2vw);\n\topacity: 0.3;\n}\n#horizon-menu .item.locked {\n\tpadding-left: 0.4vw;\n}\n#horizon-menu .item.locked::before {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 15%;\n\tbottom: 15%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..primaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(1vw);\n\topacity: 0.2;\n}\n#horizon-menu .item.locked::after {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 20%;\n\tbottom: 40%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..primaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(0.2vw);\n\topacity: 0.6;\n}\n\n#horizon-menu::after {\n\tcontent: ' ';\n\tfilter: blur(1vw);\n\tdisplay: block;\n\tborder-top-left-radius: 1vw;\n\tborder-top-right-radius: 1vw;\n\tborder-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n\tbackground: linear-gradient(to bottom, rgba(0,0,0,0.65) 50%,rgba(0,0,0,0) 100%);\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: -99;\n}\n\n#horizon-menu::before {\n\tcontent: ' ';\n\tfilter: blur(0.05vw);\n\tdisplay: block;\n\tborder-top-left-radius: 1vw;\n\tborder-top-right-radius: 1vw;\n\tborder-top: 0.25vw solid #]]..primaryColor..[[;\n\tborder-left: 0.25vw solid #]]..primaryColor..[[;\n\tborder-right: 0.25vw solid #]]..primaryColor..[[;\n\tborder-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n\tbackground: radial-gradient(ellipse at top, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: -100;\n}\n\n/* ORE TRILATERATE STYLE */\n\np {\t/*color:#eca943;*/\n\tfont-size:100%;\n}\n\n.block {\n\tborder: 1px solid DimGray;\n\tborder-radius:10px;\n\tbackground-color: rgba(0,0,0,.5)\n}\n\n#main_block{\n\ttext-align: center;\n\tpadding: 10px 10px 10px 10px;\n}\n\n#help_block{\n\ttext-align: left;\n\tpadding: 10px 10px 10px 10px;\n\twidth: 320px;\n}\n\n#pause_block{\n\ttext-align: center;\n\tfont-size:90%;\n}\n\n#panel_left {\n\tposition: absolute;\n\ttop: 0%;\n\tleft: 0%;\n\t/*width: 310px;*/\n}\n#slider_header {\n\tposition: absolute;\n\ttop: 0vh;\n\tfont-size:110%;\n\twidth: 100%;\n\ttext-align: center;\n}\n\n#slider_main {\n\tposition: relative;\n\tfont-size:105%;\n\tcolor:#eca943;\n\t/*left: -51%;/*0%*/*/\n}\n\n#slider_footer{\n\tposition: relative;\n\tfont-size:120%;\n\ttop:80%;\n\tleft:10%;\n}\n\n#panel_slider {\n\tposition: absolute;\n\ttop: 54.5vh; ;\n\tleft: 66.8vw;/*66.8vw;*/\n\twidth: 9vw;/*9vw;*/\n\theight: 28.5vh;\n\ttransform: skew(15.85deg); /*15.85deg*/\n\tborder-bottom: 28.5vh solid rgba(0,0,0,.25);\n\tborder-right: 1vw solid transparent;\n\t/*background-color:rgba(0,0,0,.75)*/\n}\n\n#panel_test {\n\tposition: fixed;\n\ttop: 100px; /* or whatever top you need */\n\tleft: 50%;\n\twidth: auto;\n\t-webkit-transform: translateX(-50%);\n\t-moz-transform: translateX(-50%);\n\t-ms-transform: translateX(-50%);\n\t-o-transform: translateX(-50%);\n\ttransform: translateX(-50%);\n}\n\n.shadow {\n\t-webkit-filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n\tfilter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n}\n]]vec2=require('cpml/vec2')mat4=require(\"cpml/mat4\")altHoldAdjustment=0.1;altAdjustment=3;local bx=system.print;function SpeedConvert(C)if not C or C==0 then return{0,\"00\",\"km/h\"}end;if C>5000 then local dc=tonumber(tostring(round2(C/55.55,2)):match(\"%.(%d+)\"))local dd=string.format(\"%02d\",dc)return{round2(C/55.55),dd,\"su/h\"}end;local dc=tonumber(tostring(round2(C/3.6,2)):match(\"%.(%d+)\"))local dd=string.format(\"%02d\",dc)return{round2(C*3.6),dd,\"km/h\"}end;function CruiseControl(C)local de=0;if ship.cruiseSpeed<500 then de=C*10 elseif ship.cruiseSpeed>=500 and ship.cruiseSpeed<=1999 then de=C*50 elseif ship.cruiseSpeed>=2000 and ship.cruiseSpeed<=9999 then de=C*100 elseif ship.cruiseSpeed>=10000 then de=C*1000 end;ship.cruiseSpeed=utils.clamp(ship.cruiseSpeed+de,-29990,29990)end;function getControlMode()return ship.alternateCM and\"Cruise\"or\"Travel\"end;function altHoldAdjustmentSetting()return altHoldAdjustment*10^altAdjustment end;function setAltHoldAdjustment()end;function SHUDMenuItem(df,dg,dh)local self={}self.Enabled=true;self.Active=false;self.Content=df;self.Class=\"\"self.Action=dg or function(system,unit,self)end;self.Update=dh or function(system,unit,self)end;function self.Disable()self.Enabled=false;return self end;function self.Enable()self.True=false;return self end;function self.Lock()SHUD.ScrollLock=true;self.Active=true;self.Class=\"locked\"return self end;function self.Unlock()SHUD.ScrollLock=false;self.Active=false;self.Class=\"\"return self end;return self end;SHUD=function()local self={}self.Enabled=false;self.FreezeUpdate=false;self.IntroPassed=false;self.FOV=system.getCameraHorizontalFov()self.ScreenW=system.getScreenWidth()self.ScreenH=system.getScreenHeight()self.Resolution=vec2(self.ScreenW,self.ScreenH)self.SvgMinX=-round(self.ScreenW/4/2,0)self.SvgMinY=-round(self.ScreenH/4/2,0)self.SvgWidth=round(self.ScreenW/4,0)self.SvgHeight=round(self.ScreenH/4,0)function scaleViewBounds(di)local dj=-0.5;local dk=0.5;local dl=-90;local dm=90;return-((di-dj)/(dk-dj)*(dm-dl)+dl)end;shipPitch=scaleViewBounds(ship.pitchRatio)self.SHUDAtmoFuelHtml=\"\"self.SHUDSpaceFuelHtml=\"\"self.Markers={}self.MarkerBuffer={}function self.worldToScreen(dn)local bx=mat4():perspective(self.FOV,self.ScreenW/self.ScreenH,0.1,100000)local dp=ship.world.position-vec3(player.getWorldHeadPosition())local dq=mat4():look_at(dp,dp+ship.world.forward,ship.world.up)local cv=dq*bx*{dn.x,dn.y,dn.z,1}cv[1]=cv[1]/cv[4]*0.5+0.5;cv[2]=cv[2]/cv[4]*0.5+0.5;cv[1]=cv[1]*100;cv[2]=cv[2]*100;return vec3(cv[1],cv[2],cv[3])end;local dr=SHUDMenuItem;local ds=DynamicDocument;function self.UpdateMarkers()self.MarkerBuffer={}for B=1,#self.Markers do local l=self.Markers[B]local dt={}local Q=vec3(0,0,0)if type(l.Position)==\"function\"then dt.pos=l.Position()Q=l.Position()else dt.pos=l.Position;Q=l.Position end;dt.pos=self.worldToScreen(dt.pos)dt.class=l.Class;dt.content='&nbsp;'if l.Name then dt.content=[[<div class=\"name\">]]..l.Name..[[</div>]]end;if l.ShowDistance then dt.content=dt.content..[[<div class=\"distance\">]]..round2(ship.world.position-Q:len())..[[m</div>]]end;if dt.pos.z>0 then self.MarkerBuffer[#self.MarkerBuffer+1]=dt end end end;local function du(b4)return b4:gsub(\"%%\",\"%%%%\")end;function self.MakeBooleanIndicator(dv)local dw=[[<span class=\"right\">\n\t\t\t<i dd-if=\"varName == true\">✓&nbsp;</i>\n\t\t\t<i dd-if=\"varName == false\">✘&nbsp;</i>\n\t\t</span>]]return dw:gsub(\"varName\",du(dv))end;function self.MakeSliderIndicator(dv,dx)dx=dx or\"\"local dw=[[<span class=\"right\">{{varName}}{{suffix}}<i>&udarr;&nbsp;</i></span>]]return dw:gsub(\"varName\",du(dv)):gsub(\"{{suffix}}\",du(dx))end;function self.GenerateMenuLink(dy,dz)return dr(dy..self.MenuIcon,function()self.SelectMenu(dz)end)end;self.MenuIcon=[[<span class=\"right\"><i>&gt;&nbsp;</i></span>]]self.BackButton=dr([[<i>&lt;&nbsp;</i>&nbsp;]]..\"Back\",function()SHUD.Menu=SHUD.MenuList.prev;SHUD.CurrentIndex=1 end)self.Menu={dr(ds([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\",\"%\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end),self.GenerateMenuLink(\"Stability Assist\",\"stability\"),self.GenerateMenuLink(\"Altitude Hold\",\"altHold\"),self.GenerateMenuLink(\"Ship Stats\",\"shipStats\"),dr([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon,function()self.SelectMenu(\"hotkeys\")end)}self.MenuList={}self.MenuList.flightMode={}self.MenuList.shipStats={dr(ds([[<span>Core ID:</span><span class=\"right\">{{ship.id}}</span>]])).Disable(),dr(ds([[<span>Mass:</span><span class=\"right\">{{round2(ship.mass/1000,2)}} Ton</span>]])).Disable(),dr(ds([[<span>FMax:</span><span class=\"right\">{{round2(ship.fMax/1000,2)}} KN</span>]])).Disable(),dr(ds([[<span>Pos X:</span><span class=\"right\">{{round2(ship.world.position.x)}}</span>]])).Disable(),dr(ds([[<span>Pos Y:</span><span class=\"right\">{{round2(ship.world.position.y)}}</span>]])).Disable(),dr(ds([[<span>Pos Z:</span><span class=\"right\">{{round2(ship.world.position.z)}}</span>]])).Disable()}self.MenuList.stability={dr(ds(\"<span>Gravity Suppression<span>\"..self.MakeBooleanIndicator(\"ship.counterGravity\")),function()ship.counterGravity=not ship.counterGravity end),dr(ds(\"<span>Gravity Follow</span>\"..self.MakeBooleanIndicator(\"ship.followGravity\")),function()ship.followGravity=not ship.followGravity end),dr(ds(\"<span>Inertial Dampening<span>\"..self.MakeBooleanIndicator(\"ship.inertialDampening\")),function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end),dr(ds([[<span>Hover Height<span>]]..self.MakeSliderIndicator(\"ship.hoverHeight\",\"m\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)ship.hoverHeight=utils.clamp(ship.hoverHeight+system.getMouseWheel(),0,35)end)}function self.updateTargetDest()ship.targetDestination=moveWaypointZ(ship.baseLoc,utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)-ship.baseAltitude)ship.altitudeHold=utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)end;self.MenuList.altHold={dr(ds(\"<span>Altitude Hold<span>\"..self.MakeBooleanIndicator(\"ship.elevatorActive\")),function()ship.elevatorActive=not ship.elevatorActive end),dr(ds([[<span>Multiplier<span>]]..self.MakeSliderIndicator(\"round2(altHoldAdjustmentSetting(),3)\",\"\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)altAdjustment=utils.clamp(altAdjustment+system.getMouseWheel(),-1,4)end),dr(ds([[<span>Alt Setpoint<span>]]..self.MakeSliderIndicator(\"round2(ship.altitudeHold,3)\",\"m\")),function(G,G,b3)if b3.Active then b3.Unlock()else b3.Lock()end end,function(system,G,b3)self.updateTargetDest()end),dr(ds([[<span>Preset 1:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset1)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreqset1;ship.elevatorActive=true end),dr(ds([[<span>Preset 2:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset2)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset2;ship.elevatorActive=true end),dr(ds([[<span>Preset 3:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset3)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset3;ship.elevatorActive=true end),dr(ds([[<span>Preset 4:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset4)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset4;ship.elevatorActive=true end),dr(ds([[<span>Altitude:</span><span class=\"right\">{{round2(ship.altitude,4)}}</span>]])).Disable()}self.MenuList.hotkeys={}local dA=\"<style>\"..CSS_SHUD..\"</style>\"self.fuel=nil;function getFuelRenderedHtml()self.fuel=getFuelSituation()local dB=function(type,ca)local dC=100*ca.level;local dD=ca.level*ca.specs.capacity()return'<div class=\"fuel-meter fuel-type-'..type..'\"><hr class=\"fuel-level\" style=\"width:'..dC..'%%;\" /><span>'..ca.name..': '..ca.time..' ('..math.floor(dC)..'%%, '..math.floor(dD)..'L)</span></div>'end;self.SHUDAtmoFuelHtml=''self.SHUDSpaceFuelHtml=''if next(self.fuel.atmo)then local fuelHtml='<div class=\"fuel-tanks fuel-type-atmo\">'for G,ca in pairs(self.fuel.atmo)do fuelHtml=fuelHtml..dB(\"atmo\",ca)end;self.SHUDAtmoFuelHtml=fuelHtml..'</div>'end;if next(self.fuel.space)then fuelHtml='<div class=\"fuel-tanks fuel-type-space\">'for G,ca in pairs(self.fuel.space)do fuelHtml=fuelHtml..dB(\"space\",ca)end;self.SHUDSpaceFuelHtml=fuelHtml..'</div>'end end;opacity=0.5;local dE=ds(dA..[[\n\t<div id=\"horizon\" style=\"opacity: {{opacity}};\">\n\t\t<div id=\"speedometerBar\">&nbsp;</div>\n\t\t\t<div id=\"speedometer\">\n\t\t\t\t<span class=\"display\">\n\t\t\t\t\t<span class=\"major\">{{SpeedConvert(ship.world.velocity:len())[1]}}</span>\n\t\t\t\t\t<span class=\"minor\">{{SpeedConvert(ship.world.velocity:len())[2]}}</span>\n\t\t\t\t\t<span class=\"unit\">{{SpeedConvert(ship.world.velocity:len())[3]}}</span>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"accel\">\n\t\t\t\t\t<span class=\"major\">{{round2(ship.world.acceleration:len(), 1)}}</span>\n\t\t\t\t\t<span class=\"unit\">m/s</span>\n\t\t\t\t</span>\n\t\t\t\t\t<span class=\"vertical\">\n\t\t\t\t\t{{round2(ship.world.velocity:dot(-ship.world.gravity:normalize()), 1)}}\n\t\t\t\t</span>\n\t\t\t\t<span class=\"alt\">{{round2(ship.altitude)}}m</span>\n\n\t\t\t\t<span class=\"misc\">ATM {{round2(ship.world.atmosphericDensity, 2)}} | G {{round2(ship.world.gravity:len(), 2)}}m/s</span>\n\t\t\t\t<span dd-if=\"not ship.alternateCM\" class=\"throttle\">Throttle {{round2(ship.throttle * 100)}}%</span>\n\t\t\t\t<span dd-if=\"ship.alternateCM\" class=\"throttle\">Cruise {{round2(ship.cruiseSpeed)}} km/h</span>\n\t\t\t</div>\n\n\t\t\t<div id=\"horizon-menu\">{{_SHUDBUFFER}}</div>\n\n\t\t</div>\n\t\t<div id=\"fuelTanks\">\n\t\t\t{{ SHUD.SHUDAtmoFuelHtml }}\n\t\t\t{{ SHUD.SHUDSpaceFuelHtml }}\n\t\t</div>\n\t</div>\n\t]])local dF=[[<div class=\"item {{class}}\">{{content}}</div>]]function self.SelectMenu(dG)if not SHUD.MenuList[dG]then error(\"[SHUD] Undefined menu: \"..dG)end;SHUD.MenuList.prev=SHUD.Menu;SHUD.Menu=SHUD.MenuList[dG]SHUD.CurrentIndex=1;if SHUD.Menu[#SHUD.Menu]~=SHUD.BackButton then table.insert(SHUD.Menu,SHUD.BackButton)end end;function self.Select()if not self.Enabled then return end;if#self.Menu<1 then return end;self.Menu[self.CurrentIndex].Action(self.system,self.unit,self.Menu[self.CurrentIndex])end;function self.Render()local dH=\"\"if self.Enabled then for B=1,#self.Menu do local dI=self.Menu[B]if dI.Active then dI.Update(self.system,self.unit,dI)end;local dJ=dF;local dK=\"\"local df=dI.Content;if df.Read then df=df.Read()end;df=du(df)if self.CurrentIndex==B then dK=\"active\"end;if not dI.Enabled then dK=dK..\" disabled\"end;dJ=dJ:gsub(\"{{class}}\",dK..\" \"..dI.Class)dJ=dJ:gsub(\"{{content}}\",df)dH=dH..dJ end;_ENV[\"_SHUDBUFFER\"]=du(dH)else ship.frozen=player.isFrozen()_ENV[\"_SHUDBUFFER\"]=ds([[<div class=\"item helpText\">Press ]]..\"[\"..self.system.getActionKeyName(\"speedup\")..\"]\"..[[ to  toggle menu</div>\n\t\t\t\t<div class=\"item helpText\"><span>Character Movement:</span>]]..self.MakeBooleanIndicator(\"ship.frozen\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Vertical Lock:</span>]]..self.MakeBooleanIndicator(\"ship.verticalLock\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Inertial Dampening:</span>]]..self.MakeBooleanIndicator(\"ship.inertialDampening\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Follow:</span>]]..self.MakeBooleanIndicator(\"ship.followGravity\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Supression:</span>]]..self.MakeBooleanIndicator(\"ship.counterGravity\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Open Door:</span><span class=\"right\">F5</span></div>\n\t\t\t\t<div class=\"item helpText\"><span>Close Door:</span><span class=\"right\">F6</span></div>\n\t\t\t\t]]).Read()end;if not self.FreezeUpdate then self.system.setScreen(dE.Read())end end;function self.Update()updateGEAS()if self.Enabled then opacity=1 else opacity=0.5 end;if not self.ScrollLock and self.Enabled then local dL=system.getMouseWheel()if dL~=0 then self.CurrentIndex=self.CurrentIndex-dL;if self.CurrentIndex>#self.Menu then self.CurrentIndex=1 elseif self.CurrentIndex<1 then self.CurrentIndex=#self.Menu end end elseif not self.Enabled then if player.isFrozen()and unit.isRemoteControlled()then ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end;self.UpdateMarkers()end end;function self.Init(system,unit,dM)self.system=system;self.unit=unit;self.CurrentIndex=1;self.ScrollLock=false;system.showScreen(true)unit.hideWidget()local F=dM.GetNamedKeybinds()self.MenuList.hotkeys={}for B=1,#F do local dN=F[B]table.insert(self.MenuList.hotkeys,dr([[<span>]]..dN.Name..[[</span><span class=\"right\">]]..self.system.getActionKeyName(dN.Key)..[[</span>]]).Disable())end;self.MenuList.flightMode={}for a,j in pairs(keybindPresets)do table.insert(self.MenuList.flightMode,dr(string.upper(a),function()self.Init(self.system,self.unit,j)keybindPreset=a;keybindPresets[keybindPreset].Init()end))end;dM.Init()end;return self end()local bx,clamp=system.print,utils.clamp;ship.hoverHeight=tonumber(GEAS_Alt)or 10;ship.autoShutdown=autoShutdown==true;ship.altitudeHold=round2(ship.altitude,2)ship.inertialDampeningDesired=inertialDampening==true;ship.followGravity=followGravity==true;ship.minRotationSpeed=tonumber(minRotationSpeed)or 0.01;ship.maxRotationSpeedz=tonumber(maxRotationSpeed)or 5;ship.rotationStep=tonumber(rotationStep)or 0.025;ship.verticalSpeedLimitAtmo=tonumber(verticalSpeedLimitAtmo)or 1100;ship.verticalSpeedLimitSpace=tonumber(verticalSpeedLimitSpace)or 4000;ship.approachSpeed=tonumber(approachSpeed)or 100;ship.altHoldPreset1=tonumber(altHoldPreset1)or 0;ship.altHoldPreset2=tonumber(altHoldPreset2)or 0;ship.altHoldPreset3=tonumber(altHoldPreset3)or 0;ship.altHoldPreset4=tonumber(altHoldPreset4)or 0;ship.deviationThreshold=tonumber(deviationThreshold)or 0.5;ship.pocket=pocket==true;ship.breadCrumbDist=tonumber(breadCrumbDist)or 1000;ContainerOptimization=clamp(tonumber(ContainerOptimization)or 0,0,5)FuelTankOptimization=clamp(tonumber(FuelTankOptimization)or 0,0,5)fuelTankHandlingAtmo=clamp(tonumber(fuelTankHandlingAtmo)or 0,0,5)fuelTankHandlingSpace=clamp(tonumber(fuelTankHandlingSpace)or 0,0,5)dockingMode=clamp(tonumber(dockingMode)or 1,1,3)controlStateChange=true;local dO=false;function writeVecToDb(dP,dQ)if flightModeDb and dQ and vec3.isvector(dP)then settingsActive=false;flightModeDb.setFloatValue(dQ..\"X\",dP.x)flightModeDb.setFloatValue(dQ..\"Y\",dP.y)flightModeDb.setFloatValue(dQ..\"Z\",dP.z)end end;function readVecFromDb(dQ)if flightModeDb and dQ then local j=vec3(0,0,0)j.x=flightModeDb.getFloatValue(dQ..\"X\")j.y=flightModeDb.getFloatValue(dQ..\"Y\")j.z=flightModeDb.getFloatValue(dQ..\"Z\")return j end end;function gearToggle()if unit.isAnyLandingGearExtended()then unit.retractLandingGears()else unit.extendLandingGears()end end;function scaleViewBound(dj,dk,dl,dm,di)return(di-dj)/(dk-dj)*(dm-dl)+dl end;function switchFlightMode(dR)SHUD.Init(system,unit,keybindPresets[dR])keybindPreset=dR;if flightModeDb then flightModeDb.setStringValue(\"flightMode\",dR)end end;function switchControlMode()ship.alternateCM=not ship.alternateCM end;function swapForceFields()if manualSwitches and#manualSwitches>0 then if player.isFrozen()then manualSwitches[1].activate()for G,dS in ipairs(forceFields)do dS.retract()end else manualSwitches[1].deactivate()for G,dS in ipairs(forceFields)do dS.deploy()end end end end;function setBase(s)if not ship.nearestPlanet then return end;ship.rot=ship.world.right:cross(ship.nearestPlanet:getGravity(construct.getWorldPosition()))if type(s)~=\"string\"or s==\"\"then ship.baseLoc=ship.world.position elseif string.find(s,\"::pos\")~=nil then local dT=ship.nearestPlanet:convertToWorldCoordinates(s)if not vec3.isvector(dT)then bx(\"[E] Invalid location string: \"..s)return end;ship.baseLoc=dT end;writeVecToDb(ship.baseLoc,\"BaseLoc\")writeVecToDb(ship.rot,\"BaseRot\")config.rtb=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ioScheduler.queueData(config)end;function updateGEAS()if useGEAS and not config.manualControl then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)else unit.deactivateGroundEngineAltitudeStabilization()end end;local dU=DUTTY;dU.onCommand('setbase',function(s)setBase(s)end)local function dV()if elevatorScreen and vec3.isvector(ship.baseLoc)and ship.baseLoc~=vec3()and ship.baseAltitude and ship.baseAltitude>0 then ship.altitudeHold=ship.baseAltitude;ship.targetDestination=moveWaypointZ(ship.baseLoc,0)ship.elevatorActive=true end end;local function dW()if dO then if flightModeDb then flightModeDb.clear()bx(\"[I] DB cleared!\")end else config.manualControl=not config.manualControl;ship.elevatorActive=false;ship.inertialDampening=true;ship.verticalLock=false;manualControlSwitch()end end;keybindPresets[\"keyboard\"]=KeybindController()keybindPresets[\"keyboard\"].Init=function()keybindPreset=\"keyboard\"ship.ignoreVerticalThrottle=true;ship.throttle=1 end;keybindPresets[\"keyboard\"].keyDown.up.Add(function()ship.direction.z=1;if not ship.counterGravity then ship.counterGravity=true end end)keybindPresets[\"keyboard\"].keyUp.up.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.down.Add(function()ship.direction.z=-1 end)keybindPresets[\"keyboard\"].keyUp.down.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.yawleft.Add(function()ship.rotation.z=-1 end)keybindPresets[\"keyboard\"].keyUp.yawleft.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.yawright.Add(function()ship.rotation.z=1 end)keybindPresets[\"keyboard\"].keyUp.yawright.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.forward.Add(function()ship.direction.y=1 end)keybindPresets[\"keyboard\"].keyUp.forward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.left.Add(function()ship.direction.x=-1 end)keybindPresets[\"keyboard\"].keyUp.left.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.right.Add(function()ship.direction.x=1 end)keybindPresets[\"keyboard\"].keyUp.right.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.lshift.Add(function()dO=true end,\"Shift Modifier\")keybindPresets[\"keyboard\"].keyUp.lshift.Add(function()dO=false end)keybindPresets[\"keyboard\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"keyboard\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"keyboard\"].keyUp.stopengines.Add(function()SHUD.Select()if not SHUD.Enabled then if ship.direction.y~=0 then ship.direction.y=0 else ship.direction.y=1 end end end,\"Cruise\")local function dX(dY)if emitter then emitter.send(\"door_control\",dY)end end;keybindPresets[\"keyboard\"].keyUp.gear.Add(function()useGEAS=not useGEAS;updateGEAS()end)keybindPresets[\"keyboard\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"keyboard\"].keyUp[\"option1\"].Add(function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end,\"Inertial Dampening\")keybindPresets[\"keyboard\"].keyUp[\"option2\"].Add(function()player.freeze(not player.isFrozen())swapForceFields()end,\"Freeze character\")keybindPresets[\"keyboard\"].keyUp[\"option3\"].Add(function()ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"keyboard\"].keyUp[\"option4\"].Add(function()ship.counterGravity=not ship.counterGravity end,\"Counter Gravity\")keybindPresets[\"keyboard\"].keyUp[\"option5\"].Add(function()ship.verticalLock=true;ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())if flightModeDb then writeVecToDb(ship.lockVector,\"lockVector\")writeVecToDb(ship.lockPos,\"lockPos\")end end,\"Set Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option6\"].Add(function()ship.verticalLock=not ship.verticalLock end,\"Toggle Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option7\"].Add(function()dV()end,\"RTB\")keybindPresets[\"keyboard\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(1)if construct.undock()then bx('[I] Undocked')end end,\"Undock\")keybindPresets[\"keyboard\"].keyUp[\"option9\"].Add(function()dW()end,\"Manual Mode Toggle\")keybindPresets[\"screenui\"]=KeybindController()keybindPresets[\"screenui\"].Init=function()keybindPreset=\"screenui\"ship.ignoreVerticalThrottle=true;ship.throttle=1;player.freeze(true)ship.frozen=false end;keybindPresets[\"screenui\"].keyDown.lshift.Add(function()dO=true end,\"Shift Modifier\")keybindPresets[\"screenui\"].keyUp.lshift.Add(function()dO=false end)keybindPresets[\"screenui\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"screenui\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"screenui\"].keyUp[\"option5\"].Add(function()dX(\"open\")end,\"Open Door\")keybindPresets[\"screenui\"].keyUp[\"option6\"].Add(function()dX(\"close\")end,\"Close Door\")keybindPresets[\"screenui\"].keyUp[\"option7\"].Add(function()dV()end,\"RTB\")keybindPresets[\"screenui\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(1)construct.undock()end,\"Undock\")keybindPresets[\"screenui\"].keyUp[\"option9\"].Add(function()dW()end,\"Manual Mode Toggle\")keybindPreset=\"keyboard\"if flightModeDb then if not flightModeDb.hasKey(\"flightMode\")then flightModeDb.setStringValue(\"flightMode\",\"keyboard\")end;keybindPreset=flightModeDb.getStringValue(\"flightMode\")if keybindPreset~='keyboard'and keybindPreset~='screenui'then keybindPreset='keyboard'end end;SHUD.Init(system,unit,keybindPresets[keybindPreset])Task(function()coroutine.yield()SHUD.FreezeUpdate=true;local dZ=system.getArkTime()+2;while system.getArkTime()<dZ do coroutine.yield()end;SHUD.FreezeUpdate=false;SHUD.IntroPassed=true end)player.freeze(true)ship.frozen=false;updateGEAS()function normalizeTravelMode()if ship.controlMode==1 and controlStateChange then ship.cruiseSpeed=round(ship.world.velocity:len()*3.6,-1)ship.throttle=0;controlStateChange=false elseif ship.controlMode==0 then controlStateChange=true end end;function autoLandingGear()if ship.world.velocity:len()>=83.3333 then unit.retractLandingGears()else unit.extendLandingGears()end end;local function d_()ship.altHoldPreset1=tonumber(ship.altHoldPreset1)or 0;ship.altHoldPreset2=tonumber(ship.altHoldPreset2)or 0;ship.altHoldPreset3=tonumber(ship.altHoldPreset3)or 0;ship.altHoldPreset4=tonumber(ship.altHoldPreset4)or 0 end;function STEC_configInit()ship.baseLoc=ship.world.position;ship.rot=ship.world.forward;d_()if not flightModeDb then bx(\"[E] No databank found!\")else local e0={[true]=1,[false]=0}local e1={[1]=true,[0]=false}bx(\"[I] Databank found.\")if not flightModeDb.hasKey(\"dockingMode\")or updateSettings then flightModeDb.setIntValue(\"dockingMode\",dockingMode)end;dockingMode=clamp(flightModeDb.getIntValue(\"dockingMode\"),1,3)if not flightModeDb.hasKey(\"activateFFonStart\")or updateSettings then flightModeDb.setIntValue(\"activateFFonStart\",e0[setactivateFFonStart==true])end;activateFFonStart=e1[flightModeDb.getIntValue(\"activateFFonStart\")]if not flightModeDb.hasKey(\"lockVerticalToBase\")or updateSettings then flightModeDb.setIntValue(\"lockVerticalToBase\",e0[lockVerticalToBase==true])end;lockVerticalToBase=e1[flightModeDb.getIntValue(\"lockVerticalToBase\")]if not flightModeDb.hasKey(\"pocket\")or updateSettings then flightModeDb.setIntValue(\"pocket\",e0[setpocket==true])end;pocket=e1[flightModeDb.getIntValue(\"pocket\")]verticalSpeedLimitAtmo=clamp(verticalSpeedLimitAtmo or 1080,0,1100)if not flightModeDb.hasKey(\"verticalSpeedLimitAtmo\")or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitAtmo\",verticalSpeedLimitAtmo)ship.verticalSpeedLimitAtmo=verticalSpeedLimitAtmo end;ship.verticalSpeedLimitAtmo=flightModeDb.getFloatValue(\"verticalSpeedLimitAtmo\")verticalSpeedLimitSpace=clamp(verticalSpeedLimitSpace or 4000,100,10000)if not flightModeDb.hasKey(\"verticalSpeedLimitSpace\")or updateSettings then flightModeDb.setFloatValue(\"verticalSpeedLimitSpace\",verticalSpeedLimitSpace)ship.verticalSpeedLimitSpace=verticalSpeedLimitSpace end;ship.verticalSpeedLimitSpace=flightModeDb.getFloatValue(\"verticalSpeedLimitSpace\")approachSpeed=clamp(approachSpeed or 200,50,300)if not flightModeDb.hasKey(\"approachSpeed\")or updateSettings then flightModeDb.setFloatValue(\"approachSpeed\",approachSpeed)ship.approachSpeed=approachSpeed end;ship.approachSpeed=flightModeDb.getFloatValue(\"approachSpeed\")altHoldPreset1=clamp(tonumber(altHoldPreset1)or 0,0,200000000)altHoldPreset2=clamp(tonumber(altHoldPreset2)or 0,0,200000000)altHoldPreset3=clamp(tonumber(altHoldPreset3)or 0,0,200000000)altHoldPreset4=clamp(tonumber(altHoldPreset4)or 0,0,200000000)if not flightModeDb.hasKey(\"altHoldPreset1\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset1\",altHoldPreset1)ship.altHoldPreset1=altHoldPreset1 else ship.altHoldPreset1=flightModeDb.getFloatValue(\"altHoldPreset1\")end;if not flightModeDb.hasKey(\"altHoldPreset2\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset2\",altHoldPreset2)ship.altHoldPreset2=altHoldPreset2 else ship.altHoldPreset2=flightModeDb.getFloatValue(\"altHoldPreset2\")end;if not flightModeDb.hasKey(\"altHoldPreset3\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset3\",altHoldPreset3)ship.altHoldPreset3=altHoldPreset3 else ship.altHoldPreset3=flightModeDb.getFloatValue(\"altHoldPreset3\")end;if not flightModeDb.hasKey(\"altHoldPreset4\")or updateSettings then flightModeDb.setFloatValue(\"altHoldPreset4\",altHoldPreset4)ship.altHoldPreset4=altHoldPreset4 else ship.altHoldPreset4=flightModeDb.getFloatValue(\"altHoldPreset4\")end;if flightModeDb.hasKey(\"BaseLocX\")then ship.baseLoc=readVecFromDb(\"BaseLoc\")if flightModeDb.hasKey(\"BaseRotX\")then ship.rot=readVecFromDb(\"BaseRot\")else config.setBaseActive=true end else config.setBaseActive=true end end end;function ElevatorInit()elevatorName=construct.getName()config.floors.floor1=ship.altHoldPreset1;config.floors.floor2=ship.altHoldPreset2;config.floors.floor3=ship.altHoldPreset3;config.floors.floor4=ship.altHoldPreset4;config.targetAlt=0;bx(\"Preset 1: \"..config.floors.floor1)bx(\"Preset 2: \"..config.floors.floor2)bx(\"Preset 3: \"..config.floors.floor3)bx(\"Preset 4: \"..config.floors.floor4)ioScheduler.defaultData=stats;ioScheduler.queueData(config)end;ElevatorScreen=function()local self={}function self.updateStats()stats.data.elevation=ship.altitude;stats.data.target=config.targetAlt;stats.data.velocity=ship.world.velocity:len()stats.data.mass=ship.mass;stats.data.gravity=ship.world.gravity:len()stats.data.target_dist=math.abs(ship.altitude-ship.altitudeHold)stats.data.brake_dist=ship.brakeDistance;stats.data.deviation=ship.deviation;stats.data.deviationVec=ship.worldToLocal(ship.deviationVec)stats.data.deviationRot=ship.worldToLocal(ship.deviationRot)stats.data.state=ship.stateMessage;stats.data.delta=nil end;self.updateStats()if screen then screen.clearScriptOutput()end;return self end()_G.BuildUnit={}local e2=_G.BuildUnit;_G.BuildSystem={}local e3=_G.BuildSystem;_G.BuildScreen={}local e4=_G.BuildScreen;_G.BuildEmitter={}local e5=_G.BuildEmitter;local bx=system.print;elevatorScreen=nil;function manualControlSwitch()local aT=config.manualControl==true;player.freeze(aT)ship.counterGravity=true;ship.frozen=not aT;ship.elevatorActive=not aT;ship.followGravity=aT;if aT then SHUD.Init(system,unit,keybindPresets[\"keyboard\"])ship.altitudeHold=ship.baseAltitude;ship.targetDestination=nil;ship.stateMessage=\"Manual Control\"config.targetAlt=ship.baseAltitude else SHUD.Init(system,unit,keybindPresets[\"screenui\"])ship.stateMessage=\"Idle\"end end;function e2.onStart()Events.Flush.Add(ship.apply)Events.Update.Add(SHUD.Update)getFuelRenderedHtml()if system.showHelper then system.showHelper(false)end;bx('Elevator 1.1.0 ===')bx('Customized by tobitege, v2024-04-30')if construct.setDockingMode(dockingMode)then bx(\"[I] Docking mode set to: \"..dockingMode)else bx(\"[W] Could not set docking mode to: \"..dockingMode)end;if telemeter then bx(\"[I] Telemeter found.\")else bx(\"[E] Telemeter not found!\")end;if screen then bx(\"[I] Screen found.\")else bx(\"[E] No screen found!\")end;STEC_configInit()ship.elevatorActive=false;config.manualControl=true;local aq=ship.nearestPlanet;if screen and telemeter and flightModeDb then if not aq then bx'[E] Elevator disabled: no planetary body as gravity well!'else if setBaseOnStart then setBase()end;if config.setBaseActive or not vec3.isvector(ship.baseLoc)then config.setBaseActive=false;config.rtb=aq:getAltitude(ship.world.position)bx(\"[I] No base location set, using current location!\")else config.rtb=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ship.baseAltitude=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)bx(\"Base location: \"..tostring(ship.baseLoc))end;if ship.baseLoc and ship.baseLoc~=vec3()then aq=helios:closestBody(ship.baseLoc)if aq then config.manualControl=false;ship.altitudeHold=aq:getAltitude(ship.world.position)ship.baseAltitude=aq:getAltitude(ship.baseLoc)elevatorScreen=ElevatorScreen;bx(\"[I] Altitude: \"..round2(ship.baseAltitude,2))end end;if not elevatorScreen then bx'[E] Elevator disabled: no body of gravity influence!'end end else bx'[E] Elevator disabled: elements missing!'bx'Check links for core, databank, telemeter and a screen!'end;if vec3.isvector(ship.baseLoc)and ship.baseLoc~=vec3()then bx(\"Base: \"..tostring(ship.baseLoc))bx(\"Map location: \"..tostring(ship.nearestPlanet:convertToMapPosition(ship.baseLoc)))end;ship.brake=true;if elevatorScreen then ElevatorInit()else ship.throttle=0;ship.verticalLock=false;ship.followGravity=true;ship.inertialDampening=true end;if ship.isLanded then bx(\"Landed.\")end;if emitter then bx(\"[I] Emitter range: \"..emitter.getRange())end;if activateFFonStart and manualSwitches and next(manualSwitches)~=nil then for G,dS in ipairs(manualSwitches)do dS.activate()end end;manualControlSwitch()if ship.isLanded then bx('Ground: '..round2(ship.GrndDist,2)..'m')end;unit.setTimer(\"SHUDRender\",0.02)unit.setTimer(\"FuelStatus\",3)unit.setTimer(\"DockingTrigger\",1)if laser then laser.deactivate()end;if showDockingWidget then parentingPanelId=system.createWidgetPanel(\"Docking\")parentingWidgetId=system.createWidget(parentingPanelId,\"parenting\")system.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)end end;function e2.onStop()if next(manualSwitches)~=nil then for G,dS in ipairs(manualSwitches)do dS.deactivate()end end;if next(forceFields)~=nil then for G,dS in ipairs(forceFields)do dS.retract()end end;config.shutDown=true;if screen then screen.setScriptInput(serialize(config))end;system.showScreen(false)if laser~=nil then laser.deactivate()end end;function e2.onTimer(e6)if e6==\"SHUDRender\"then if SHUD then SHUD.Render()end elseif e6==\"FuelStatus\"then getFuelRenderedHtml()elseif e6==\"DockingTrigger\"then local e7;if telemeter then e7=telemeter.raycast().distance end;if ship.dockingClamps then if laser~=nil then laser.activate()end;if e7 and e7>0 and e7<1 then if ship.autoShutdown and not config.manualControl then bx(ship.altitude)unit.exit()end end end end end;function e3.onActionStart(dg)keybindPresets[keybindPreset].Call(dg,\"down\")end;function e3.onActionStop(dg)keybindPresets[keybindPreset].Call(dg,\"up\")end;function e3.onInputText(dg)if DUTTY then DUTTY.input(dg)end end;function e3.onActionLoop(dg)end;function e3.onUpdate()ioScheduler.update()if elevatorScreen then elevatorScreen.updateStats()end;if Events then Events.Update()end;if TaskManager then TaskManager.Update()end end;function e3.onFlush()if Events then Events.Flush()end end;function e5.onSent(e8,e9,ea)bx(\"Sent: \"..e8 ..\" | \"..e9)end;function e4.onMouseUp(b4,b5,ea)end;function e4.onMouseDown(b4,b5,ea)end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "_G.BuildUnit.onStart()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "_G.BuildUnit.onStop()",
      "filter": {
        "args": [],
        "signature": "onStop",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "_G.BuildSystem.onActionStart(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStart(action)",
        "slotKey": "-2"
      },
      "key": "3"
    },
    {
      "code": "_G.BuildSystem.onActionStop(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStop(action)",
        "slotKey": "-2"
      },
      "key": "4"
    },
    {
      "code": "_G.BuildSystem.onInputText(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onInputText(action)",
        "slotKey": "-2"
      },
      "key": "5"
    },
    {
      "code": "_G.BuildSystem.onUpdate()",
      "filter": {
        "args": [],
        "signature": "onUpdate",
        "slotKey": "-2"
      },
      "key": "6"
    },
    {
      "code": "_G.BuildSystem.onFlush()",
      "filter": {
        "args": [],
        "signature": "onFlush",
        "slotKey": "-2"
      },
      "key": "7"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"SHUDRender\")",
      "filter": {
        "args": [
          {
            "variable": "SHUDRender"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "8"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"FuelStatus\")",
      "filter": {
        "args": [
          {
            "variable": "FuelStatus"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "9"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"DockingTrigger\")",
      "filter": {
        "args": [
          {
            "variable": "DockingTrigger"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "10"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "0"
      },
      "key": "11"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "0"
      },
      "key": "12"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "0"
      },
      "key": "13"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "0"
      },
      "key": "14"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "1"
      },
      "key": "15"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "1"
      },
      "key": "16"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "1"
      },
      "key": "17"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "1"
      },
      "key": "18"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "2"
      },
      "key": "19"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "2"
      },
      "key": "20"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "2"
      },
      "key": "21"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "2"
      },
      "key": "22"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "3"
      },
      "key": "23"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "3"
      },
      "key": "24"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "3"
      },
      "key": "25"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "3"
      },
      "key": "26"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "4"
      },
      "key": "27"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "4"
      },
      "key": "28"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "4"
      },
      "key": "29"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "4"
      },
      "key": "30"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "5"
      },
      "key": "31"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "5"
      },
      "key": "32"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "5"
      },
      "key": "33"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "5"
      },
      "key": "34"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "6"
      },
      "key": "35"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "6"
      },
      "key": "36"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "6"
      },
      "key": "37"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "6"
      },
      "key": "38"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "7"
      },
      "key": "39"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "7"
      },
      "key": "40"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "7"
      },
      "key": "41"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "7"
      },
      "key": "42"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "8"
      },
      "key": "43"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "8"
      },
      "key": "44"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "8"
      },
      "key": "45"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "8"
      },
      "key": "46"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "9"
      },
      "key": "47"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "9"
      },
      "key": "48"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "9"
      },
      "key": "49"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "9"
      },
      "key": "50"
    }
  ],
  "methods": [],
  "events": []
}