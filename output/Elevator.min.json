{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "10": {
      "name": "slot11",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "11": {
      "name": "slot12",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "12": {
      "name": "slot13",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "13": {
      "name": "slot14",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "14": {
      "name": "slot15",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "15": {
      "name": "slot16",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "16": {
      "name": "slot17",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "17": {
      "name": "slot18",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "18": {
      "name": "slot19",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "19": {
      "name": "slot20",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "20": {
      "name": "slot21",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "core=nil;antigrav=nil;warpDrive=nil;radarUnitAtmo=nil;radarUnitSpace=nil;flightModeDb=nil;manualSwitches={}forceFields={}lasers={}screen=nil;settingsActive=false;emitter=nil;telemeter=nil;function getElements()for a,var in pairs(_G)do if type(var)==\"table\"and var[\"getClass\"]then local b=string.lower(var[\"getClass\"]())if b==\"coreunitdynamic\"or b==\"coreunitstatic\"or b==\"coreunitspace\"then core=var end;if b==\"warpdriveunit\"then warpDrive=var;var.showWidget()end;if b==\"radarpvpatmospheric\"then radarUnitAtmo=var;radarUnitAtmo.showWidget()end;if b==\"radarpvpspace\"then radarUnitSpace=var;radarUnitSpace.showWidget()end;if b==\"databankunit\"then flightModeDb=var end;if b==\"antigravitygeneratorunit\"then antigrav=var end;if b==\"manualswitchunit\"then table.insert(manualSwitches,var)end;if b==\"forcefieldunit\"then table.insert(forceFields,var)end;if b==\"screenunit\"then screen=var end;if b==\"laseremitterunit\"then table.insert(lasers,var)end;if b==\"emitterunit\"then emitter=var end;if b==\"telemeterunit\"then telemeter=var end end end end;function toggleForceFields(c)if next(forceFields)then for a,d in ipairs(forceFields)do if c then d.deploy()else d.retract()end end end end;function toggleLasers(c)if next(lasers)then for a,e in ipairs(lasers)do if c then e.activate()else e.deactivate()end end end end;function toggleSwitches(c)if next(manualSwitches)then for a,f in ipairs(manualSwitches)do if c then f.activate()else f.deactivate()end end end end;getElements()shipName=\"\"updateSettings=false;altHoldPreset1=150000;altHoldPreset2=1000;altHoldPreset3=500;altHoldPreset4=2;deviationThreshold=0.5;inertialDampening=true;followGravity=true;minRotationSpeed=0.01;maxRotationSpeed=5;rotationStep=0.025;verticalSpeedLimitAtmo=1100;verticalSpeedLimitSpace=4000;approachSpeed=200;autoShutdown=true;breadCrumbDist=1000;ContainerOptimization=0;FuelTankOptimization=0;fuelTankHandlingAtmo=0;fuelTankHandlingSpace=0;primaryColor=\"b80000\"secondaryColor=\"e30000\"textShadow=\"e81313\"fuelFontSize=1.8;dockingMode=1;showDockingWidget=false;setBaseOnStart=false;useGEAS=false;GEAS_Alt=10;activateFFonStart=false;setactivateFFonStart=false;activateFFonStop=true;setactivateFFonStop=true;activateLasersOnStart=false;setactivateLasersOnStart=false;activateLasersOnStop=true;setactivateLasersOnStop=true;activateSwitchOnStart=false;setactivateSwitchOnStart=false;activateSwitchOnStop=false;setactivateSwitchOnStop=false;pocket=false;setpocket=false;mouseSensitivity=1;lockVerticalToBase=true;function PlanetRef()local function g(h)return type(h)=='number'end;local function i(h)return type(tonumber(h))=='number'end;local function j(t)return type(t)=='table'end;local function k(l)return type(l)=='string'end;local function m(n)return j(n)and g(n.x and n.y and n.z)end;local function o(p)return j(p)and g(p.latitude and p.longitude and p.altitude and p.bodyId and p.systemId)end;local q=math.pi/180;local r=180/math.pi;local s=1e-10;local u=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local v='::pos{'..u..','..u..','..u..','..u..','..u..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local clamp=utils.clamp;local function w(x,y)if x==0 then return math.abs(y)<1e-09 end;if y==0 then return math.abs(x)<1e-09 end;return math.abs(x-y)<math.max(math.abs(x),math.abs(y))*s end;local function z(h)local A=string.gsub(string.reverse(string.format('%.4f',h)),'^0*%.?','')return A==''and'0'or string.reverse(A)end;local function B(C)if m(C)then return string.format('{x=%.3f,y=%.3f,z=%.3f}',C.x,C.y,C.z)end;if j(C)and not getmetatable(C)then local D={}local E=next(C)if type(E)=='nil'or E==1 then for F,x in ipairs(C)do D[F]=B(x)end else for G,n in pairs(C)do local H=B(n)if type(G)=='number'then table.insert(D,string.format('[%s]=%s',G,H))else table.insert(D,string.format('%s=%s',G,H))end end end;return string.format('{%s}',table.concat(D,','))end;if k(C)then return string.format(\"[[%s]]\",C)end;return tostring(C)end;local I={}I.__index=I;I.__tostring=function(C,J)local K={}for G in pairs(C)do table.insert(K,G)end;table.sort(K)local D={}for a,G in ipairs(K)do local H=B(C[G])if type(G)=='number'then table.insert(D,string.format('[%s]=%s',G,H))else table.insert(D,string.format('%s=%s',G,H))end end;if J then return string.format('%s%s',J,table.concat(D,',\\n'..J))end;return string.format('{%s}',table.concat(D,','))end;I.__eq=function(L,M)return L.planetarySystemId==M.planetarySystemId and L.bodyId==M.bodyId and w(L.radius,M.radius)and w(L.center.x,M.center.x)and w(L.center.y,M.center.y)and w(L.center.z,M.center.z)and w(L.GM,M.GM)end;local function N(O,P,Q,R,S)assert(i(O),'Argument 1 (planetarySystemId) must be a number:'..type(O))assert(i(P),'Argument 2 (bodyId) must be a number:'..type(P))assert(i(Q),'Argument 3 (radius) must be a number:'..type(Q))assert(j(R),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(R))assert(i(S),'Argument 5 (GM) must be a number:'..type(S))return setmetatable({planetarySystemId=tonumber(O),bodyId=tonumber(P),radius=tonumber(Q),center=vec3(R),GM=tonumber(S)},I)end;local T={}T.__index=T;T.__tostring=function(U)return string.format('::pos{%d,%d,%s,%s,%s}',U.systemId,U.bodyId,z(U.latitude*r),z(U.longitude*r),z(U.altitude))end;T.__eq=function(L,M)return L.bodyId==M.bodyId and L.systemId==M.systemId and w(L.latitude,M.latitude)and w(L.altitude,M.altitude)and(w(L.longitude,M.longitude)or w(L.latitude,math.pi/2)or w(L.latitude,-math.pi/2))end;local function V(W,P,X,Y,Z)local O=W;if k(W)and not Y and not Z and not P and not X then O,P,X,Y,Z=string.match(W,v)assert(O,'Argument 1 (position string) is malformed.')else assert(i(O),'Argument 1 (systemId) must be a number:'..type(O))assert(i(P),'Argument 2 (bodyId) must be a number:'..type(P))assert(i(X),'Argument 3 (latitude) must be in degrees:'..type(X))assert(i(Y),'Argument 4 (longitude) must be in degrees:'..type(Y))assert(i(Z),'Argument 5 (altitude) must be in meters:'..type(Z))end;O=tonumber(O)P=tonumber(P)X=tonumber(X)Y=tonumber(Y)Z=tonumber(Z)if P==0 then return setmetatable({latitude=X,longitude=Y,altitude=Z,bodyId=P,systemId=O},T)end;return setmetatable({latitude=q*clamp(X,-90,90),longitude=q*(Y%360),altitude=Z,bodyId=P,systemId=O},T)end;local _={}_.__index=_;_.__tostring=function(C,J)local a0=J and J..'  'local a1={}local K={}for G in pairs(C)do table.insert(K,G)end;table.sort(K)for a,a2 in ipairs(K)do bdy=C[a2]local a3=I.__tostring(bdy,a0)if J then table.insert(a1,string.format('[%s]={\\n%s\\n%s}',a2,a3,J))else table.insert(a1,string.format('  [%s]=%s',a2,a3))end end;if J then return string.format('\\n%s%s%s',J,table.concat(a1,',\\n'..J),J)end;return string.format('{\\n%s\\n}',table.concat(a1,',\\n'))end;local function a4(a5)local a6={}local a7;for a,n in pairs(a5)do local a8=n.planetarySystemId;if a8==nil then a8=0;n.planetarySystemId=a8 end;if type(a8)~='number'then error('Invalid planetary system ID: '..tostring(a8))elseif a7 and a8~=a7 then error('Mismatch planetary system IDs: '..a8 ..' and '..a7)end;local a9=n.bodyId;if a9==nil then a9=n.id;n.bodyId=a9 end;if type(a9)~='number'then error('Invalid body ID: '..tostring(a9))elseif a6[a9]then error('Duplicate body ID: '..tostring(a9))end;n.center=vec3(n.center)a6[a9]=setmetatable(n,I)a7=a8 end;return setmetatable(a6,_)end;PlanetaryReference={}local function aa(ab)return setmetatable({galaxyAtlas=ab or{}},PlanetaryReference)end;PlanetaryReference.__index=function(t,F)if type(F)=='number'then local system=t.galaxyAtlas[F]return a4(system)end;return rawget(PlanetaryReference,F)end;PlanetaryReference.__pairs=function(C)return function(t,G)local ac,ad=next(t,G)return ac,ad and a4(ad)end,C.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(C)local ae={}for a,af in pairs(C or{})do local ag=af:getPlanetarySystemId()local ah=_.__tostring(af,'    ')table.insert(ae,string.format('  [%s]={%s\\n  }',ag,ah))end;return string.format('{\\n%s\\n}\\n',table.concat(ae,',\\n'))end;PlanetaryReference.BodyParameters=N;PlanetaryReference.MapPosition=V;PlanetaryReference.PlanetarySystem=a4;function PlanetaryReference.createBodyParameters(ai,P,aj,ak,al,am,an)assert(i(ai),'Argument 1 (planetarySystemId) must be a number:'..type(ai))assert(i(P),'Argument 2 (bodyId) must be a number:'..type(P))assert(i(aj),'Argument 3 (surfaceArea) must be a number:'..type(aj))assert(j(ak),'Argument 4 (aPosition) must be an array or vec3:'..type(ak))assert(j(al),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(al))assert(i(am),'Argument 6 (altitude) must be in meters:'..type(am))assert(i(an),'Argument 7 (gravityAtPosition) must be number:'..type(an))local Q=math.sqrt(aj/4/math.pi)local ao=Q+am;local ap=vec3(ak)+ao*vec3(al)local S=an*ao*ao;return N(ai,P,Q,ap,S)end;PlanetaryReference.isMapPosition=o;function PlanetaryReference:getPlanetarySystem(W)if self.galaxyAtlas then local ai=W;if o(W)then ai=W.systemId end;if type(ai)=='number'then local system=self.galaxyAtlas[ai]if system then if getmetatable(system)~=_ then system=a4(system)end;return system end end end;return nil end;function _:castIntersections(aq,ar,as,at)local as=as or function(au)return 1.05*au.radius end;local av={}if at then for a,F in ipairs(at)do av[F]=self[F]end else at={}for G,au in pairs(self)do table.insert(at,G)av[G]=au end end;local function aw(ax,ay)local az=av[ax].center-aq;local aA=av[ay].center-aq;return az:len()<aA:len()end;table.sort(at,aw)local aB=ar:normalize()for F,a8 in ipairs(at)do local au=av[a8]local aC=au.center-aq;local Q=as(au)local aD=aC:dot(aB)local aE=aD^2-(aC:len2()-Q^2)if aE>=0 then local aF=math.sqrt(aE)local aG=aD+aF;local aH=aD-aF;if aH>0 then return au,aG,aH elseif aG>0 then return au,aG,nil end end end;return nil,nil,nil end;function _:closestBody(aI)assert(type(aI)=='table','Invalid coordinates.')local aJ,au;local aK=vec3(aI)for a,aL in pairs(self)do local aM=aL.center-aK:len2()if not au or aM<aJ then au=aL;aJ=aM end end;return au end;function _:convertToBodyIdAndWorldCoordinates(W)local aN=W;if k(W)then aN=V(W)end;if aN.bodyId==0 then return 0,vec3(aN.latitude,aN.longitude,aN.altitude)end;local aL=self:getBodyParameters(aN)if aL then return aN.bodyId,aL:convertToWorldCoordinates(aN)end end;function _:getBodyParameters(W)local P=W;if o(W)then P=W.bodyId end;assert(i(P),'Argument 1 (bodyId) must be a number:'..type(P))return self[P]end;function _:getPlanetarySystemId()local a,n=next(self)return n and n.planetarySystemId end;function _:netGravity(aI)assert(type(aI)=='table','Invalid coordinates.')local aO=vec3()local aK=vec3(aI)local aP,au;for a,aL in pairs(self)do local aQ=aL.center-aK;local aR=aQ:len2()local aS=aL.GM/aR;if not au or aS>aP then au=aL;aP=aS end;aO=aO+aS/math.sqrt(aR)*aQ end;return au,aO end;function I:convertToMapPosition(R)assert(j(R),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(R))local aT=vec3(R)if self.bodyId==0 then return setmetatable({latitude=aT.x,longitude=aT.y,altitude=aT.z,bodyId=0,systemId=self.planetarySystemId},T)end;local aU=aT-self.center;local ao=aU:len()local Z=ao-self.radius;local X=0;local Y=0;if not w(ao,0)then local aV=math.atan(aU.y,aU.x)Y=aV>=0 and aV or 2*math.pi+aV;X=math.pi/2-math.acos(aU.z/ao)end;return setmetatable({latitude=X,longitude=Y,altitude=Z,bodyId=self.bodyId,systemId=self.planetarySystemId},T)end;function I:convertToWorldCoordinates(W)local aN=k(W)and V(W)or W;if aN.bodyId==0 then return vec3(aN.latitude,aN.longitude,aN.altitude)end;assert(o(aN),'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')assert(aN.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(aN.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local aW=math.cos(aN.latitude)return self.center+(self.radius+aN.altitude)*vec3(aW*math.cos(aN.longitude),aW*math.sin(aN.longitude),math.sin(aN.latitude))end;function I:getAltitude(R)return vec3(R)-self.center:len()-self.radius end;function I:getDistance(R)return vec3(R)-self.center:len()end;function I:getGravity(R)local aQ=self.center-vec3(R)local aR=aQ:len2()return self.GM/aR*aQ/math.sqrt(aR)end;return setmetatable(PlanetaryReference,{__call=function(a,...)return aa(...)end})end;function Kinematics()local x={}local y=30000000/3600;local aX=y*y;local aY=100;local function aZ(a_)return 1/math.sqrt(1-a_*a_/aX)end;function x.computeAccelerationTime(aS,b0,F)local b1=y*math.asin(aS/y)return(y*math.asin(F/y)-b1)/b0 end;function x.computeDistanceAndTime(aS,F,G,b2,p,h)p=p or 0;h=h or 0;local b3=aZ(aS)local U=aS<=F;local b4=b2*(U and 1 or-1)/G;local b5=-h/G;local l=b4+b5;if U and l<=0 or not U and l>=0 then return-1,-1 end;local t,b6=0,0;if b4~=0 and p>0 then local b1=math.asin(aS/y)local n=math.pi*(b4/2+b5)local b7=b4*p;local b8=y*math.pi;local a_=function(b9)local ba=(n*b9-b7*math.sin(math.pi*b9/2/p)+b8*b1)/b8;local bb=math.tan(ba)return y*bb/math.sqrt(bb*bb+1)end;local bc=U and function(bd)return bd>=F end or function(bd)return bd<=F end;b6=2*p;if bc(a_(b6))then local be=0;while math.abs(b6-be)>0.5 do local b9=(b6+be)/2;if bc(a_(b9))then b6=b9 else be=b9 end end end;local bf=aS;local bg=b6/aY;for bh=1,aY do local bi=a_(bh*bg)t=t+(bi+bf)*bg/2;bf=bi end;if b6<2*p then return t,b6 end;aS=bf end;local b1=y*math.asin(aS/y)local bj=(y*math.asin(F/y)-b1)/l;local bk=aX*math.cos(b1/y)/l;local bl=bk-aX*math.cos((l*bj+b1)/y)/l;return bl+t,bj+b6 end;function x.computeTravelTime(aS,b0,bl)if bl==0 then return 0 end;if b0>0 then local b1=y*math.asin(aS/y)local bk=aX*math.cos(b1/y)/b0;return(y*math.acos(b0*(bk-bl)/aX)-b1)/b0 end;assert(aS>0,'Acceleration and initial speed are both zero.')return bl/aS end;function x.lorentz(a_)return aZ(a_)end;return x end;local bm=table.concat;local bn=string.format;local function bo(n,bp,t)local bq=type(n)local br=bo;if bq=='table'then t[bp]='{'local bs=bp+1;if#n==0 then for G,aZ in pairs(n)do if type(G)~='number'then t[bs]=G;t[bs+1]='='bs=bs+2 else t[bs]='['t[bs+1]=G;t[bs+2]=']='bs=bs+3 end;bs=br(aZ,bs,t)t[bs]=','bs=bs+1 end else for G,aZ in pairs(n)do bs=br(aZ,bs,t)t[bs]=','bs=bs+1 end end;if bs==bp+1 then t[bs]='}'return bs+1 else t[bs-1]='}'return bs end elseif bq=='string'then t[bp]=bn(\"%q\",n)return bp+1 elseif bq=='number'then t[bp]=tostring(n)return bp+1 else t[bp]=n and'true'or'false'return bp+1 end end;function serialize(n)local t={}local bp=1;local bq=type(n)local br=bo;if bq=='table'then t[bp]='{'bp=bp+1;local bs=bp;if#n==0 then for G,aZ in pairs(n)do if type(G)~='number'then t[bs]=G;t[bs+1]='='bs=bs+2 else t[bs]='['t[bs+1]=G;t[bs+2]=']='bs=bs+3 end;bs=br(aZ,bs,t)t[bs]=','bs=bs+1 end else for G,aZ in pairs(n)do bs=br(aZ,bs,t)t[bs]=','bs=bs+1 end end;if bs==bp then t[bs]='}'else t[bs-1]='}'end elseif bq=='string'then t[bp]=bn(\"%q\",n)elseif bq=='number'then t[bp]=tostring(n)else t[bp]=n and'true'or'false'end;return bm(t)end;function deserialize(l)local a_=load('t='..l)a_()return t end;function tryDeserialize(l)local a_=load('t='..l)if a_ then a_()return true,t else return false end end;function mToKm(h)if h>=10000 then return round2(h/1000,2)..\" km\"end;return round2(h,2)..\" m\"end;function round2(u,bt)if u~=nil then return tonumber(string.format(\"%.\"..(bt or 0)..\"f\",u))end end;config={dataType=\"config\",floors={floor1=0,floor2=0,floor3=0,floor4=0},elevatorName=construct.getName(),rtb=0,targetAlt=0,estop=false,settingsActive=false,setBaseActive=false,setBaseReq=false,manualControl=false,destination=nil,shutDown=false,updateReq=false}stats={dataType=\"stats\",data={elevation=0,target=config.targetAlt,velocity=0,mass=0,gravity=0,target_dist=0,brake_dist=0,deviation=0,deviationVec=vec3(),deviationRot=vec3(),deviationRotAngle=0,state=\"Idle\",delta=0,grounddistance=0,base=nil,agl=0}}fuelAtmo={dataType=\"fuelAtmo\",tanks={}}fuelSpace={dataType=\"fuelSpace\",tanks={}}function fuelTank(bu,bv)local bw={}bw.__index=bw;return setmetatable({tm=bu,pct=bv},bw)end;function EventDelegate()local x={}x.Delegates={}function x.Add(y)if type(y)~=\"function\"then error(\"[EventDelegate] Unable to add callback - not a function\")return end;for aX=1,#x.Delegates do if x.Delegates[aX]==y then return false end end;table.insert(x.Delegates,y)return true end;function x.Remove(y)if type(y)~=\"function\"then error(\"[EventDelegate] Unable to remove callback - not a function\")return end;for aX=1,#x.Delegates do if x.Delegates[aX]==y then table.remove(x.Delegates,aX)return true end end;return false end;function x.Call(...)for aX=1,#x.Delegates do x.Delegates[aX](...)end end;function x.Count()return#x.Delegates end;setmetatable(x,{__call=function(aY,...)x.Call(...)end,__add=function(aZ,a_)if aZ==x then x.Add(a_)return x end;if a_==x then x.Add(aZ)return x end;return x end,__sub=function(aZ,a_)if aZ==x then x.Remove(a_)return x end;if a_==x then x.Remove(aZ)return x end;return x end,__tostring=function()return\"EventDelegate(#\"..#x.Delegates..\")\"end})return x end;Events={Update=EventDelegate(),Flush=EventDelegate()}TaskManager=function()local self={}self.Stack={}function self.Register(x)if not x.Coroutine then error(\"[TaskManager] Trying to register a non-Task\")end;table.insert(self.Stack,x)end;function self.Update()for y=1,#self.Stack do local x=self.Stack[y]if x and x.Coroutine~=nil then if coroutine.status(x.Coroutine)~=\"dead\"then local aX,aY=coroutine.resume(x.Coroutine)x.Error=not aX;x.LastReturn=aY else table.remove(self.Stack,y)if x.Error and x._Catch then x._Catch(x.LastReturn)elseif x._Then~=nil then x._Then(x.LastReturn)end;if x._Finally~=nil then x._Finally()end;x.Finished=true end end end end;return self end()function Task(aZ)local self={}self.LastReturn=nil;self.Error=nil;self.Finished=false;if type(aZ)~=\"function\"then error(\"[Task] Not a function.\")end;self.Coroutine=coroutine.create(aZ)function self.Then(aZ)if type(aZ)~=\"function\"then error(\"[Task] Then callback not a function.\")end;self._Then=aZ;return self end;function self.Finally(aZ)if type(aZ)~=\"function\"then error(\"[Task] Finally callback not a function.\")end;self._Finally=aZ;return self end;function self.Catch(aZ)if type(aZ)~=\"function\"then error(\"[Task] Catch callback not a function.\")end;self._Catch=aZ;return self end;TaskManager.Register(self)return self end;function await(x)if not x or not x.Coroutine then error(\"Trying to await non-task object\")end;while not x.Finished do coroutine.yield()end;return x.LastReturn end;function DynamicDocument(x)local self={}self.template=x or\"\"local y=\"\"local aX={}self.tree={}local aY={br=true,hr=true,img=true,embed=true,param=true,area=true,col=true,input=true,meta=true,link=true,base=true,basefont=true,iframe=true,isindex=true,circle=true,polygon=true,polyline=true,ellipse=true,path=true,line=true,rect=true,use=true}function table.indexOf(val,table)for aZ,a_ in ipairs(table)do if a_==val then return aZ end end;return nil end;function self.makeFunc(string)local val=\"nil\"if aX[string]==nil then local aS,b0=pcall(load(\"return function() return \"..string..\" end\",nil,\"t\",_ENV))if aS then aX[string]=b0;val=b0()if type(val)==\"function\"then aX[string]=b0()val=val()end end else val=aX[string]()end;return val end;local function F(x)local b1=0;local G={}local b2={}b2.dd={}table.insert(G,b2)local node={}for p,h,b3,U,b4,b5,val,l in string.gmatch(x,\"(<)(%/?!?)([%w:_-'\\\\\\\"%[]+)(.-)(%/?%-?)>([%s\\r\\n\\t]*)([^<]*)([%s\\r\\n\\t]*)\")do b3=string.lower(b3)if h==\"/\"then if b1==0 then return b2 end;b1=b1-1;table.remove(G)else local function t(b6)local n=\"dd-\"return b6:sub(1,#n)==n end;b1=b1+1;node={}node.name=b3;node.children={}node.attr={}if G[b1-1]then node.parent=G[b1-1][#G[b1-1]]else node.parent=nil end;if U~=\"\"then for b7,a_ in string.gmatch(U,\"%s([^%s=]+)=\\\"([^\\\"]+)\\\"\")do node.attr[b7]=string.gsub(a_,'\"','[^\\\\]\\\\\"')if t(b7)then if not b2.dd[b7]then b2.dd[b7]={}end;table.insert(b2.dd[b7],node)end end;for b7,a_ in string.gmatch(U,\"%s([^%s=]+)='([^']+)'\")do node.attr[b7]=string.gsub(a_,'\"','[^\\\\]\\\\\"')if t(b7)then if not b2.dd[b7]then b2.dd[b7]={}end;table.insert(b2.dd[b7],node)end end end;if not G[b1]then G[b1]={}end;table.insert(G[b1],node)if aY[b3]then if val~=\"\"then table.insert(G[b1],{name=\"textNode\",value=val})end;node.children={}b1=b1-1 else if val~=\"\"then table.insert(node.children,{name=\"textNode\",value=val})end;table.insert(G,node.children)end end end;return b2 end;local function b8(b9,ba)local G={b9}local bb=\"\"local function bc(bd)local be=0;for bf in pairs(bd)do be=be+1 end;return be end;if not ba and bc(b9.dd)>0 then if b9.dd[\"dd-repeat\"]then for bg=#b9.dd[\"dd-repeat\"],1,-1 do local node=b9.dd[\"dd-repeat\"][bg]var,array=string.match(node.attr[\"dd-repeat\"],\"(.*) in (.*)\")node.attr[\"dd-repeat\"]=nil;local bh=b8({node},true)local bi=string.gmatch(bh,\"{{([^}}]+)}}\")local bj={}for bk in bi do if string.match(bk,var)then table.insert(bj,bk)end end;local y=\"\"local bl=self.makeFunc(array)for bg=1,#bl do _ENV[var]=bl[bg]local bx=bh;local by=F(bx:gsub(\"^%s*(.-)%s*$\",\"%1\"))y=y..b8(by)end;node.children={}node.name=\"textNode\"node.value=y end end;if b9.dd[\"dd-if\"]then for bg=#b9.dd[\"dd-if\"],1,-1 do local node=b9.dd[\"dd-if\"][bg]local bz=self.makeFunc(node.attr[\"dd-if\"])if bz then node.attr[\"dd-if\"]=nil else local bA=table.indexOf(node,node.parent.children)if bA then table.remove(node.parent.children,bA)end;node=nil;table.remove(b9.dd[\"dd-if\"],bg)b9.dd[\"dd-if\"][bg]=nil end end end;if b9.dd[\"dd-init\"]then for bg=#b9.dd[\"dd-init\"],1,-1 do local node=b9.dd[\"dd-init\"][bg]pcall(load(node.attr[\"dd-init\"],nil,\"t\",_ENV))node.attr[\"dd-init\"]=nil end end end;while#G~=0 do node=G[#G][1]if not node then break end;if node.name==\"textNode\"then local val=node.value:gsub(\"^%s*(.-)%s*$\",\"%1\")if not ba then val=self.transformClosures(val)end;bb=bb..val else bb=bb..\"\\n\"..string.rep(\" \",#G-1)bb=bb..\"<\"..node.name;if node.attr then for bB,a_ in pairs(node.attr)do if not ba then bB=self.transformClosures(bB)a_=self.transformClosures(a_)end;bb=bb..\" \"..bB..'=\"'..a_..'\"'end end;if aY[node.name]then bb=bb..\"/>\"else bb=bb..\">\"end end;if node.children and#node.children>0 then table.insert(G,node.children)else table.remove(G[#G],1)if node.children and#node.children==0 and not aY[node.name]and not node.name==\"textNode\"then bb=bb..\"</\"..node.name..\">\"end;while#G>0 and#G[#G]==0 do table.remove(G)if#G>0 then if#G[#G][1].children>1 then bb=bb..\"\\n\"..string.rep(\" \",#G-1)..\"</\"..G[#G][1].name..\">\"else bb=bb..\"</\"..G[#G][1].name..\">\"end;table.remove(G[#G],1)end end end end;return bb:match\"^%s*(.-)%s*$\"end;function self.transformClosures(bC)local bD={}local bE=string.gmatch(bC,\"{{([^}}]+)}}\")for bg in bE do table.insert(bD,bg)end;if#bD>0 then for bg=1,#bD do local bF=bD[bg]val=self.makeFunc(bF)bC=string.gsub(bC,self.literalize(\"{{\"..bF..\"}}\"),tostring(val))end end;return bC end;function self.literalize(b6)return b6:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\",function(bk)return\"%\"..bk end)end;function self.Read()return b8(F(self.template))end;return self end;DUTTY={}local x={}local y={}local function aX(aY,aZ)return aY:sub(aZ,aZ)end;local function a_(aY)local aS={}local b0=false;local F=''local b1=false;for G=1,#aY do local b2=aX(aY,G)if b1==false and b0 and b2==b0 then table.insert(aS,F)b0=false;F=''elseif b1==false and#F==0 and(not b0 and(b2=='\"'or b2==\"'\"))then b0=b2 elseif b1==false and b2==' 'and b0==false then if#F>0 then table.insert(aS,F)F=''end elseif b1==false and b2=='\\\\'then b1=true else if b1 then b1=false end;F=F..b2 end end;if#F>0 then table.insert(aS,F)end;return aS end;function DUTTY.input(aY)for G,p in pairs(x)do if'function'==type(p)then p(aY)end end;local h=a_(aY)if#h>0 then local b3=''local U={}for G,aY in pairs(h)do if G==1 then b3=aY:lower()else table.insert(U,aY)end end;if y[b3]and'function'==type(y[b3])then y[b3](table.unpack(U))end end end;function DUTTY.onInput(p)if not'function'==type(p)then error('Event handler must be of type function')end;table.insert(x,p)end;function DUTTY.onCommand(aS,p)if not'function'==type(p)then error('Event handler must be of type function')end;y[aS:lower()]=p end;fuelTanks={}FuelMass={}FuelTime={}fuelTypes={atmo={density=4.000},space={density=6.000},rocket={density=0.800}}local function bG(bH)if fuelTankHandlingAtmo>0 then return bH+bH*fuelTankHandlingAtmo*0.2 end;return bH end;local function bI(bH)if fuelTankHandlingSpace>0 then return bH+bH*fuelTankHandlingSpace*0.2 end;return bH end;local function bJ(bK,type)local bL=bK*fuelTypes[type].density;local bM=bL;if ContainerOptimization>0 then bM=bL-bL*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bM=bM-bL*FuelTankOptimization*0.05 end;return bM end;function normalizeHp(type,bN)local bO=0;if type==\"atmo\"then if bN>=50 and bN<163 then bO=50 elseif bN>=163 and bN<1315 then bO=163 elseif bN>=1315 and bN<10461 then bO=1315 elseif bN>=10461 then bO=10461 end elseif type==\"space\"then if bN>=50 and bN<187 then bO=50 elseif bN>=187 and bN<1496 then bO=187 elseif bN>=1496 and bN<15933 then bO=1496 elseif bN>=15933 then bO=15933 end elseif type==\"rocket\"then if bN>=366 and bN<736 then bO=366 elseif bN>=736 and bN<6231 then bO=736 elseif bN>=6231 and bN<68824 then bO=6231 elseif bN>=68824 then bO=68824 end end;return bO end;function normalizeHpAtmo(bN)end;function normalizeHpSpace(bN)end;function normalizeHpRocket(bN)end;fuelTankSpecsByMaxHP={atmo={_50={type=\"atmo\",size=\"XS\",capacity=function()return bG(100)end,baseWeight=35.030,maxWeight=function()return bJ(bG(100),\"atmo\")end},_163={type=\"atmo\",size=\"S\",capacity=function()return bG(400)end,baseWeight=182.670,maxWeight=function()return bJ(bG(400),\"atmo\")end},_1315={type=\"atmo\",size=\"M\",capacity=function()return bG(1600)end,baseWeight=988.670,maxWeight=function()return bJ(bG(1600),\"atmo\")end},_10461={type=\"atmo\",size=\"L\",capacity=function()return bG(12800)end,baseWeight=5480.000,maxWeight=function()return bJ(bG(12800),\"atmo\")end}},space={_50={type=\"space\",size=\"XS\",capacity=function()return bG(100)end,baseWeight=35.030,maxWeight=function()return bJ(bG(100),\"space\")end},_187={type=\"space\",size=\"S\",capacity=function()return bI(400)end,baseWeight=182.670,maxWeight=function()return bJ(bG(400),\"space\")end},_1496={type=\"space\",size=\"M\",capacity=function()return bI(1600)end,baseWeight=988.670,maxWeight=function()return bJ(bG(1600),\"space\")end},_15933={type=\"space\",size=\"L\",capacity=function()return bI(12800)end,baseWeight=5480.000,maxWeight=function()return bJ(bG(12800),\"space\")end}},rocket={_366={type=\"rocket\",size=\"XS\",capacity=function()return 400 end,baseWeight=173.420,maxWeight=function()return bJ(bG(400),\"rocket\")end},_736={type=\"rocket\",size=\"S\",capacity=function()return 800 end,baseWeight=886.720,maxWeight=function()return bJ(bG(800),\"rocket\")end},_6231={type=\"rocket\",size=\"M\",capacity=function()return 6400 end,baseWeight=4720.000,maxWeight=function()return bJ(bG(6400),\"rocket\")end},_68824={type=\"rocket\",size=\"L\",capacity=function()return 50000 end,baseWeight=25740.000,maxWeight=function()return bJ(bG(50000),\"rocket\")end}}}local function bP(H)return H==math.huge or H==-math.huge end;local function bQ(H)return H~=H end;function disp_time(bR)if bP(bR)or bQ(bR)then return\"-:-\"end;local bS=math.floor(bR/86400)local bT=math.floor(math.fmod(bR,86400)/3600)local bU=math.floor(math.fmod(bR,3600)/60)local bV=math.floor(math.fmod(bR,60))if bR>=86400 then return string.format(\"%dd:%02dh\",bS,bT)elseif bR<86400 and bR>3600 then return string.format(\"%02dh:%02dm:%02ds\",bT,bU,bV)elseif bR<3600 and bR>60 then return string.format(\"%02dm:%02ds\",bU,bV)else return string.format(\"%02ds\",bV)end end;local bW=table.unpack;function fuelUsed(bX)local t={}function sum(x,...)if x then return x-sum(...)else return 0 end end;function average(h)if#t==bX then table.remove(t,1)end;if h~=0 and h~=nil then t[#t+1]=h end;return sum(bW(t))end;return average end;local function bY(bZ)if next(bZ)then table.sort(bZ,function(x,y)return x.name<y.name end)end end;function getFuelSituation()local bZ={atmo={},space={},rocket={}}for a8,b_ in pairs(fuelTanks)do table.insert(bZ[b_.type],{name=core.getElementNameById(a8),level=getFuelTankLevel(a8),time=getFuelTime(a8),specs=b_})end;bY(bZ.atmo)bY(bZ.space)bY(bZ.rocket)return bZ end;function getFuelTankSpecs(c0,c1)local c2=math.floor(core.getElementMaxHitPointsById(c1))return fuelTankSpecsByMaxHP[c0]['_'..normalizeHp(c0,c2)]end;function getFuelTankLiters(c1)local c3=fuelTanks[c1]local c4=core.getElementMassById(c1)local c5=c4-c3.baseWeight;return c5 end;function getFuelTankLevel(c1)local c3=fuelTanks[c1]local bM=c3.maxWeight()return getFuelTankLiters(c1)/bM end;function getFuelTime(c1)local c3=fuelTanks[c1]local c6=FuelTime[c1]or system.getArkTime()local c7=math.max(system.getArkTime()-c6,0.001)local c4=core.getElementMassById(c1)local c8=c3.baseWeight;local fuelUsed=FuelMass[c1](c4)local c9=c7/fuelUsed*(c4-c8)local ca=disp_time(c9)FuelTime[c1]=system.getArkTime()return ca end;function getFuelTanks()local cb=core.getElementIdList()for G,cc in pairs(cb)do local cd=core.getElementDisplayNameById(cc)if cd==\"Atmospheric Fuel Tank\"then local ce=getFuelTankSpecs(\"atmo\",cc)fuelTanks[cc]=ce;FuelMass[cc]=fuelUsed(2)elseif cd==\"Space Fuel Tank\"then fuelTanks[cc]=getFuelTankSpecs(\"space\",cc)FuelMass[cc]=fuelUsed(2)elseif cd==\"Rocket Fuel Tank\"then fuelTanks[cc]=getFuelTankSpecs(\"rocket\",cc)FuelMass[cc]=fuelUsed(2)end end end;getFuelTanks()function Keybind(x)local self={}self.Key=x;local y={}function self.Add(aX,aY)if type(aX)~=\"function\"then error(\"[Keybind] Unable to add callback - not a function\")end;table.insert(y,{Function=aX,Name=aY})end;function self.Remove(aX)if type(aX)~=\"function\"then error(\"[Keybind] Unable to remove callback - not a function\")end;local aZ={}for a_,aS in pairs(y)do aZ[aS.Function]=a_ end;for a_,aS in pairs(aZ)do if a_==aX then y[aS]=nil end end end;function self.GetNames()local b0={}for a_,aS in pairs(y)do if aS.Name then table.insert(b0,aS.Name)end end;return b0 end;function self.Call()for a_,aS in pairs(y)do aS.Function(self.Key)end end;return self end;function KeybindController()local self={}local F={\"forward\",\"backward\",\"left\",\"right\",\"yawleft\",\"yawright\",\"up\",\"down\",\"gear\",\"light\",\"landing\",\"brake\",\"option1\",\"option2\",\"option3\",\"option4\",\"option5\",\"option6\",\"option7\",\"option8\",\"option9\",\"stopengines\",\"speedup\",\"speeddown\",\"antigravity\",\"booster\",\"lshift\",\"lalt\",\"lalt\",\"strafeleft\",\"straferight\"}self.keyUp={}self.keyDown={}self.keyLoop={}function self.Call(b1,type)if type==\"up\"then if self.keyUp[b1]then self.keyUp[b1].Call(b1)end elseif type==\"down\"then if self.keyDown[b1]then self.keyDown[b1].Call(b1)end else if self.keyLoop[b1]then self.keyDown[b1].Call(b1)end;system.print(b1)end end;function self.GetNamedKeybinds()local b0={}for a_,aS in pairs(self.keyUp)do local G=aS.GetNames()if#G>0 then for b2=1,#G do table.insert(b0,{Key=aS.Key,Name=G[b2]})end end end;for a_,aS in pairs(self.keyDown)do local G=aS.GetNames()if#G>0 then for b2=1,#G do table.insert(b0,{Key=aS.Key,Name=G[b2]})end end end;for a_,aS in pairs(self.keyLoop)do local G=aS.GetNames()if#G>0 then for b2=1,#G do table.insert(b0,{Key=aS.Key,Name=G[b2]})end end end;table.sort(b0,function(p,h)return p.Key<h.Key end)return b0 end;self.Init=function()end;local function b3()for b2=1,#F do self.keyUp[F[b2]]=Keybind(F[b2])self.keyDown[F[b2]]=Keybind(F[b2])self.keyLoop[F[b2]]=Keybind(F[b2])end end;b3()return self end;keybindPresets={}IOScheduler=function()local self={}self.defaultData=nil;self.currentTask=nil;self.taskQueue={}function self.queueData(cf)table.insert(self.taskQueue,cf)end;function self.send(bF)if not screen then return end;output=screen.getScriptOutput()screen.clearScriptOutput()if output~=\"ack\"then if output and output~=\"\"then handleOutput.Read(output)end;coroutine.yield()self.send(bF)else screen.setScriptInput(serialize(bF))end end;function self.runQueue()if#self.taskQueue==0 then if self.defaultData~=nil then self.currentTask=coroutine.create(function()self.send(self.defaultData)end)coroutine.resume(self.currentTask)end else self.currentTask=coroutine.create(function()for F=1,#self.taskQueue do local cf=self.taskQueue[F]if type(cf)==\"table\"then self.send(cf)end;table.remove(self.taskQueue,F)end end)coroutine.resume(self.currentTask)end end;function self.update()if self.currentTask then if coroutine.status(self.currentTask)~=\"dead\"then coroutine.resume(self.currentTask)else self.runQueue()end else self.runQueue()end end;return self end()HandleOutput=function()local self={}function self.Read(output)if type(output)~=\"string\"or output==\"\"then return end;local l=deserialize(output)if type(l)~=\"table\"then system.print('[E] Communication error!')return end;if l.dataType==\"config\"then config=l;local cg=tonumber(config.delta)if cg~=nil then config.targetAlt=ship.altitude+cg end;stats.data.target=config.targetAlt;self.Execute()elseif l.updateReq then ioScheduler.queueData(config)end end;function self.Execute()ship.baseAltitude=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ship.altitudeHold=config.targetAlt;if config.estop then config.targetAlt=0;ship.altitudeHold=0;ship.brake=true;ship.elevatorActive=false;ship.verticalLock=false;ship.stateMessage=\"EMERGENCY STOP\"system.print(ship.stateMessage)ioScheduler.queueData(config)else ship.brake=false end;manualControlSwitch()if not config.manualControl and ship.altitudeHold>0 then ship.elevatorActive=true;ship.targetDestination=moveWaypointZ(ship.baseLoc,config.targetAlt-ship.baseAltitude)end;if config.setBaseReq then setBase()config.setBaseReq=false;ioScheduler.queueData(config)end end;return self end()ioScheduler=IOScheduler;handleOutput=HandleOutput;function angle_between(ch,vec2)if not(vec3.isvector(ch)and vec3.isvector(vec2))then return 0 end;local ci=ch:len()local aR=vec2:len()if ci~=0 and aR~=0 then local cj=ch:dot(vec2)return math.acos(cj/(ci*aR))end;return 0 end;Utils3d=function()local ck={}local mat4=require(\"cpml/mat4\")function ck.localToRelative(cl,cm,cn,co)local cp,cq,cr=cn:unpack()local cs,ct,cu=co:unpack()local cv,cw,cx=cm:unpack()local cy,cz,cA=cl:unpack()local cB=cy*cp+cz*cs+cA*cv;local cC=cy*cq+cz*ct+cA*cw;local cD=cy*cr+cz*cu+cA*cx;return vec3(cB,cC,cD)end;function ck.worldToScreen(cE,cF,co,cm,cG,cH)local bB=mat4():perspective(cG,cH or 1920/1080,0.1,100000)local cI=mat4():look_at(cE,cE+co,cm)local cl=cI*bB*{cF.x,cF.y,cF.z,1}cl[1]=cl[1]/cl[4]*0.5+0.5;cl[2]=cl[2]/cl[4]*0.5+0.5;cl[1]=cl[1]*100;cl[2]=cl[2]*100;return vec3(cl[1],cl[2],cl[3])end;return ck end()local a6=require('atlas')json=require('dkjson')planetaryReference=PlanetRef()galaxyReference=planetaryReference(a6)helios=galaxyReference[0]kinematics=Kinematics()function STEC(core,cJ)local self={}self.core=core;self.construct=construct;self.control=cJ;local cK=vec3(construct.getWorldPosition())self.nearestPlanet=helios:closestBody(cK)self.world={up=vec3(self.construct.getWorldOrientationUp()),down=-vec3(self.construct.getWorldOrientationUp()),left=-vec3(self.construct.getWorldOrientationRight()),right=vec3(self.construct.getWorldOrientationRight()),forward=vec3(self.construct.getWorldOrientationForward()),back=-vec3(self.construct.getWorldOrientationForward()),velocity=vec3(self.construct.getWorldVelocity()),acceleration=vec3(self.construct.getWorldAcceleration()),position=cK,gravity=vec3(self.core.getWorldGravity()),vertical=vec3(self.core.getWorldVertical()),atmosphericDensity=self.control.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0}local cL=self.world.gravity:normalize()local cM=self.world.velocity:normalize()self.target={prograde=function()return cM end,retrograde=function()return-cM end,radial=function()return cL end,antiradial=function()return-cL end,normal=function()return cM:cross(cL):normalize()end,antinormal=function()return cM:cross(-cL):normalize()end}self.altitude=core.getAltitude()if self.nearestPlanet then self.altitude=self.nearestPlanet:getAltitude(cK)end;self.rot=vec3()self.deviationRot=vec3()self.id=construct.getId()self.controlMode=unit.getControlMode()self.alternateCM=false;self.targetDestination=nil;self.baseLoc=vec3()self.baseAltitude=0;self.verticalLock=false;self.lockVector=vec3()self.lockPos=vec3()self.altHoldPreset1=0;self.altHoldPreset2=0;self.altHoldPreset3=0;self.altHoldPreset4=0;self.deviation=0;self.deviationVec=vec3()self.stateMessage=\"\"self.pocket=false;self.autoShutdown=false;self.dockingClamps=false;self.IDIntensity=5;self.deviationThreshold=0.05;self.targetVectorVertical=nil;self.breadCrumbDist=1000;self.deviated=false;self.breadCrumbs={}self.hoverHeight=10;self.targetVectorAutoUnlock=true;self.mass=self.construct.getTotalMass()self.thrust=vec3()self.direction=vec3()self.rotation=vec3()self.rotationSpeed=2;self.rotationSpeedzMin=0.01;self.rotationSpeedz=0.01;self.maxRotationSpeedz=3;self.rotationStep=0.03;self.brakingFactor=10;self.angularThrust=vec3()self.inertialDampening=false;self.inertialDampeningDesired=false;self.brake=false;self.counterGravity=true;self.followGravity=true;self.gravityFollowSpeed=10;self.speedLimiter=1100;self.variableSpeedLimit=1100;self.speedLimiterToggle=true;self.verticalSpeedLimitAtmo=1100;self.verticalSpeedLimitSpace=4000;self.approachSpeed=200;self.throttle=1;self.fMax=0;self.vMax=0;self.hMax=0;self.elevatorActive=false;self.altitudeHold=0;self.atmosphereThreshold=0;self.cruiseSpeed=0;self.ignoreVerticalThrottle=false;self.localVelocity=vec3(construct.getVelocity())self.brakeDistance=0;self.accelTime=nil;self.viewY=0;self.viewX=0;self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.priorityTags1=\"brake,airfoil,torque,vertical,lateral,longitudinal\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"\"self.bodyGravity=0;local c6=system.getArkTime()function self.checkGrndDist()self.hasGndDet=false;self.isLanded=false;self.telemeterDist=nil;self.GrndDist=nil;if not telemeter then return end;self.hasGndDet=true;local cN=telemeter.raycast()if cN.hit then self.telemeterDist=cN.distance;self.GrndDist=cN.distance-(self.agl or 0)self.isLanded=self.GrndDist<=0.5 and vec3(construct.getWorldVelocity()):len()<1 end end;self.checkGrndDist()function self.updateWorld()local cO=vec3(construct.getWorldPosition())self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=cO,gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cJ.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0}self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.AngularVelocity=vec3(construct.getWorldAngularVelocity())self.AngularAcceleration=vec3(construct.getWorldAngularAcceleration())self.AngularAirFriction=vec3(construct.getWorldAirFrictionAngularAcceleration())self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())self.altitude=core.getAltitude()self.atmosphereThreshold=0;self.bodyGravity=0;self.nearestPlanet=helios:closestBody(cO)if self.nearestPlanet then self.altitude=self.nearestPlanet:getAltitude(cO)self.atmosphereThreshold=self.nearestPlanet.atmosphereRadius-self.nearestPlanet.radius;self.bodyGravity=self.nearestPlanet:getGravity(self.world.position)end;self.mass=self.construct.getTotalMass()self.localVelocity=vec3(construct.getVelocity())self.maxBrake=json.decode(unit.getWidgetData()).maxBrake;local cP=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})local cQ=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local cR=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})if self.world.atmosphericDensity>0.1 then self.fMax=math.max(cQ[1],-cQ[2])else self.fMax=math.max(cQ[3],-cQ[4])end;if self.world.atmosphericDensity>0.1 then self.vMax=math.max(cR[1],-cR[2])else self.vMax=math.min(cR[3],-cR[4])end;if self.world.atmosphericDensity>0.1 then self.hMax=math.max(cP[1],-cP[2])else self.hMax=math.max(cP[3],-cP[4])end;local cS=self.mass*core.getGravityIntensity()local cT=self.vMax;local cU=self.maxBrake;local cV=1;if self.maxBrake~=nil and core.getGravityIntensity()>=1 then if self.world.velocity:dot(-self.world.gravity:normalize())<1 then cV=-1 end;cS=cS*cV;cT=self.vMax+cS;cU=self.maxBrake+cS end;self.brakeDistance,self.accelTime=kinematics.computeDistanceAndTime(self.world.velocity:len(),0,self.mass,cT,20,cU)self.checkGrndDist()end;function self.calculateAccelerationForce(cW,bR)return self.mass*cW/bR end;function clamp(h,cX,cY)return math.min(cY,math.max(h,cX))end;function round(u,bt)local cZ=10^(bt or 0)return math.floor(u*cZ+0.5)/cZ end;function self.throttleUp()self.throttle=clamp(self.throttle+0.05,0,1)end;function self.throttleDown()self.throttle=clamp(self.throttle-0.05,0,1)end;function moveWaypointZ(c_,Z)if not ship.nearestPlanet then return c_ end;return c_-ship.nearestPlanet:getGravity(c_):normalize()*Z end;function self.worldToLocal(c_)if not vec3.isvector(c_)then return nil end;return vec3(library.systemResolution3({self.world.right:unpack()},{self.world.forward:unpack()},{self.world.up:unpack()},{c_:unpack()}))end;function self.localToRelative(cl,cm,cn,co)local cp,cq,cr=cn:unpack()local cs,ct,cu=co:unpack()local cv,cw,cx=cm:unpack()local cy,cz,cA=cl:unpack()local cB=cy*cp+cz*cs+cA*cv;local cC=cy*cq+cz*ct+cA*cw;local cD=cy*cr+cz*cu+cA*cx;return vec3(cB,cC,cD)end;function MsToKmh(d0)return d0*3.6 end;function KmhToMs(d1)return d1/3.6 end;function self.apply()self.updateWorld()local d2=self.thrust;local d3=self.angularThrust;local cQ=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local cP=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})if not vec3.isvector(self.baseLoc)or self.baseLoc==vec3()then self.baseLoc=nil end;local d4=self.baseLoc and helios:closestBody(self.baseLoc)or nil;if lockVerticalToBase and d4 then self.nearestPlanet=d4;self.altitude=self.nearestPlanet:getAltitude(self.world.position)self.atmosphereThreshold=self.nearestPlanet.atmosphereRadius-self.nearestPlanet.radius end;if not self.elevatorActive then self.inertialDampening=self.inertialDampeningDesired end;if self.direction.x~=0 then local aD=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local d5=-self.world.vertical*aD;if self.direction.x<0 and math.abs(round2(cP[2],0))<500 then d2=d2+self.world.right*self.direction.x+d5:normalize()*self.fMax*self.throttle elseif self.direction.x>0 and math.abs(round2(cP[1],0))<500 then d2=d2+self.world.right*self.direction.x+d5:normalize()*self.fMax*self.throttle else d2=d2+self.world.right*self.direction.x*self.fMax*self.throttle end end;if self.direction.y~=0 then local aD=(1-self.world.up:dot(-self.world.gravity:normalize()))*self.mass*0.000095;local d5=-self.world.vertical*aD;if self.direction.y<0 and math.abs(round2(cQ[2],0))==0 then d2=d2+self.world.forward*self.direction.y+d5:normalize()*self.fMax*self.throttle else d2=d2+self.world.forward*self.direction.y*self.fMax*self.throttle end end;if self.direction.z~=0 then local x=self.world.up*self.direction.z*self.fMax;if not self.ignoreVerticalThrottle then x=x*self.throttle end;d2=d2+x end;if self.rotation.y~=0 then d3=d3+self.world.up:cross(self.world.right)*self.rotation.y*self.rotationSpeed end;if self.rotation.z~=0 then if self.rotationSpeedz<=self.maxRotationSpeedz then self.rotationSpeedz=self.rotationSpeedz+self.rotationStep end;d3=d3+self.world.forward:cross(self.world.right)*self.rotation.z*clamp(self.rotationSpeedz,0.01,self.maxRotationSpeedz)if self.targetVectorAutoUnlock then self.targetVector=nil end end;if self.rotation.x~=0 then d3=d3+self.world.forward:cross(self.world.up)*self.rotation.x*self.rotationSpeed;if self.targetVectorAutoUnlock then self.targetVector=nil end elseif self.followGravity then local d6,d7,d8=1,vec3(),vec3()if lockVerticalToBase and d4 then d7=-d4:getGravity(self.baseLoc)elseif self.bodyGravity then d7=-self.bodyGravity end;d8=self.world.up:cross(d7)if self.pocket then if self.direction.x<0 then d6=0.25;d8=d8+ship.world.right:cross(d7*d6)elseif self.direction.x>0 then d6=0.25;d8=d8-ship.world.right:cross(d7*d6)elseif self.direction.y<0 then d8=d8+ship.world.forward:cross(d7*0.25)end end;d3=d3+d8*d6 end;if config.manualControl and self.isLanded and self.localVelocity:len()<1 and(self.direction.z==0 and self.direction.y==0 and self.direction.x==0)then self.brake=false;self.control.setEngineCommand(\"atmospheric_engine,space_engine,airfoil,brake,torque,vertical,lateral,longitudinal\",{vec3():unpack()},{vec3():unpack()},false,false,self.priorityTags1,self.priorityTags2,self.priorityTags3)return end;self.deviation=0;self.deviationVec=vec3()self.deviationRot=vec3()if self.baseLoc then self.deviationVec=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude)-self.world.position;self.deviation=self.deviationVec:len()if vec3.isvector(self.rot)then self.deviationRot=self.world.forward:cross(self.rot)end end;if self.elevatorActive and self.targetDestination and d4 then self.inertialDampening=true;self.counterGravity=true;self.targetVector=self.rot;if self.world.velocity:len()>2000/3.6 then deviation=0 end;local d9=self.altitudeHold-self.altitude;local da,db=1000,0;local ao=self.world.position-self.targetDestination:len()local dc=d4:getAltitude(self.targetDestination)-self.altitude;local dd=self.targetDestination;local de=0;de=self.verticalSpeedLimitSpace;if self.altitude<=self.atmosphereThreshold+self.brakeDistance or self.altitude<=self.brakeDistance then de=self.verticalSpeedLimitAtmo end;if self.brakeDistance+da>=math.abs(d9)then de=self.approachSpeed end;local deviationThreshold=self.deviationThreshold;if self.deviated or self.world.velocity:len()<1 then deviationThreshold=0.05 end;self.deviated=self.deviation>deviationThreshold+self.world.velocity:len()*10^-2;if self.deviated then local df=self.altitude-self.baseAltitude;if df~=0 and not self.isLanded then dd=moveWaypointZ(self.baseLoc,df)end;db=self.deviation*self.IDIntensity;self.stateMessage=\"Correcting Deviation\"end;if math.abs(d9)>self.brakeDistance and math.abs(d9)>500 and not self.deviated then self.stateMessage=\"Traveling\"db=round2(clamp(d9,-de,de),1)elseif not self.deviated then self.stateMessage=\"Final approach\"db=self.approachSpeed;if self.brakeDistance*1.5>=math.abs(ao)then db=5 end end;local dg;if ship.nearestPlanet then if dc>self.breadCrumbDist and not self.deviated then dg=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude+self.breadCrumbDist)dd=dg;local dh=ship.nearestPlanet:convertToMapPosition(dd)system.setWaypoint(dh,false)elseif dc<-self.breadCrumbDist and not self.deviated then dg=moveWaypointZ(self.baseLoc,self.altitude-self.baseAltitude-self.breadCrumbDist)dd=dg;local dh=ship.nearestPlanet:convertToMapPosition(dd)system.setWaypoint(dh,false)end end;local di=self.world.position-dd:normalize()d2=d2-di*self.mass*utils.clamp(ao*3.6,0.3,math.abs(db)/3.6*self.IDIntensity)self.dockingClamps=false;if ao<0.01 and not config.manualControl or ao<2 and not config.manualControl and self.world.velocity:len()==0 then self.elevatorActive=false;self.targetVector=nil;self.stateMessage=\"Idle\"self.dockingClamps=true end else self.targetDestination=nil end;if self.inertialDampening then local dj=self.localVelocity;local cg=vec3(0,0,0)local dk=self.direction or vec3(0,0,0)if dk.x==0 then cg.x=dj.x end;if dk.y==0 then cg.y=dj.y end;if dk.z==0 then cg.z=dj.z end;cg=self.localToRelative(cg,self.world.up,self.world.right,self.world.forward)d2=d2-cg*self.mass*self.IDIntensity end;if self.brake then local dl=self.world.velocity:len()d2=-self.world.velocity*self.mass*math.max(self.brakingFactor*math.max(1,dl*0.5),dl*dl)end;if self.targetVector~=nil then local dm=vec3(self.world.forward.x,self.world.forward.y,self.world.forward.z)if type(self.targetVector)==\"function\"then dm=self.targetVector()elseif type(self.targetVector)==\"table\"then dm=self.targetVector end;d3=d3+self.world.forward:cross(dm)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end;if self.targetVectorVertical~=nil then local dm=vec3(self.world.up.x,self.world.up.y,self.world.up.z)if type(self.targetVector)==\"function\"then dm=self.targetVector()elseif type(self.targetVector)==\"table\"then dm=self.targetVector end;if self.world.up-self.targetVectorVertical:len()<0 then d3=d3+-self.world.up:cross(dm)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)else d3=d3+self.world.up:cross(dm)*self.rotationSpeed/4-(self.AngularVelocity*2-self.AngularAirFriction*2)end end;if self.counterGravity then d2=d2-self.world.gravity*self.mass end;if self.verticalLock then local dn=self.world.position+self.world.up-self.lockPos;local dp=self.lockVector*self.lockVector:dot(dn)local dq=dp-dn;local dr=dq*self.mass*0.3;d2=d2+dr*self.mass end;d3=d3-(self.AngularVelocity*2-self.AngularAirFriction*2)d2=d2/self.mass;if self.controlMode~=unit.getControlMode()then self.controlMode=unit.getControlMode()self.alternateCM=unit.getControlMode()==1 end;self.control.setEngineCommand(\"atmospheric_engine,space_engine,airfoil,brake,torque,vertical,lateral,longitudinal\",{d2:unpack()},{d3:unpack()},false,false,self.priorityTags1,self.priorityTags2,self.priorityTags3)c6=system.getArkTime()end;return self end;ship=STEC(core,unit)displaySize=0.85;primaryColor=primaryColor or\"b80000\"secondaryColor=secondaryColor or\"e30000\"textShadowColor=textShadowColor or\"e81313\"CSS_SHUD=[[\n#horizon {\n\tleft: 0;\n\ttop: 0;\n\tposition: fixed;\n\twidth: 100vw;\n\theight: 100vh;\n\tbackground: radial-gradient(ellipse 27vw 11vw at 50% 51vw, rgba(1,5,8,0.6) 50%,rgba(1,5,8,0) 90%);\n\tfont-family: Montserrat, Roboto, Verdana;\n}\n#fuelTanks {\n\tposition: absolute;\n\ttop: 2%;\n\tleft: 2%;\n\tmargin: 2%;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n}\n.fuel-tanks {\n\twidth: 12vw;\n\tmargin-right: 1vw;\n\tdisplay: inline-block;\n\tvertical-align: top;\n}\n.fuel-meter {\n\theight: 1.8vh;\n\tbackground-color: #222;\n\tborder: 1px solid #fff;\n\tborder-radius: 0.6vh;\n\tfont-size: 0.9vh;\n\ttext-align: left;\n\toverflow: hidden;\n\tpadding: 0;\n}\n.fuel-meter hr.fuel-level {\n\theight: 1.6vh;\n\tborder: none;\n\tborder-radius: 0.6vh;\n\tmargin: 0;\n\tmargin-top: 0.1vh;\n\tpadding: 0;\n}\n.fuel-meter hr.fuel-level + span {\n\tfont-family: Montserrat, Roboto, Verdana;\n\tposition: relative;\n\ttop: -1.4vh;\n\tleft: 0.4vw;\n\tz-index: 1;\n\tcolor: #fff;\n\tfont-weight: bold;\n\tfont-size: 0.9vh;\n\tpadding 0;\n\ttext-shadow: 0.25vw 0.25vw 1.05vw #000;\n}\n.fuel-meter span:first-child {display: none;}\n.fuel-type-atmo .fuel-level {background: #1dd1f9;}\n.fuel-type-space .fuel-level {background: #ea5409;}\n.fuel-type-rocket .fuel-level {background: #bfa6ff;}\n\n#speedometer::before {\n\tdisplay: block;\n\tposition: absolute;\n\tcontent: ' ';\n\ttop: 0.25vh;\n\tbottom: -17vh;\n\tleft: 50%;\n\twidth: 31vw;\n\tborder: 10px solid #]]..primaryColor..[[;\n\tborder-bottom: 0;\n\tborder-right: 0;\n\tborder-left: 0;\n\tborder-radius: 100%;\n\ttransform: translateX(-50%);\n\tbackground-color: transparent;\n\tfilter: blur(100vw);\n}\n\n#speedometerBar {\n\tdisplay: block;\n\tposition: fixed;\n\tleft: 50%;\n\ttop: 77.2vh;\n\twidth: 30vw;\n\theight: 24.5vh;\n\ttransform: translate(-50%);\n\tcontent: ' ';\n\tborder: 10px solid #]]..primaryColor..[[;\n\tborder-bottom: 0;\n\tborder-right: 0;\n\tborder-left: 0;\n\tborder-radius: 100%;\n\tbackground-size: contain;\n\tbackground-color: transparent;\n\tfilter: blur(0.1vw);\n}\n\n#speedometer {\n\tfont-family: 'Montserrat', 'Roboto', 'Verdana';\n\tfont-weight: normal;\n\tfont-style: normal;\n\tposition: fixed;\n\tleft: 50%;\n\tbottom: 14vh;\n\tfont-size: 2.5vw;\n\ttransform: translate(-50%);\n\tbackground-color: transparent;\n\twidth: 30vw;\n\theight: 10vh;\n\ttext-align: center;\n}\n\n#speedometer .display {\n\tposition: absolute;\n\ttop: calc(50% + 1vh);\n\tleft: calc(50% + 0.25em);\n\ttransform: translate(-50%, -50%);\n\tfont-weight: bold;\n\ttext-shadow: 0 0 0.75vw #]]..textShadow..[[;\n\tpadding: 0;\n\tmargin: 0;\n\tfont-size: 2.8vw;\n}\n\n#speedometer .display .minor, #speedometer .unit {\n\tposition: relative;\n\tleft: -0.5em;\n\tvertical-align: super;\n\tfont-size: 40%;\n}\n\n#speedometer .unit {\n\tvertical-align: 50%;\n\tfont-size: 23%;\n\tleft: -1.33em;\n}\n\n#speedometer .accel {\n\tfont-size: 1.2vw;\n\ttext-shadow: 0 0 0.15vw #000000;\n\tposition: absolute;\n\tleft: 12.5%;\n\tbottom: 0;\n\topacity: 0.75;\n}\n\n#speedometer .accel .major::before {\n\tcontent: 'Δ';\n\tfont-size: 40%;\n}\n\n#speedometer .accel .unit {\n\tleft: -0.66em;\n}\n\n#speedometer .alt {\n\tposition: absolute;\n\tleft: 50%;\n\tbottom: -0.65vh;\n\ttransform: translateX(-50%);\n\tfont-size: 0.65vw;\n\ttext-align: center;\n}\n\n#speedometer .misc {\n\tposition: absolute;\n\tleft: 50%;\n\tbottom: -1.5vh;\n\ttransform: translateX(-50%);\n\tfont-size: 0.4vw;\n\ttext-align: center;\n}\n\n#speedometer .throttle {\n\tposition: absolute;\n\tleft: 50%;\n\tbottom: -3vh;\n\ttransform: translateX(-50%);\n\tfont-size: 0.7vw;\n\ttext-align: center;\n}\n\n#speedometer .vertical {\n\tfont-size: 1.3vw;\n\ttext-shadow: 0 0 0.15vw #000000;\n\tposition: absolute;\n\tright: 12.5%;\n\tbottom: 0;\n\topacity: 0.75;\n\ttext-align: right;\n}\n\n#speedometer .vertical::after {\n\tcontent: '↕ m/s';\n\tvertical-align: 50%;\n\tfont-size: 33%;\n}\n\n#speedometer::after {\n\tdisplay: block;\n\tfont-size: 0;\n\tbackground-size: contain;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 0.5vh;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tz-index: 666;\n\topacity: 0.5;\n}\n\n#horizon-menu {\n\ttext-transform: uppercase;\n\tfont-family: 'Verdana';\n\tfont-size: ]]..displaySize..[[vw;\n\tdisplay: flex;\n\tflex-direction: column;\n\tposition: fixed;\n\tbottom: 35%;\n\tleft: 2vw;\n\twidth: 18vw;\n\tpadding: 1vw;\n\ttransform: perspective(50vw) rotateY(35deg);\n\ttext-shadow: 0.1vw 0 0.25vw #000000;\n}\n#horizon-menu .item {\n\tcolor: #fff;\n\tpadding: 0.2vw 0.5vw;\n\tz-index: 99999;\n}\n#horizon-menu .item .right {\n\tfloat: right;\n}\n#horizon-menu .item .red {\n\tcolor: #]]..secondaryColor..[[;\n}\n#horizon-menu .item.active {\n\tposition: relative;\n\ttext-shadow: 0 0 0.75vw #]]..secondaryColor..[[;\n\ttransform: translateZ(0.33vw);\n\tfont-size: 1.15em;\n\ttransform-style: preserve-3d;\n}\n\n#horizon-menu .item.active::before {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 15%;\n\tbottom: 15%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..secondaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(1vw);\n\topacity: 0.2;\n}\n\n#horizon-menu .item.active::after {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 20%;\n\tbottom: 40%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..secondaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(0.2vw);\n\topacity: 0.3;\n}\n#horizon-menu .item.locked {\n\tpadding-left: 0.4vw;\n}\n#horizon-menu .item.locked::before {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 15%;\n\tbottom: 15%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..primaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(1vw);\n\topacity: 0.2;\n}\n#horizon-menu .item.locked::after {\n\tdisplay: block;\n\tcontent: ' ';\n\tposition: absolute;\n\ttop: 20%;\n\tbottom: 40%;\n\tleft: 0.1vw;\n\tright: 0.1vw;\n\tbackground: #]]..primaryColor..[[aa;\n\tz-index: -50;\n\tfilter: blur(0.2vw);\n\topacity: 0.6;\n}\n\n#horizon-menu::after {\n\tcontent: ' ';\n\tfilter: blur(1vw);\n\tdisplay: block;\n\tborder-top-left-radius: 1vw;\n\tborder-top-right-radius: 1vw;\n\tborder-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n\tbackground: linear-gradient(to bottom, rgba(0,0,0,0.65) 50%,rgba(0,0,0,0) 100%);\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: -99;\n}\n\n#horizon-menu::before {\n\tcontent: ' ';\n\tfilter: blur(0.05vw);\n\tdisplay: block;\n\tborder-top-left-radius: 1vw;\n\tborder-top-right-radius: 1vw;\n\tborder-top: 0.25vw solid #]]..primaryColor..[[;\n\tborder-left: 0.25vw solid #]]..primaryColor..[[;\n\tborder-right: 0.25vw solid #]]..primaryColor..[[;\n\tborder-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\n\tbackground: radial-gradient(ellipse at top, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);\n\tposition: absolute;\n\ttop: 0;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: -100;\n}\n\n/* ORE TRILATERATE STYLE */\n\np {\t/*color:#eca943;*/\n\tfont-size:100%;\n}\n\n.block {\n\tborder: 1px solid DimGray;\n\tborder-radius:10px;\n\tbackground-color: rgba(0,0,0,.5)\n}\n\n#main_block{\n\ttext-align: center;\n\tpadding: 10px 10px 10px 10px;\n}\n\n#help_block{\n\ttext-align: left;\n\tpadding: 10px 10px 10px 10px;\n\twidth: 320px;\n}\n\n#pause_block{\n\ttext-align: center;\n\tfont-size:90%;\n}\n\n#panel_left {\n\tposition: absolute;\n\ttop: 0%;\n\tleft: 0%;\n\t/*width: 310px;*/\n}\n#slider_header {\n\tposition: absolute;\n\ttop: 0vh;\n\tfont-size:110%;\n\twidth: 100%;\n\ttext-align: center;\n}\n\n#slider_main {\n\tposition: relative;\n\tfont-size:105%;\n\tcolor:#eca943;\n\t/*left: -51%;/*0%*/*/\n}\n\n#slider_footer{\n\tposition: relative;\n\tfont-size:120%;\n\ttop:80%;\n\tleft:10%;\n}\n\n#panel_slider {\n\tposition: absolute;\n\ttop: 54.5vh; ;\n\tleft: 66.8vw;/*66.8vw;*/\n\twidth: 9vw;/*9vw;*/\n\theight: 28.5vh;\n\ttransform: skew(15.85deg); /*15.85deg*/\n\tborder-bottom: 28.5vh solid rgba(0,0,0,.25);\n\tborder-right: 1vw solid transparent;\n\t/*background-color:rgba(0,0,0,.75)*/\n}\n\n#panel_test {\n\tposition: fixed;\n\ttop: 100px; /* or whatever top you need */\n\tleft: 50%;\n\twidth: auto;\n\t-webkit-transform: translateX(-50%);\n\t-moz-transform: translateX(-50%);\n\t-ms-transform: translateX(-50%);\n\t-o-transform: translateX(-50%);\n\ttransform: translateX(-50%);\n}\n\n.shadow {\n\t-webkit-filter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n\tfilter: drop-shadow( 3px 3px 2px rgba(0, 0, 0, .7));\n}\n]]vec2=require('cpml/vec2')mat4=require(\"cpml/mat4\")altHoldAdjustment=0.1;altAdjustment=3;local bB=system.print;function SpeedConvert(H)if not H or H==0 then return{0,\"00\",\"km/h\"}end;if H>5000 then local ds=tonumber(tostring(round2(H/55.55,2)):match(\"%.(%d+)\"))local dt=string.format(\"%02d\",ds)return{round2(H/55.55),dt,\"su/h\"}end;local ds=tonumber(tostring(round2(H/3.6,2)):match(\"%.(%d+)\"))local dt=string.format(\"%02d\",ds)return{round2(H*3.6),dt,\"km/h\"}end;function CruiseControl(H)local du=0;if ship.cruiseSpeed<500 then du=H*10 elseif ship.cruiseSpeed>=500 and ship.cruiseSpeed<=1999 then du=H*50 elseif ship.cruiseSpeed>=2000 and ship.cruiseSpeed<=9999 then du=H*100 elseif ship.cruiseSpeed>=10000 then du=H*1000 end;ship.cruiseSpeed=utils.clamp(ship.cruiseSpeed+du,-29990,29990)end;function getControlMode()return ship.alternateCM and\"Cruise\"or\"Travel\"end;function altHoldAdjustmentSetting()return altHoldAdjustment*10^altAdjustment end;function setAltHoldAdjustment()end;function SHUDMenuItem(dv,dw,dx)local self={}self.Enabled=true;self.Active=false;self.Content=dv;self.Class=\"\"self.Action=dw or function(system,unit,self)end;self.Update=dx or function(system,unit,self)end;function self.Disable()self.Enabled=false;return self end;function self.Enable()self.Enabled=true;return self end;function self.Lock()SHUD.ScrollLock=true;self.Active=true;self.Class=\"locked\"return self end;function self.Unlock()SHUD.ScrollLock=false;self.Active=false;self.Class=\"\"return self end;return self end;SHUD=function()local self={}self.Enabled=false;self.FreezeUpdate=false;self.IntroPassed=false;self.FOV=system.getCameraHorizontalFov()self.ScreenW=system.getScreenWidth()self.ScreenH=system.getScreenHeight()self.Resolution=vec2(self.ScreenW,self.ScreenH)self.SvgMinX=-round(self.ScreenW/4/2,0)self.SvgMinY=-round(self.ScreenH/4/2,0)self.SvgWidth=round(self.ScreenW/4,0)self.SvgHeight=round(self.ScreenH/4,0)function scaleViewBounds(dy)local dz=-0.5;local dA=0.5;local dB=-90;local dC=90;return-((dy-dz)/(dA-dz)*(dC-dB)+dB)end;shipPitch=scaleViewBounds(ship.pitchRatio)self.SHUDAtmoFuelHtml=\"\"self.SHUDSpaceFuelHtml=\"\"self.Markers={}self.MarkerBuffer={}function self.worldToScreen(dD)local bB=mat4():perspective(self.FOV,self.ScreenW/self.ScreenH,0.1,100000)local dE=ship.world.position-vec3(player.getWorldHeadPosition())local cI=mat4():look_at(dE,dE+ship.world.forward,ship.world.up)local cl=cI*bB*{dD.x,dD.y,dD.z,1}cl[1]=cl[1]/cl[4]*0.5+0.5;cl[2]=cl[2]/cl[4]*0.5+0.5;cl[1]=cl[1]*100;cl[2]=cl[2]*100;return vec3(cl[1],cl[2],cl[3])end;local dF=SHUDMenuItem;local dG=DynamicDocument;function self.UpdateMarkers()self.MarkerBuffer={}for F=1,#self.Markers do local p=self.Markers[F]local dH={}local U=vec3(0,0,0)if type(p.Position)==\"function\"then dH.pos=p.Position()U=p.Position()else dH.pos=p.Position;U=p.Position end;dH.pos=self.worldToScreen(dH.pos)dH.class=p.Class;dH.content='&nbsp;'if p.Name then dH.content=[[<div class=\"name\">]]..p.Name..[[</div>]]end;if p.ShowDistance then dH.content=dH.content..[[<div class=\"distance\">]]..round2(ship.world.position-U:len())..[[m</div>]]end;if dH.pos.z>0 then self.MarkerBuffer[#self.MarkerBuffer+1]=dH end end end;local function dI(b8)return b8:gsub(\"%%\",\"%%%%\")end;function self.MakeBooleanIndicator(dJ)local dK=[[<span class=\"right\">\n\t\t\t<i dd-if=\"varName == true\">✓&nbsp;</i>\n\t\t\t<i dd-if=\"varName == false\">✘&nbsp;</i>\n\t\t</span>]]return dK:gsub(\"varName\",dI(dJ))end;function self.MakeSliderIndicator(dJ,dL)dL=dL or\"\"local dK=[[<span class=\"right\">{{varName}}{{suffix}}<i>&udarr;&nbsp;</i></span>]]return dK:gsub(\"varName\",dI(dJ)):gsub(\"{{suffix}}\",dI(dL))end;function self.GenerateMenuLink(dM,dN)return dF(dM..self.MenuIcon,function()self.SelectMenu(dN)end)end;self.MenuIcon=[[<span class=\"right\"><i>&gt;&nbsp;</i></span>]]self.BackButton=dF([[<i>&lt;&nbsp;</i>&nbsp;]]..\"Back\",function()SHUD.Menu=SHUD.MenuList.prev;SHUD.CurrentIndex=1 end)self.Menu={dF(dG([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\",\"%\")),function(a,a,b7)if b7.Active then b7.Unlock()else b7.Lock()end end,function(system,a,b7)ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end),self.GenerateMenuLink(\"Stability Assist\",\"stability\"),self.GenerateMenuLink(\"Altitude Hold\",\"altHold\"),self.GenerateMenuLink(\"Ship Stats\",\"shipStats\"),dF([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon,function()self.SelectMenu(\"hotkeys\")end)}self.MenuList={}self.MenuList.flightMode={}self.MenuList.shipStats={dF(dG([[<span>Core ID:</span><span class=\"right\">{{ship.id}}</span>]])).Disable(),dF(dG([[<span>Mass:</span><span class=\"right\">{{round2(ship.mass/1000,2)}} Ton</span>]])).Disable(),dF(dG([[<span>FMax:</span><span class=\"right\">{{round2(ship.fMax/1000,2)}} KN</span>]])).Disable(),dF(dG([[<span>Pos X:</span><span class=\"right\">{{round2(ship.world.position.x)}}</span>]])).Disable(),dF(dG([[<span>Pos Y:</span><span class=\"right\">{{round2(ship.world.position.y)}}</span>]])).Disable(),dF(dG([[<span>Pos Z:</span><span class=\"right\">{{round2(ship.world.position.z)}}</span>]])).Disable()}self.MenuList.stability={dF(dG(\"<span>Gravity Suppression<span>\"..self.MakeBooleanIndicator(\"ship.counterGravity\")),function()ship.counterGravity=not ship.counterGravity end),dF(dG(\"<span>Gravity Follow</span>\"..self.MakeBooleanIndicator(\"ship.followGravity\")),function()ship.followGravity=not ship.followGravity end),dF(dG(\"<span>Inertial Dampening<span>\"..self.MakeBooleanIndicator(\"ship.inertialDampening\")),function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end),dF(dG([[<span>Hover Height<span>]]..self.MakeSliderIndicator(\"ship.hoverHeight\",\"m\")),function(a,a,b7)if b7.Active then b7.Unlock()else b7.Lock()end end,function(system,a,b7)ship.hoverHeight=utils.clamp(ship.hoverHeight+system.getMouseWheel(),0,35)end)}function self.updateTargetDest()ship.targetDestination=moveWaypointZ(ship.baseLoc,utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)-ship.baseAltitude)ship.altitudeHold=utils.clamp(ship.altitudeHold+system.getMouseWheel()*altHoldAdjustmentSetting(),0,2000000)end;function self.updateAltHoldMenu()self.MenuList.altHold={dF(dG(\"<span>Altitude Hold<span>\"..self.MakeBooleanIndicator(\"ship.elevatorActive\")),function()ship.elevatorActive=not ship.elevatorActive end),dF(dG([[<span>Multiplier<span>]]..self.MakeSliderIndicator(\"round2(altHoldAdjustmentSetting(),3)\",\"\")),function(a,a,b7)if b7.Active then b7.Unlock()else b7.Lock()end end,function(system,a,b7)altAdjustment=utils.clamp(altAdjustment+system.getMouseWheel(),-1,4)end),dF(dG([[<span>Alt Setpoint<span>]]..self.MakeSliderIndicator(\"round2(ship.altitudeHold,3)\",\"m\")),function(a,a,b7)if b7.Active then b7.Unlock()else b7.Lock()end end,function(system,a,b7)self.updateTargetDest()end),dF(dG([[<span>Preset 1:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset1)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset1;ship.elevatorActive=true end),dF(dG([[<span>Preset 2:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset2)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset2;ship.elevatorActive=true end),dF(dG([[<span>Preset 3:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset3)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset3;ship.elevatorActive=true end),dF(dG([[<span>Preset 4:</span><span class=\"right\">]]..mToKm(ship.altHoldPreset4)..\"</span>\"),function()ship.altitudeHold=ship.altHoldPreset4;ship.elevatorActive=true end),dF(dG([[<span>Altitude:</span><span class=\"right\">{{round2(ship.altitude,4)}}</span>]])).Disable()}end;self.MenuList.hotkeys={}local dO=\"<style>\"..CSS_SHUD..\"</style>\"self.fuel=nil;function getFuelRenderedHtml()self.fuel=getFuelSituation()local dP=function(type,ce)local dQ=100*ce.level;local dR=ce.level*ce.specs.capacity()return'<div class=\"fuel-meter fuel-type-'..type..'\"><hr class=\"fuel-level\" style=\"width:'..dQ..'%%;\" /><span>'..ce.name..': '..ce.time..' ('..math.floor(dQ)..'%%, '..math.floor(dR)..'L)</span></div>'end;self.SHUDAtmoFuelHtml=''self.SHUDSpaceFuelHtml=''if next(self.fuel.atmo)then local fuelHtml='<div class=\"fuel-tanks fuel-type-atmo\">'for a,ce in pairs(self.fuel.atmo)do fuelHtml=fuelHtml..dP(\"atmo\",ce)end;self.SHUDAtmoFuelHtml=fuelHtml..'</div>'end;if next(self.fuel.space)then fuelHtml='<div class=\"fuel-tanks fuel-type-space\">'for a,ce in pairs(self.fuel.space)do fuelHtml=fuelHtml..dP(\"space\",ce)end;self.SHUDSpaceFuelHtml=fuelHtml..'</div>'end end;opacity=0.5;local dS=dG(dO..[[\n\t<div id=\"horizon\" style=\"opacity: {{opacity}};\">\n\t\t<div id=\"speedometerBar\">&nbsp;</div>\n\t\t\t<div id=\"speedometer\">\n\t\t\t\t<span class=\"display\">\n\t\t\t\t\t<span class=\"major\">{{SpeedConvert(ship.world.velocity:len())[1]}}</span>\n\t\t\t\t\t<span class=\"minor\">{{SpeedConvert(ship.world.velocity:len())[2]}}</span>\n\t\t\t\t\t<span class=\"unit\">{{SpeedConvert(ship.world.velocity:len())[3]}}</span>\n\t\t\t\t</span>\n\t\t\t\t<span class=\"accel\">\n\t\t\t\t\t<span class=\"major\">{{round2(ship.world.acceleration:len(), 1)}}</span>\n\t\t\t\t\t<span class=\"unit\">m/s</span>\n\t\t\t\t</span>\n\t\t\t\t\t<span class=\"vertical\">\n\t\t\t\t\t{{round2(ship.world.velocity:dot(-ship.world.gravity:normalize()), 1)}}\n\t\t\t\t</span>\n\t\t\t\t<span class=\"alt\">{{round2(ship.altitude)}}m</span>\n\n\t\t\t\t<span class=\"misc\">ATM {{round2(ship.world.atmosphericDensity, 2)}} | G {{round2(ship.world.gravity:len(), 2)}}m/s</span>\n\t\t\t\t<span dd-if=\"not ship.alternateCM\" class=\"throttle\">Throttle {{round2(ship.throttle * 100)}}%</span>\n\t\t\t\t<span dd-if=\"ship.alternateCM\" class=\"throttle\">Cruise {{round2(ship.cruiseSpeed)}} km/h</span>\n\t\t\t</div>\n\n\t\t\t<div id=\"horizon-menu\">{{_SHUDBUFFER}}</div>\n\n\t\t</div>\n\t\t<div id=\"fuelTanks\">\n\t\t\t{{ SHUD.SHUDAtmoFuelHtml }}\n\t\t\t{{ SHUD.SHUDSpaceFuelHtml }}\n\t\t</div>\n\t</div>\n\t]])local dT=[[<div class=\"item {{class}}\">{{content}}</div>]]function self.SelectMenu(dU)if not SHUD.MenuList[dU]then error(\"[SHUD] Undefined menu: \"..dU)end;SHUD.MenuList.prev=SHUD.Menu;SHUD.Menu=SHUD.MenuList[dU]SHUD.CurrentIndex=1;if SHUD.Menu[#SHUD.Menu]~=SHUD.BackButton then table.insert(SHUD.Menu,SHUD.BackButton)end end;function self.Select()if not self.Enabled then return end;if#self.Menu<1 then return end;self.Menu[self.CurrentIndex].Action(self.system,self.unit,self.Menu[self.CurrentIndex])end;function self.Render()local dV=\"\"if self.Enabled then for F=1,#self.Menu do local dW=self.Menu[F]if dW.Active then dW.Update(self.system,self.unit,dW)end;local dX=dT;local dY=\"\"local dv=dW.Content;if dv.Read then dv=dv.Read()end;dv=dI(dv)if self.CurrentIndex==F then dY=\"active\"end;if not dW.Enabled then dY=dY..\" disabled\"end;dX=dX:gsub(\"{{class}}\",dY..\" \"..dW.Class)dX=dX:gsub(\"{{content}}\",dv)dV=dV..dX end;_ENV[\"_SHUDBUFFER\"]=dI(dV)else ship.frozen=player.isFrozen()_ENV[\"_SHUDBUFFER\"]=dG([[<div class=\"item helpText\">Press ]]..\"[\"..self.system.getActionKeyName(\"speedup\")..\"]\"..[[ to toggle menu</div>\n\t\t\t\t<div class=\"item helpText\"><span>Character Movement:</span>]]..self.MakeBooleanIndicator(\"ship.frozen\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Vertical Lock:</span>]]..self.MakeBooleanIndicator(\"ship.verticalLock\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Inertial Dampening:</span>]]..self.MakeBooleanIndicator(\"ship.inertialDampening\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Follow:</span>]]..self.MakeBooleanIndicator(\"ship.followGravity\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Gravity Supression:</span>]]..self.MakeBooleanIndicator(\"ship.counterGravity\")..[[</div>\n\t\t\t\t<div class=\"item helpText\"><span>Open Door:</span><span class=\"right\">F5</span></div>\n\t\t\t\t<div class=\"item helpText\"><span>Close Door:</span><span class=\"right\">F6</span></div>\n\t\t\t\t]]).Read()end;if not self.FreezeUpdate then self.system.setScreen(dS.Read())end end;function self.Update()updateGEAS()if self.Enabled then opacity=1 else opacity=0.5 end;if not self.ScrollLock and self.Enabled then local dZ=system.getMouseWheel()if dZ~=0 then self.CurrentIndex=self.CurrentIndex-dZ;if self.CurrentIndex>#self.Menu then self.CurrentIndex=1 elseif self.CurrentIndex<1 then self.CurrentIndex=#self.Menu end end elseif not self.Enabled then if player.isFrozen()and unit.isRemoteControlled()then ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end;self.UpdateMarkers()end end;function self.Init(system,unit,d_)self.system=system;self.unit=unit;self.CurrentIndex=1;self.ScrollLock=false;system.showScreen(true)unit.hideWidget()local K=d_.GetNamedKeybinds()self.updateAltHoldMenu()self.MenuList.hotkeys={}for F=1,#K do local e0=K[F]table.insert(self.MenuList.hotkeys,dF([[<span>]]..e0.Name..[[</span><span class=\"right\">]]..self.system.getActionKeyName(e0.Key)..[[</span>]]).Disable())end;self.MenuList.flightMode={}for G,n in pairs(keybindPresets)do table.insert(self.MenuList.flightMode,dF(string.upper(G),function()self.Init(self.system,self.unit,n)keybindPreset=G;keybindPresets[keybindPreset].Init()end))end;d_.Init()end;return self end()local bB,clamp=system.print,utils.clamp;ship.hoverHeight=tonumber(GEAS_Alt)or 10;ship.autoShutdown=autoShutdown==true;ship.altitudeHold=round2(ship.altitude,2)ship.inertialDampeningDesired=inertialDampening==true;ship.followGravity=followGravity==true;ship.minRotationSpeed=tonumber(minRotationSpeed)or 0.01;ship.maxRotationSpeedz=tonumber(maxRotationSpeed)or 5;ship.rotationStep=tonumber(rotationStep)or 0.025;ship.verticalSpeedLimitAtmo=tonumber(verticalSpeedLimitAtmo)or 1100;ship.verticalSpeedLimitSpace=tonumber(verticalSpeedLimitSpace)or 4000;ship.approachSpeed=tonumber(approachSpeed)or 100;ship.deviationThreshold=tonumber(deviationThreshold)or 0.5;ship.pocket=pocket==true;ship.breadCrumbDist=tonumber(breadCrumbDist)or 1000;ContainerOptimization=clamp(tonumber(ContainerOptimization)or 0,0,5)FuelTankOptimization=clamp(tonumber(FuelTankOptimization)or 0,0,5)fuelTankHandlingAtmo=clamp(tonumber(fuelTankHandlingAtmo)or 0,0,5)fuelTankHandlingSpace=clamp(tonumber(fuelTankHandlingSpace)or 0,0,5)dockingMode=clamp(tonumber(dockingMode)or 1,1,3)controlStateChange=true;local e1=false;local e2={[true]=1,[false]=0}local e3={[1]=true,[0]=false}local function e4()ship.altHoldPreset1=tonumber(ship.altHoldPreset1)or 0;ship.altHoldPreset2=tonumber(ship.altHoldPreset2)or 0;ship.altHoldPreset3=tonumber(ship.altHoldPreset3)or 0;ship.altHoldPreset4=tonumber(ship.altHoldPreset4)or 0 end;local function e5(e0,e6)if not flightModeDb.hasKey(e0)or updateSettings then flightModeDb.setIntValue(e0,e2[e6==true])end;return e3[clamp(flightModeDb.getIntValue(e0),0,1)]end;local function e7(e0,e6,e8,e9)if tonumber(e8)and tonumber(e9)then e6=clamp(tonumber(e6)or e8,e8,e9)end;if not flightModeDb.hasKey(e0)or updateSettings then flightModeDb.setFloatValue(e0,e6)end;if not(tonumber(e8)and tonumber(e9))then return flightModeDb.getFloatValue(e0)end;return clamp(flightModeDb.getFloatValue(e0),e8,e9)end;local function ea(e0,e6,e8,e9)if tonumber(e8)and tonumber(e9)then e6=clamp(tonumber(e6)or e8,e8,e9)end;if not flightModeDb.hasKey(e0)or updateSettings then flightModeDb.setIntValue(e0,e6)end;if not(tonumber(e8)and tonumber(e9))then return flightModeDb.getIntValue(e0)end;return clamp(flightModeDb.getIntValue(e0),e8,e9)end;function writeVecToDb(eb,ec)if flightModeDb and ec and vec3.isvector(eb)then settingsActive=false;flightModeDb.setFloatValue(ec..\"X\",eb.x)flightModeDb.setFloatValue(ec..\"Y\",eb.y)flightModeDb.setFloatValue(ec..\"Z\",eb.z)end end;function readVecFromDb(ec)if flightModeDb and ec then local n=vec3(0,0,0)n.x=flightModeDb.getFloatValue(ec..\"X\")n.y=flightModeDb.getFloatValue(ec..\"Y\")n.z=flightModeDb.getFloatValue(ec..\"Z\")return n end end;function gearToggle()if unit.isAnyLandingGearExtended()then unit.retractLandingGears()else unit.extendLandingGears()end end;function scaleViewBound(dz,dA,dB,dC,dy)return(dy-dz)/(dA-dz)*(dC-dB)+dB end;function switchFlightMode(ed)SHUD.Init(system,unit,keybindPresets[ed])keybindPreset=ed;if flightModeDb then flightModeDb.setStringValue(\"flightMode\",ed)end end;function switchControlMode()ship.alternateCM=not ship.alternateCM end;function swapSwitchesAndFF()toggleForceFields(player.isFrozen())toggleSwitches(player.isFrozen())end;function setAgl(x)local u=tonumber(x)if u then ship.agl=u end;if flightModeDb then flightModeDb.setFloatValue(\"agl\",ship.agl)end;config.agl=ship.agl;bB('AGL: '..ship.agl)end;function setBase(x)if not ship.nearestPlanet then return bB'[E] No gravity well for setting base!'end;ship.rot=ship.world.right:cross(ship.nearestPlanet:getGravity(construct.getWorldPosition()))if type(x)~=\"string\"or x==\"\"then ship.baseLoc=ship.world.position elseif string.find(x,\"::pos\")~=nil then local ee=ship.nearestPlanet:convertToWorldCoordinates(x)if not vec3.isvector(ee)then bB(\"[E] Invalid location string: \"..x)return end;ship.baseLoc=ee end;writeVecToDb(ship.baseLoc,\"BaseLoc\")writeVecToDb(ship.rot,\"BaseRot\")config.rtb=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ioScheduler.queueData(config)end;function updateGEAS()if useGEAS and not config.manualControl then unit.activateGroundEngineAltitudeStabilization(ship.hoverHeight)else unit.deactivateGroundEngineAltitudeStabilization()end end;function normalizeTravelMode()if ship.controlMode==1 and controlStateChange then ship.cruiseSpeed=round(ship.world.velocity:len()*3.6,-1)ship.throttle=0;controlStateChange=false elseif ship.controlMode==0 then controlStateChange=true end end;function autoLandingGear()if ship.world.velocity:len()>=83.3333 then unit.retractLandingGears()else unit.extendLandingGears()end end;function STEC_configInit()ship.baseLoc=ship.world.position;ship.rot=ship.world.forward;e4()if not flightModeDb then bB(\"[E] No databank found!\")else bB(\"[I] Databank found.\")dockingMode=ea(\"dockingMode\",dockingMode,1,3)activateFFonStart=e5(\"activateFFonStart\",setactivateFFonStart)activateFFonStop=e5(\"activateFFonStop\",setactivateFFonStop)activateLasersOnStart=e5(\"activateLasersOnStart\",setactivateLasersOnStart)activateLasersOnStop=e5(\"activateLasersOnStop\",setactivateLasersOnStop)activateSwitchOnStart=e5(\"activateSwitchOnStart\",setactivateSwitchOnStart)activateSwitchOnStop=e5(\"activateSwitchOnStop\",setactivateSwitchOnStop)lockVerticalToBase=e5(\"lockVerticalToBase\",lockVerticalToBase)pocket=e5(\"pocket\",setpocket)ship.verticalSpeedLimitAtmo=e7(\"verticalSpeedLimitAtmo\",verticalSpeedLimitAtmo,0,1100)verticalSpeedLimitSpace=clamp(tonumber(verticalSpeedLimitSpace)or 4000,100,10000)ship.verticalSpeedLimitSpace=e7(\"verticalSpeedLimitSpace\",verticalSpeedLimitSpace,100,10000)ship.approachSpeed=e7(\"approachSpeed\",approachSpeed,50,300)ship.altHoldPreset1=e7(\"altHoldPreset1\",altHoldPreset1,0,200000000)ship.altHoldPreset2=e7(\"altHoldPreset2\",altHoldPreset2,0,200000000)ship.altHoldPreset3=e7(\"altHoldPreset3\",altHoldPreset3,0,200000000)ship.altHoldPreset4=e7(\"altHoldPreset4\",altHoldPreset4,0,200000000)if flightModeDb.hasKey(\"BaseLocX\")then ship.baseLoc=readVecFromDb(\"BaseLoc\")if flightModeDb.hasKey(\"BaseRotX\")then ship.rot=readVecFromDb(\"BaseRot\")else config.setBaseActive=true end else config.setBaseActive=true end;updateSettings=false;ship.agl=e7(\"agl\",ship.agl,0,10)end end;function ElevatorInit()elevatorName=construct.getName()config.floors.floor1=ship.altHoldPreset1;config.floors.floor2=ship.altHoldPreset2;config.floors.floor3=ship.altHoldPreset3;config.floors.floor4=ship.altHoldPreset4;config.targetAlt=0;bB(\"Preset 1: \"..config.floors.floor1)bB(\"Preset 2: \"..config.floors.floor2)bB(\"Preset 3: \"..config.floors.floor3)bB(\"Preset 4: \"..config.floors.floor4)ioScheduler.defaultData=stats;ioScheduler.queueData(config)end;local function ef()if elevatorScreen and vec3.isvector(ship.baseLoc)and ship.baseLoc~=vec3()and ship.baseAltitude and ship.baseAltitude>0 then ship.altitudeHold=ship.baseAltitude;ship.targetDestination=moveWaypointZ(ship.baseLoc,0)ship.elevatorActive=true end end;local function eg()if e1 then if flightModeDb then flightModeDb.clear()bB(\"[I] DB cleared!\")end else config.manualControl=not config.manualControl;manualControlSwitch()end end;local function eh(ei)if emitter then emitter.send(\"door_control\",ei)end end;local ej=DUTTY;ej.onCommand('setbase',function(x)setBase(x)end)ej.onCommand('setagl',function(x)setAgl(x)end)keybindPresets[\"keyboard\"]=KeybindController()keybindPresets[\"keyboard\"].Init=function()keybindPreset=\"keyboard\"ship.ignoreVerticalThrottle=true;ship.throttle=1 end;keybindPresets[\"keyboard\"].keyDown.up.Add(function()ship.direction.z=1;if not ship.counterGravity then ship.counterGravity=true end end)keybindPresets[\"keyboard\"].keyUp.up.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.down.Add(function()ship.direction.z=-1 end)keybindPresets[\"keyboard\"].keyUp.down.Add(function()ship.direction.z=0 end)keybindPresets[\"keyboard\"].keyDown.yawleft.Add(function()ship.rotation.z=-1 end)keybindPresets[\"keyboard\"].keyUp.yawleft.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.yawright.Add(function()ship.rotation.z=1 end)keybindPresets[\"keyboard\"].keyUp.yawright.Add(function()ship.rotation.z=0;ship.rotationSpeedz=ship.minRotationSpeed end)keybindPresets[\"keyboard\"].keyDown.forward.Add(function()ship.direction.y=1 end)keybindPresets[\"keyboard\"].keyUp.forward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"keyboard\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"keyboard\"].keyDown.left.Add(function()ship.direction.x=-1 end)keybindPresets[\"keyboard\"].keyUp.left.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.right.Add(function()ship.direction.x=1 end)keybindPresets[\"keyboard\"].keyUp.right.Add(function()ship.direction.x=0 end)keybindPresets[\"keyboard\"].keyDown.lshift.Add(function()e1=true end,\"Shift Modifier\")keybindPresets[\"keyboard\"].keyUp.lshift.Add(function()e1=false end)keybindPresets[\"keyboard\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"keyboard\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"keyboard\"].keyUp.stopengines.Add(function()SHUD.Select()if not SHUD.Enabled then if ship.direction.y~=0 then ship.direction.y=0 else ship.direction.y=1 end end end,\"Cruise\")keybindPresets[\"keyboard\"].keyUp.gear.Add(function()useGEAS=not useGEAS;updateGEAS()end)keybindPresets[\"keyboard\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"keyboard\"].keyUp[\"option1\"].Add(function()ship.inertialDampeningDesired=not ship.inertialDampeningDesired end,\"Inertial Dampening\")keybindPresets[\"keyboard\"].keyUp[\"option2\"].Add(function()player.freeze(not player.isFrozen())swapSwitchesAndFF()end,\"Freeze character\")keybindPresets[\"keyboard\"].keyUp[\"option3\"].Add(function()ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"keyboard\"].keyUp[\"option4\"].Add(function()ship.counterGravity=not ship.counterGravity end,\"Counter Gravity\")keybindPresets[\"keyboard\"].keyUp[\"option5\"].Add(function()ship.verticalLock=true;ship.lockVector=vec3(construct.getWorldOrientationUp())ship.lockPos=vec3(construct.getWorldPosition())+vec3(construct.getWorldOrientationUp())writeVecToDb(ship.lockVector,\"lockVector\")writeVecToDb(ship.lockPos,\"lockPos\")end,\"Set Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option6\"].Add(function()ship.verticalLock=not ship.verticalLock end,\"Toggle Vertical Lock\")keybindPresets[\"keyboard\"].keyUp[\"option7\"].Add(function()ef()end,\"RTB\")keybindPresets[\"keyboard\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(1)if construct.undock()then bB('[I] Undocked')end end,\"Undock\")keybindPresets[\"keyboard\"].keyUp[\"option9\"].Add(function()eg()end,\"Manual Mode Toggle\")keybindPresets[\"screenui\"]=KeybindController()keybindPresets[\"screenui\"].Init=function()keybindPreset=\"screenui\"ship.frozen=false;ship.ignoreVerticalThrottle=true;ship.throttle=1;player.freeze(ship.frozen)end;keybindPresets[\"screenui\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"screenui\"].keyDown.lshift.Add(function()e1=true end,\"Shift Modifier\")keybindPresets[\"screenui\"].keyUp.lshift.Add(function()e1=false end)keybindPresets[\"screenui\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"screenui\"].keyUp.brake.Add(function()ship.brake=false end)if next(forceFields)then keybindPresets[\"screenui\"].keyUp[\"option2\"].Add(function()toggleForceFields(not e1)end,\"De-/Activate Forcefields\")end;if next(manualSwitches)then keybindPresets[\"screenui\"].keyUp[\"option3\"].Add(function()toggleSwitches(not e1)end,\"De-/Activate Switches\")end;if next(lasers)then keybindPresets[\"screenui\"].keyUp[\"option4\"].Add(function()toggleLasers(not e1)end,\"De-/Activate Lasers\")end;if emitter then keybindPresets[\"screenui\"].keyUp[\"option5\"].Add(function()eh(\"open\")end,\"Open Door\")keybindPresets[\"screenui\"].keyUp[\"option6\"].Add(function()eh(\"close\")end,\"Close Door\")end;keybindPresets[\"screenui\"].keyUp[\"option7\"].Add(function()ef()end,\"RTB\")keybindPresets[\"screenui\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(1)construct.undock()end,\"Undock\")keybindPresets[\"screenui\"].keyUp[\"option9\"].Add(function()eg()end,\"Manual Mode Toggle\")keybindPreset=\"keyboard\"if flightModeDb then if not flightModeDb.hasKey(\"flightMode\")then flightModeDb.setStringValue(\"flightMode\",\"keyboard\")end;keybindPreset=flightModeDb.getStringValue(\"flightMode\")if keybindPreset~='keyboard'and keybindPreset~='screenui'then keybindPreset='keyboard'end end;SHUD.Init(system,unit,keybindPresets[keybindPreset])Task(function()coroutine.yield()SHUD.FreezeUpdate=true;local ek=system.getArkTime()+2;while system.getArkTime()<ek do coroutine.yield()end;SHUD.FreezeUpdate=false;SHUD.IntroPassed=true end)ship.frozen=false;player.freeze(ship.frozen)updateGEAS()ElevatorScreen=function()local self={}function self.updateStats()stats.data.elevation=ship.altitude;stats.data.target=config.targetAlt;stats.data.velocity=ship.world.velocity:len()stats.data.mass=ship.mass;stats.data.gravity=ship.world.gravity:len()stats.data.target_dist=math.abs(ship.altitude-ship.altitudeHold)stats.data.brake_dist=ship.brakeDistance;stats.data.deviation=ship.deviation;stats.data.deviationVec=ship.worldToLocal(ship.deviationVec)stats.data.deviationRot=ship.worldToLocal(ship.deviationRot)stats.data.deviationRotAngle=angle_between(ship.world.forward,ship.rot)*180/math.pi;stats.data.state=ship.stateMessage;stats.data.delta=nil;stats.data.grounddistance=ship.GrndDist;stats.data.agl=ship.agl;stats.data.base=nil;if vec3.isvector(ship.baseLoc)and ship.baseLoc~=vec3()then stats.data.base=ship.baseLoc end end;self.updateStats()if screen then screen.clearScriptOutput()end;return self end()_G.BuildUnit={}local el=_G.BuildUnit;_G.BuildSystem={}local em=_G.BuildSystem;_G.BuildScreen={}local en=_G.BuildScreen;_G.BuildEmitter={}local eo=_G.BuildEmitter;local bB=system.print;elevatorScreen=nil;function manualControlSwitch()local aX=config.manualControl==true;ship.frozen=unit.isRemoteControlled()and aX;ship.elevatorActive=not aX;ship.counterGravity=true;ship.followGravity=true;ship.inertialDampening=true;ship.verticalLock=lockVerticalToBase and not aX;player.freeze(ship.frozen)if aX then config.targetAlt=ship.baseAltitude;ship.altitudeHold=ship.baseAltitude;ship.targetDestination=nil;ship.stateMessage=\"Manual Control\"switchFlightMode(\"keyboard\")else ship.stateMessage=\"Idle\"switchFlightMode(\"screenui\")end end;function el.onStart()Events.Flush.Add(ship.apply)Events.Update.Add(SHUD.Update)getFuelRenderedHtml()if system.showHelper then system.showHelper(false)end;bB('Horizon Elevator 1.1.2')bB('Created by ShadowTemplar')bB('Customized by tobitege, v2024-05-02')if construct.setDockingMode(dockingMode)then bB(\"[I] Docking mode set to: \"..dockingMode)else bB(\"[W] Could not set docking mode to: \"..dockingMode)end;if telemeter then bB(\"[I] Telemeter found.\")else bB(\"[E] Telemeter not found!\")end;if screen then bB(\"[I] Screen found.\")else bB(\"[E] No screen found!\")end;STEC_configInit()ship.elevatorActive=false;config.manualControl=true;local au=ship.nearestPlanet;if screen and telemeter and flightModeDb then if not au then bB'[E] Elevator disabled: no planetary body as gravity well!'else if setBaseOnStart then setBase()end;if config.setBaseActive or not vec3.isvector(ship.baseLoc)then config.setBaseActive=false;config.rtb=au:getAltitude(ship.world.position)bB(\"[I] No base location set, using current location!\")else config.rtb=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)ship.baseAltitude=helios:closestBody(ship.baseLoc):getAltitude(ship.baseLoc)bB(\"Base location: \"..tostring(ship.baseLoc))end;if ship.baseLoc and ship.baseLoc~=vec3()then au=helios:closestBody(ship.baseLoc)if au then config.manualControl=false;ship.altitudeHold=au:getAltitude(ship.world.position)ship.baseAltitude=au:getAltitude(ship.baseLoc)elevatorScreen=ElevatorScreen;bB(\"[I] Altitude: \"..round2(ship.baseAltitude,2))end end;if not elevatorScreen then bB'[E] Elevator disabled: no body of gravity influence!'end end else bB'[E] Elevator disabled: elements missing!'bB'Check links for core, databank, telemeter and a screen!'end;if vec3.isvector(ship.baseLoc)and ship.baseLoc~=vec3()then bB(\"Base: \"..tostring(ship.baseLoc))local ep=tostring(ship.nearestPlanet:convertToMapPosition(ship.baseLoc))bB(\"Map location: \"..ep)system.setWaypoint(ep,false)end;ship.brake=true;if elevatorScreen then ElevatorInit()else ship.throttle=0;ship.verticalLock=false;ship.followGravity=true;ship.inertialDampening=true end;ship.followGravity=true;ship.inertialDampening=true;if emitter then bB(\"[I] Emitter range: \"..emitter.getRange())end;if ship.isLanded then bB('Landed: '..round2(ship.GrndDist or 0,2)..' m')config.manualControl=true end;bB('Manual Control: '..(config.manualControl and'On'or'Off'))manualControlSwitch()unit.setTimer(\"SHUDRender\",0.02)unit.setTimer(\"FuelStatus\",3)unit.setTimer(\"DockingTrigger\",1)toggleForceFields(activateFFonStart)toggleLasers(activateLasersOnStart)toggleSwitches(activateSwitchOnStart)if showDockingWidget then parentingPanelId=system.createWidgetPanel(\"Docking\")parentingWidgetId=system.createWidget(parentingPanelId,\"parenting\")system.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)end end;function el.onStop()toggleForceFields(activateFFonStop)toggleLasers(activateLasersOnStop)toggleSwitches(activateSwitchOnStop)config.shutDown=true;if screen then screen.setScriptInput(serialize(config))end;system.showScreen(false)end;function el.onTimer(eq)if eq==\"SHUDRender\"then if SHUD then SHUD.Render()end elseif eq==\"FuelStatus\"then getFuelRenderedHtml()elseif eq==\"DockingTrigger\"then local er;if telemeter then er=telemeter.raycast().distance end;if ship.dockingClamps then toggleLasers(true)if er and er>0 and er<1 then if ship.autoShutdown and not config.manualControl then unit.exit()end end end end end;function em.onActionStart(dw)keybindPresets[keybindPreset].Call(dw,\"down\")end;function em.onActionStop(dw)keybindPresets[keybindPreset].Call(dw,\"up\")end;function em.onInputText(dw)if DUTTY then DUTTY.input(dw)end end;function em.onActionLoop(dw)end;function em.onUpdate()ioScheduler.update()if elevatorScreen then elevatorScreen.updateStats()end;if Events then Events.Update()end;if TaskManager then TaskManager.Update()end end;function em.onFlush()if Events then Events.Flush()end end;function eo.onSent(es,et,eu)bB(\"Sent: \"..es..\" | \"..et)end;function en.onMouseUp(b8,b9,eu)end;function en.onMouseDown(b8,b9,eu)end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "_G.BuildUnit.onStart()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "_G.BuildUnit.onStop()",
      "filter": {
        "args": [],
        "signature": "onStop",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "_G.BuildSystem.onActionStart(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStart(action)",
        "slotKey": "-2"
      },
      "key": "3"
    },
    {
      "code": "_G.BuildSystem.onActionStop(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStop(action)",
        "slotKey": "-2"
      },
      "key": "4"
    },
    {
      "code": "_G.BuildSystem.onInputText(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onInputText(action)",
        "slotKey": "-2"
      },
      "key": "5"
    },
    {
      "code": "_G.BuildSystem.onUpdate()",
      "filter": {
        "args": [],
        "signature": "onUpdate",
        "slotKey": "-2"
      },
      "key": "6"
    },
    {
      "code": "_G.BuildSystem.onFlush()",
      "filter": {
        "args": [],
        "signature": "onFlush",
        "slotKey": "-2"
      },
      "key": "7"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"SHUDRender\")",
      "filter": {
        "args": [
          {
            "variable": "SHUDRender"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "8"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"FuelStatus\")",
      "filter": {
        "args": [
          {
            "variable": "FuelStatus"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "9"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"DockingTrigger\")",
      "filter": {
        "args": [
          {
            "variable": "DockingTrigger"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "10"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "0"
      },
      "key": "11"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "0"
      },
      "key": "12"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "0"
      },
      "key": "13"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "0"
      },
      "key": "14"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "1"
      },
      "key": "15"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "1"
      },
      "key": "16"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "1"
      },
      "key": "17"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "1"
      },
      "key": "18"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "2"
      },
      "key": "19"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "2"
      },
      "key": "20"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "2"
      },
      "key": "21"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "2"
      },
      "key": "22"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "3"
      },
      "key": "23"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "3"
      },
      "key": "24"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "3"
      },
      "key": "25"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "3"
      },
      "key": "26"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "4"
      },
      "key": "27"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "4"
      },
      "key": "28"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "4"
      },
      "key": "29"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "4"
      },
      "key": "30"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "5"
      },
      "key": "31"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "5"
      },
      "key": "32"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "5"
      },
      "key": "33"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "5"
      },
      "key": "34"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "6"
      },
      "key": "35"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "6"
      },
      "key": "36"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "6"
      },
      "key": "37"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "6"
      },
      "key": "38"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "7"
      },
      "key": "39"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "7"
      },
      "key": "40"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "7"
      },
      "key": "41"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "7"
      },
      "key": "42"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "8"
      },
      "key": "43"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "8"
      },
      "key": "44"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "8"
      },
      "key": "45"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "8"
      },
      "key": "46"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "9"
      },
      "key": "47"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "9"
      },
      "key": "48"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "9"
      },
      "key": "49"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "9"
      },
      "key": "50"
    }
  ],
  "methods": [],
  "events": []
}