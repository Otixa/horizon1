--@class FuelTankHelperMin
fuelTanks={}fuelAverage={}FuelTime={}fuelTypes={atmo={density=4.000},space={density=6.000},rocket={density=0.800}}fuelTankSpecsByMaxHP={atmo={_50={type="atmo",size="XS",capacity=100,baseWeight=35.030},_163={type="atmo",size="S",capacity=400,baseWeight=182.670},_1315={type="atmo",size="M",capacity=1600,baseWeight=988.670},_10461={type="atmo",size="L",capacity=6400,baseWeight=5480.000}},space={_187={type="space",size="S",capacity=400,baseWeight=182.670},_1496={type="space",size="M",capacity=1600,baseWeight=988.670},_15933={type="space",size="L",capacity=12800,baseWeight=5480.000}},rocket={_366={type="rocket",size="XS",capacity=400,baseWeight=173.420},_736={type="rocket",size="S",capacity=800,baseWeight=886.720},_6231={type="rocket",size="M",capacity=6400,baseWeight=4720.000},_68824={type="rocket",size="L",capacity=50000,baseWeight=25740.000}}}local a=table.unpack;function sma(b)local c={}function sum(d,...)if d then return d+sum(...)else return 0 end end;function average(e)if#c==b then table.remove(c,1)end;if e~=0 and e~=nil then c[#c+1]=e end;return sum(a(c))/#c end;return average end;local function f(g)return g==math.huge or g==-math.huge end;local function h(g)return g~=g end;function disp_time(i)if f(i)or h(i)then return"inf"end;local j=math.floor(i/86400)local k=math.floor(math.fmod(i,86400)/3600)local l=math.floor(math.fmod(i,3600)/60)local m=math.floor(math.fmod(i,60))if i>=86400 then return string.format("%dd:%02dhrs:%02dmin:%02dsec",j,k,l,m)elseif i<86400 and i>3600 then return string.format("%02dhrs:%02dmin:%02dsec",k,l,m)elseif i<3600 and i>60 then return string.format("%02dmin:%02dsec",l,m)else return string.format("%02dsec",m)end end;function fuelUsed(b)local c={}function sum(d,...)if d then return d-sum(...)else return 0 end end;function average(e)if#c==b then table.remove(c,1)end;if e~=0 and e~=nil then c[#c+1]=e end;return sum(a(c))end;return average end;function scaleNumbers(n,o,p,q,r)return(r-n)/(o-n)*(q-p)+p end;function getFuelSituation()local s={atmo={},space={},rocket={}}for t,u in pairs(fuelTanks)do table.insert(s[u.type],{name=core.getElementNameById(t),level=getReminingFuelDynamic(t),time=getFuelTime(t),specs=u})end;return s end;function getFuelTankSpecs(v,w)local x=math.floor(core.getElementMaxHitPointsById(w))return fuelTankSpecsByMaxHP[v]['_'..x]end;function getReminingFuelDynamic(w)local y=core.getElementTypeById(w):gsub("%s+","_").."_"..w;local massTotal=core.getElementMassById(w)flightModeDb.setFloatValue(y.."_Current",massTotal)local z=flightModeDb.getFloatValue(y.."_MIN")local A=flightModeDb.getFloatValue(y.."_MAX")if z==0.0 or massTotal<z then flightModeDb.setFloatValue(y.."_MIN",massTotal)end;if A==0.0 or massTotal>A then flightModeDb.setFloatValue(y.."_MAX",massTotal)end;local B=scaleNumbers(z,A,0,100,massTotal)return B end;function getFuelTime(w)local y=core.getElementTypeById(w):gsub("%s+","_").."_"..w;local C=flightModeDb.getFloatValue(y.."_lastUpdate")local D=math.max(system.getTime()-C,0.001)local massTotal=flightModeDb.getFloatValue(y.."_Current")local z=flightModeDb.getFloatValue(y.."_MIN")local A=flightModeDb.getFloatValue(y.."_MAX")local fuelUsed=FuelTime[w](massTotal)local E=D/fuelUsed*(massTotal-z)local average=fuelAverage[w](E)local F=disp_time(E)flightModeDb.setFloatValue(y.."_lastUpdate",system.getTime())return F end;function getFuelTankLiters(w)local G=fuelTanks[w]local H=massTotal-G.baseWeight;local I=H/fuelTypes[G.type].density;return I end;function getFuelTankLevel(w)local G=fuelTanks[w]return getFuelTankLiters(w)/G.capacity end;function getFuelTanks()local J=core.getElementIdList()for K,L in pairs(J)do local M=core.getElementTypeById(L)if M=="Atmospheric Fuel Tank"then fuelTanks[L]=getFuelTankSpecs("atmo",L)fuelAverage[L]=sma(3)FuelTime[L]=fuelUsed(2)elseif M=="Space Fuel Tank"then fuelTanks[L]=getFuelTankSpecs("space",L)fuelAverage[L]=sma(3)FuelTime[L]=fuelUsed(2)elseif M=="Rocket Fuel Tank"then fuelTanks[L]=getFuelTankSpecs("rocket",L)fuelAverage[L]=sma(3)FuelTime[L]=fuelUsed(2)end end end;getFuelTanks()