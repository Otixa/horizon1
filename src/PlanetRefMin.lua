--@class PlanetRefMin
function PlanetRef()local function a(b)return type(b)=='number'end;local function c(b)return type(tonumber(b))=='number'end;local function d(e)return type(e)=='table'end;local function f(g)return type(g)=='string'end;local function h(j)return d(j)and a(j.x and j.y and j.z)end;local function k(l)return d(l)and a(l.latitude and l.longitude and l.altitude and l.bodyId and l.systemId)end;local m=math.pi/180;local n=180/math.pi;local o=1e-10;local p=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local q='::pos{'..p..','..p..','..p..','..p..','..p..'}'local r=require('cpml.utils')local s=require('cpml.vec3')local t=r.clamp;local function u(v,w)if v==0 then return math.abs(w)<1e-09 end;if w==0 then return math.abs(v)<1e-09 end;return math.abs(v-w)<math.max(math.abs(v),math.abs(w))*o end;local function x(b)local y=string.gsub(string.reverse(string.format('%.4f',b)),'^0*%.?','')return y==''and'0'or string.reverse(y)end;local function z(A)if h(A)then return string.format('{x=%.3f,y=%.3f,z=%.3f}',A.x,A.y,A.z)end;if d(A)and not getmetatable(A)then local B={}local C=next(A)if type(C)=='nil'or C==1 then B=A else for D,j in pairs(A)do local E=z(j)if type(D)=='number'then table.insert(B,string.format('[%s]=%s',D,E))else table.insert(B,string.format('%s=%s',D,E))end end end;return string.format('{%s}',table.concat(B,','))end;if f(A)then return string.format("'%s'",A:gsub("'",[[\']]))end;return tostring(A)end;local F={}F.__index=F;F.__tostring=function(A,G)local H=G or''local I={}for D in pairs(A)do table.insert(I,D)end;table.sort(I)local B={}for J,D in ipairs(I)do local E=z(A[D])if type(D)=='number'then table.insert(B,string.format('[%s]=%s',D,E))else table.insert(B,string.format('%s=%s',D,E))end end;if G then return string.format('%s%s',G,table.concat(B,',\n'..G))end;return string.format('{%s}',table.concat(B,','))end;F.__eq=function(K,L)return K.planetarySystemId==L.planetarySystemId and K.bodyId==L.bodyId and u(K.radius,L.radius)and u(K.center.x,L.center.x)and u(K.center.y,L.center.y)and u(K.center.z,L.center.z)and u(K.GM,L.GM)end;local function M(N,O,P,Q,R)assert(c(N),'Argument 1 (planetarySystemId) must be a number:'..type(N))assert(c(O),'Argument 2 (bodyId) must be a number:'..type(O))assert(c(P),'Argument 3 (radius) must be a number:'..type(P))assert(d(Q),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(Q))assert(c(R),'Argument 5 (GM) must be a number:'..type(R))return setmetatable({planetarySystemId=tonumber(N),bodyId=tonumber(O),radius=tonumber(P),center=s(Q),GM=tonumber(R)},F)end;local S={}S.__index=S;S.__tostring=function(T)return string.format('::pos{%d,%d,%s,%s,%s}',T.systemId,T.bodyId,x(T.latitude*n),x(T.longitude*n),x(T.altitude))end;S.__eq=function(K,L)return K.bodyId==L.bodyId and K.systemId==L.systemId and u(K.latitude,L.latitude)and u(K.altitude,L.altitude)and(u(K.longitude,L.longitude)or u(K.latitude,math.pi/2)or u(K.latitude,-math.pi/2))end;local function U(V,O,W,X,Y)local N=V;if f(V)and not X and not Y and not O and not W then N,O,W,X,Y=string.match(V,q)assert(N,'Argument 1 (position string) is malformed.')else assert(c(N),'Argument 1 (systemId) must be a number:'..type(N))assert(c(O),'Argument 2 (bodyId) must be a number:'..type(O))assert(c(W),'Argument 3 (latitude) must be in degrees:'..type(W))assert(c(X),'Argument 4 (longitude) must be in degrees:'..type(X))assert(c(Y),'Argument 5 (altitude) must be in meters:'..type(Y))end;N=tonumber(N)O=tonumber(O)W=tonumber(W)X=tonumber(X)Y=tonumber(Y)if O==0 then return setmetatable({latitude=W,longitude=X,altitude=Y,bodyId=O,systemId=N},S)end;return setmetatable({latitude=m*t(W,-90,90),longitude=m*(X%360),altitude=Y,bodyId=O,systemId=N},S)end;local Z={}Z.__index=Z;Z.__tostring=function(A,G)local H=G and G..'  'local _={}local I={}for D in pairs(A)do table.insert(I,D)end;table.sort(I)for J,a0 in ipairs(I)do bdy=A[a0]local a1=F.__tostring(bdy,H)if G then table.insert(_,string.format('[%s]={\n%s\n%s}',a0,a1,G))else table.insert(_,string.format('  [%s]=%s',a0,a1))end end;if G then return string.format('\n%s%s%s',G,table.concat(_,',\n'..G),G)end;return string.format('{\n%s\n}',table.concat(_,',\n'))end;local function a2(a3)local a4={}local a5;for J,j in pairs(a3)do local a6=j.planetarySystemId;if type(a6)~='number'then error('Invalid planetary system ID: '..tostring(a6))elseif a5 and a6~=a5 then error('Mismatch planetary system IDs: '..a6 ..' and '..a5)end;local a7=j.bodyId;if type(a7)~='number'then error('Invalid body ID: '..tostring(a7))elseif a4[a7]then error('Duplicate body ID: '..tostring(a7))end;setmetatable(j.center,getmetatable(s.unit_x))a4[a7]=setmetatable(j,F)a5=a6 end;return setmetatable(a4,Z)end;PlanetaryReference={}local function a8(a3)return setmetatable({galaxyAtlas=a3 or{}},PlanetaryReference)end;PlanetaryReference.__index=function(e,i)if type(i)=='number'then local a9=e.galaxyAtlas[i]return a2(a9)end;return rawget(PlanetaryReference,i)end;PlanetaryReference.__pairs=function(A)return function(e,D)local aa,nv=next(e,D)return aa,nv and a2(nv)end,A.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(A)local ab={}for J,ac in pairs(A or{})do local ad=ac:getPlanetarySystemId()local ae=Z.__tostring(ac,'    ')table.insert(ab,string.format('  [%s]={%s\n  }',ad,ae))end;return string.format('{\n%s\n}\n',table.concat(ab,',\n'))end;PlanetaryReference.BodyParameters=M;PlanetaryReference.MapPosition=U;PlanetaryReference.PlanetarySystem=a2;function PlanetaryReference.createBodyParameters(af,O,ag,ah,ai,aj,ak)assert(c(af),'Argument 1 (planetarySystemId) must be a number:'..type(af))assert(c(O),'Argument 2 (bodyId) must be a number:'..type(O))assert(c(ag),'Argument 3 (surfaceArea) must be a number:'..type(ag))assert(d(ah),'Argument 4 (aPosition) must be an array or vec3:'..type(ah))assert(d(ai),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ai))assert(c(aj),'Argument 6 (altitude) must be in meters:'..type(aj))assert(c(ak),'Argument 7 (gravityAtPosition) must be number:'..type(ak))local P=math.sqrt(ag/4/math.pi)local al=P+aj;local am=s(ah)+al*s(ai)local R=ak*al*al;return M(af,O,P,am,R)end;PlanetaryReference.isMapPosition=k;function PlanetaryReference:getPlanetarySystem(V)if self.galaxyAtlas then local af=V;if k(V)then af=V.systemId end;if type(af)=='number'then local a9=self.galaxyAtlas[i]if a9 then if getmetatable(nv)~=Z then a9=a2(a9)end;return a9 end end end;return nil end;function Z:castIntersections(an,ao,ap,aq)local ap=ap or function(ar)return 1.05*ar.radius end;local as={}if aq then for J,i in ipairs(aq)do as[i]=self[i]end else aq={}for D,ar in pairs(self)do table.insert(aq,D)as[D]=ar end end;local function at(au,av)local aw=as[au].center-an;local ax=as[av].center-an;return aw:len()<ax:len()end;table.sort(aq,at)local ay=ao:normalize()for i,a6 in ipairs(aq)do local ar=as[a6]local az=ar.center-an;local P=ap(ar)local aA=az:dot(ay)local aB=aA^2-(az:len2()-P^2)if aB>=0 then local aC=math.sqrt(aB)local aD=aA+aC;local aE=aA-aC;if aE>0 then return ar,aD,aE elseif aD>0 then return ar,aD,nil end end end;return nil,nil,nil end;function Z:closestBody(aF)assert(type(aF)=='table','Invalid coordinates.')local aG,ar;local aH=s(aF)for J,aI in pairs(self)do local aJ=(aI.center-aH):len2()if not ar or aJ<aG then ar=aI;aG=aJ end end;return ar end;function Z:convertToBodyIdAndWorldCoordinates(V)local aK=V;if f(V)then aK=U(V)end;if aK.bodyId==0 then return 0,s(aK.latitude,aK.longitude,aK.altitude)end;local aI=self:getBodyParameters(aK)if aI then return aK.bodyId,aI:convertToWorldCoordinates(aK)end end;function Z:getBodyParameters(V)local O=V;if k(V)then O=V.bodyId end;assert(c(O),'Argument 1 (bodyId) must be a number:'..type(O))return self[O]end;function Z:getPlanetarySystemId()local D,j=next(self)return j and j.planetarySystemId end;function F:convertToMapPosition(Q)assert(d(Q),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(Q))local aL=s(Q)if self.bodyId==0 then return setmetatable({latitude=aL.x,longitude=aL.y,altitude=aL.z,bodyId=0,systemId=self.planetarySystemId},S)end;local aM=aL-self.center;local al=aM:len()local Y=al-self.radius;local W=0;local X=0;if not u(al,0)then local aN=math.atan(aM.y,aM.x)X=aN>=0 and aN or 2*math.pi+aN;W=math.pi/2-math.acos(aM.z/al)end;return setmetatable({latitude=W,longitude=X,altitude=Y,bodyId=self.bodyId,systemId=self.planetarySystemId},S)end;function F:convertToWorldCoordinates(V)local aK=f(V)and U(V)or V;if aK.bodyId==0 then return s(aK.latitude,aK.longitude,aK.altitude)end;assert(k(aK),'Argument 1 (mapPosition) is not an instance of "MapPosition".')assert(aK.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(aK.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local aO=math.cos(aK.latitude)return self.center+(self.radius+aK.altitude)*s(aO*math.cos(aK.longitude),aO*math.sin(aK.longitude),math.sin(aK.latitude))end;function F:getAltitude(Q)return(s(Q)-self.center):len()-self.radius end;function F:getDistance(Q)return(s(Q)-self.center):len()end;function F:getGravity(Q)local aP=self.center-s(Q)local aQ=aP:len2()return self.GM/aQ*aP/math.sqrt(aQ)end;return setmetatable(PlanetaryReference,{__call=function(J,...)return a8(...)end})end